<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuickGraph.3.6.61114.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.QuickGraphDelegates">
            <summary>Contains custom delegates used for the stubs and shims of QuickGraph</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2">
            <summary>Shim type of QuickGraph.Algorithms.Cliques.MaximumCliqueAlgorithmBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2.#ctor(QuickGraph.Algorithms.Cliques.MaximumCliqueAlgorithmBase{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IUndirectedGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2.ConstructorIAlgorithmComponentIUndirectedGraphOfT0T1">
            <summary>Sets the shim of MaximumCliqueAlgorithmBase`2.MaximumCliqueAlgorithmBase`2(IAlgorithmComponent host, IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2.ConstructorIUndirectedGraphOfT0T1">
            <summary>Sets the shim of MaximumCliqueAlgorithmBase`2.MaximumCliqueAlgorithmBase`2(IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Cliques.Fakes.ShimMaximumCliqueAlgorithmBase`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2">
            <summary>Stub type of QuickGraph.Algorithms.Cliques.MaximumCliqueAlgorithmBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.#ctor(QuickGraph.IUndirectedGraph{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IUndirectedGraph{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.Clean">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.Clean01">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.Initialize">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.Initialize01">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.InitializeStub">
            <summary>Initializes a new instance of type StubMaximumCliqueAlgorithmBase</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.InternalCompute">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.InternalCompute01">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.OnAborted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.OnAbortedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.OnFinished(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.OnFinishedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.OnStarted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.OnStartedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.OnStateChanged(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.OnStateChangedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.TryGetService(System.Type,System.Object@)">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.TryGetServiceTypeObjectOut">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Cliques.Fakes.StubMaximumCliqueAlgorithmBase`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3">
            <summary>Shim type of QuickGraph.Algorithms.Condensation.CondensationGraphAlgorithm`3</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.#ctor(QuickGraph.Algorithms.Condensation.CondensationGraphAlgorithm{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexAndEdgeListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.ComputeComponentCountDictionaryOfT0Int32">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.ComputeComponentCount(Dictionary`2&lt;!0,Int32&gt; components)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.CondensedGraphGet">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.get_CondensedGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.ConstructorIVertexAndEdgeListGraphOfT0T1">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.CondensationGraphAlgorithm`3(IVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.InternalCompute">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.StronglyConnectedGet">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.get_StronglyConnected()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.StronglyConnectedSetBoolean">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.set_StronglyConnected(Boolean value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.AllInstances.ComputeComponentCountDictionaryOfT0Int32">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.ComputeComponentCount(Dictionary`2&lt;!0,Int32&gt; components)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.AllInstances.CondensedGraphGet">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.get_CondensedGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.AllInstances.InternalCompute">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.AllInstances.StronglyConnectedGet">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.get_StronglyConnected()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensationGraphAlgorithm`3.AllInstances.StronglyConnectedSetBoolean">
            <summary>Sets the shim of CondensationGraphAlgorithm`3.set_StronglyConnected(Boolean value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3">
            <summary>Shim type of QuickGraph.Algorithms.Condensation.CondensedEdge`3</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3.#ctor(QuickGraph.Algorithms.Condensation.CondensedEdge{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3.Bind(QuickGraph.IEdge{`2})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3.ConstructorT2T2">
            <summary>Sets the shim of CondensedEdge`3.CondensedEdge`3(!2 source, !2 target)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3.EdgesGet">
            <summary>Sets the shim of CondensedEdge`3.get_Edges()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimCondensedEdge`3.AllInstances.EdgesGet">
            <summary>Sets the shim of CondensedEdge`3.get_Edges()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Condensation.EdgeMergeCondensationGraphAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.#ctor(QuickGraph.Algorithms.Condensation.EdgeMergeCondensationGraphAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IBidirectionalGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.CondensatedGraphGet">
            <summary>Sets the shim of EdgeMergeCondensationGraphAlgorithm`2.get_CondensatedGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.ConstructorIBidirectionalGraphOfT0T1IMutableBidirectionalGraphOfT0MergedEdgeOfT0T1VertexPredicateOfT0">
            <summary>Sets the shim of EdgeMergeCondensationGraphAlgorithm`2.EdgeMergeCondensationGraphAlgorithm`2(IBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph, IMutableBidirectionalGraph`2&lt;!0,MergedEdge`2&lt;!0,!1&gt;&gt; condensatedGraph, VertexPredicate`1&lt;!0&gt; vertexPredicate)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.InternalCompute">
            <summary>Sets the shim of EdgeMergeCondensationGraphAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.MergeVertexT0">
            <summary>Sets the shim of EdgeMergeCondensationGraphAlgorithm`2.MergeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.VertexPredicateGet">
            <summary>Sets the shim of EdgeMergeCondensationGraphAlgorithm`2.get_VertexPredicate()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.AllInstances.CondensatedGraphGet">
            <summary>Sets the shim of EdgeMergeCondensationGraphAlgorithm`2.get_CondensatedGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of EdgeMergeCondensationGraphAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.AllInstances.MergeVertexT0">
            <summary>Sets the shim of EdgeMergeCondensationGraphAlgorithm`2.MergeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimEdgeMergeCondensationGraphAlgorithm`2.AllInstances.VertexPredicateGet">
            <summary>Sets the shim of EdgeMergeCondensationGraphAlgorithm`2.get_VertexPredicate()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2">
            <summary>Shim type of QuickGraph.Algorithms.Condensation.MergedEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.#ctor(QuickGraph.Algorithms.Condensation.MergedEdge{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.Bind(QuickGraph.IEdge{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.ConstructorT0T0">
            <summary>Sets the shim of MergedEdge`2.MergedEdge`2(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.EdgesGet">
            <summary>Sets the shim of MergedEdge`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.MergeMergedEdgeOfT0T1MergedEdgeOfT0T1">
            <summary>Sets the shim of MergedEdge`2.Merge(MergedEdge`2&lt;!0,!1&gt; inEdge, MergedEdge`2&lt;!0,!1&gt; outEdge)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Condensation.Fakes.ShimMergedEdge`2.AllInstances.EdgesGet">
            <summary>Sets the shim of MergedEdge`2.get_Edges()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.#ctor(QuickGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IUndirectedGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IConnectedComponentAlgorithm{`0,`1,QuickGraph.IUndirectedGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.ComponentCountGet">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.get_ComponentCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.ComponentsGet">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.get_Components()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.ConstructorIAlgorithmComponentIUndirectedGraphOfT0T1IDictionaryOfT0Int32">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.ConnectedComponentsAlgorithm`2(IAlgorithmComponent host, IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,Int32&gt; components)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.ConstructorIUndirectedGraphOfT0T1">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.ConnectedComponentsAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; g)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.ConstructorIUndirectedGraphOfT0T1IDictionaryOfT0Int32">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.ConnectedComponentsAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,Int32&gt; components)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.DiscoverVertexT0">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.DiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.InternalCompute">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.StartVertexT0">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.StartVertex(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.AllInstances.ComponentCountGet">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.get_ComponentCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.AllInstances.ComponentsGet">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.get_Components()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.AllInstances.DiscoverVertexT0">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.DiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimConnectedComponentsAlgorithm`2.AllInstances.StartVertexT0">
            <summary>Sets the shim of ConnectedComponentsAlgorithm`2.StartVertex(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.#ctor(QuickGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IMutableVertexAndEdgeSet{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.ComponentCountGet">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.get_ComponentCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.ConstructorIAlgorithmComponentIMutableVertexAndEdgeSetOfT0T1">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.IncrementalConnectedComponentsAlgorithm`2(IAlgorithmComponent host, IMutableVertexAndEdgeSet`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.ConstructorIMutableVertexAndEdgeSetOfT0T1">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.IncrementalConnectedComponentsAlgorithm`2(IMutableVertexAndEdgeSet`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.GetComponents">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.GetComponents()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.InternalCompute">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.VisitedGraph_EdgeAddedT1">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.VisitedGraph_EdgeAdded(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.VisitedGraph_EdgeRemovedT1">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.VisitedGraph_EdgeRemoved(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.VisitedGraph_VertexAddedT0">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.VisitedGraph_VertexAdded(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.VisitedGraph_VertexRemovedT0">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.VisitedGraph_VertexRemoved(!0 e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.AllInstances.ComponentCountGet">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.get_ComponentCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.AllInstances.GetComponents">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.GetComponents()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.AllInstances.VisitedGraph_EdgeAddedT1">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.VisitedGraph_EdgeAdded(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.AllInstances.VisitedGraph_EdgeRemovedT1">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.VisitedGraph_EdgeRemoved(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.AllInstances.VisitedGraph_VertexAddedT0">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.VisitedGraph_VertexAdded(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimIncrementalConnectedComponentsAlgorithm`2.AllInstances.VisitedGraph_VertexRemovedT0">
            <summary>Sets the shim of IncrementalConnectedComponentsAlgorithm`2.VisitedGraph_VertexRemoved(!0 e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.#ctor(QuickGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IConnectedComponentAlgorithm{`0,`1,QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.ComponentCountGet">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.get_ComponentCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.ComponentsGet">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.get_Components()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1IDictionaryOfT0Int32">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.StronglyConnectedComponentsAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; g, IDictionary`2&lt;!0,Int32&gt; components)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.ConstructorIVertexListGraphOfT0T1">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.StronglyConnectedComponentsAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; g)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.ConstructorIVertexListGraphOfT0T1IDictionaryOfT0Int32">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.StronglyConnectedComponentsAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; g, IDictionary`2&lt;!0,Int32&gt; components)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.DiscoverTimesGet">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.get_DiscoverTimes()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.DiscoverVertexT0">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.DiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.FinishVertexT0">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.FinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.InternalCompute">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.MinDiscoverTimeT0T0">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.MinDiscoverTime(!0 u, !0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.RootsGet">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.get_Roots()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.AllInstances.ComponentCountGet">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.get_ComponentCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.AllInstances.ComponentsGet">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.get_Components()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.AllInstances.DiscoverTimesGet">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.get_DiscoverTimes()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.AllInstances.DiscoverVertexT0">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.DiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.AllInstances.FinishVertexT0">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.FinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.AllInstances.MinDiscoverTimeT0T0">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.MinDiscoverTime(!0 u, !0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimStronglyConnectedComponentsAlgorithm`2.AllInstances.RootsGet">
            <summary>Sets the shim of StronglyConnectedComponentsAlgorithm`2.get_Roots()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.#ctor(QuickGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.IConnectedComponentAlgorithm{`0,`1,QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.ComponentCountGet">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.get_ComponentCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.ComponentsGet">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.get_Components()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1IDictionaryOfT0Int32">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.WeaklyConnectedComponentsAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,Int32&gt; components)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.ConstructorIVertexListGraphOfT0T1">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.WeaklyConnectedComponentsAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.ConstructorIVertexListGraphOfT0T1IDictionaryOfT0Int32">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.WeaklyConnectedComponentsAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,Int32&gt; components)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.GetComponentEquivalenceInt32">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.GetComponentEquivalence(Int32 component)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.Initialize">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.InternalCompute">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.dfs_ForwardOrCrossEdgeT1">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.dfs_ForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.dfs_StartVertexT0">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.dfs_StartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.dfs_TreeEdgeT1">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.dfs_TreeEdge(!1 e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.AllInstances.ComponentCountGet">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.get_ComponentCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.AllInstances.ComponentsGet">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.get_Components()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.AllInstances.GetComponentEquivalenceInt32">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.GetComponentEquivalence(Int32 component)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.AllInstances.dfs_ForwardOrCrossEdgeT1">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.dfs_ForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.AllInstances.dfs_StartVertexT0">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.dfs_StartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ConnectedComponents.Fakes.ShimWeaklyConnectedComponentsAlgorithm`2.AllInstances.dfs_TreeEdgeT1">
            <summary>Sets the shim of WeaklyConnectedComponentsAlgorithm`2.dfs_TreeEdge(!1 e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1">
            <summary>Shim type of QuickGraph.Algorithms.AlgorithmBase`1</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.#ctor(QuickGraph.Algorithms.AlgorithmBase{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.Bind(QuickGraph.Algorithms.IAlgorithm{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.GetServiceOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets the shim of AlgorithmBase`1.GetService()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.TryGetServiceOf1M0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``0,System.Boolean})">
            <summary>Sets the shim of AlgorithmBase`1.TryGetService(!!0&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.Abort">
            <summary>Sets the shim of AlgorithmBase`1.Abort()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AbortedAddEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.add_Aborted(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AbortedRemoveEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.remove_Aborted(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.BeginComputation">
            <summary>Sets the shim of AlgorithmBase`1.BeginComputation()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.Clean">
            <summary>Sets the shim of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.Compute">
            <summary>Sets the shim of AlgorithmBase`1.Compute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.ConstructorIAlgorithmComponentT0">
            <summary>Sets the shim of AlgorithmBase`1.AlgorithmBase`1(IAlgorithmComponent host, !0 visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.ConstructorT0">
            <summary>Sets the shim of AlgorithmBase`1.AlgorithmBase`1(!0 visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.EndComputation">
            <summary>Sets the shim of AlgorithmBase`1.EndComputation()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.FinishedAddEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.add_Finished(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.FinishedRemoveEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.remove_Finished(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.Initialize">
            <summary>Sets the shim of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.OnAbortedEventArgs">
            <summary>Sets the shim of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.OnFinishedEventArgs">
            <summary>Sets the shim of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.OnStartedEventArgs">
            <summary>Sets the shim of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.OnStateChangedEventArgs">
            <summary>Sets the shim of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.ServicesGet">
            <summary>Sets the shim of AlgorithmBase`1.get_Services()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.StartedAddEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.add_Started(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.StartedRemoveEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.remove_Started(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.StateChangedAddEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.add_StateChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.StateChangedRemoveEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.remove_StateChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.StateGet">
            <summary>Sets the shim of AlgorithmBase`1.get_State()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.SyncRootGet">
            <summary>Sets the shim of AlgorithmBase`1.get_SyncRoot()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.TryGetServiceTypeObjectOut">
            <summary>Sets the shim of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.VisitedGraphGet">
            <summary>Sets the shim of AlgorithmBase`1.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.GetServiceOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.Algorithms.AlgorithmBase{`0},``0})">
            <summary>Sets the shim of AlgorithmBase`1.GetService()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.TryGetServiceOf1M0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{QuickGraph.Algorithms.AlgorithmBase{`0},``0,System.Boolean})">
            <summary>Sets the shim of AlgorithmBase`1.TryGetService(!!0&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.Abort">
            <summary>Sets the shim of AlgorithmBase`1.Abort()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.AbortedAddEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.add_Aborted(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.AbortedRemoveEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.remove_Aborted(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.BeginComputation">
            <summary>Sets the shim of AlgorithmBase`1.BeginComputation()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.Clean">
            <summary>Sets the shim of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.Compute">
            <summary>Sets the shim of AlgorithmBase`1.Compute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.EndComputation">
            <summary>Sets the shim of AlgorithmBase`1.EndComputation()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.FinishedAddEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.add_Finished(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.FinishedRemoveEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.remove_Finished(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.Initialize">
            <summary>Sets the shim of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.OnAbortedEventArgs">
            <summary>Sets the shim of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.OnFinishedEventArgs">
            <summary>Sets the shim of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.OnStartedEventArgs">
            <summary>Sets the shim of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.OnStateChangedEventArgs">
            <summary>Sets the shim of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.ServicesGet">
            <summary>Sets the shim of AlgorithmBase`1.get_Services()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.StartedAddEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.add_Started(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.StartedRemoveEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.remove_Started(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.StateChangedAddEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.add_StateChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.StateChangedRemoveEventHandler">
            <summary>Sets the shim of AlgorithmBase`1.remove_StateChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.StateGet">
            <summary>Sets the shim of AlgorithmBase`1.get_State()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.SyncRootGet">
            <summary>Sets the shim of AlgorithmBase`1.get_SyncRoot()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.TryGetServiceTypeObjectOut">
            <summary>Sets the shim of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmBase`1.AllInstances.VisitedGraphGet">
            <summary>Sets the shim of AlgorithmBase`1.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions">
            <summary>Shim type of QuickGraph.Algorithms.AlgorithmExtensions</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.CloneOf2IVertexAndEdgeListGraphOfM0M1FuncOfM0M0FuncOfM1M0M0M1IMutableVertexAndEdgeSetOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{QuickGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``0,``0},System.Func{``1,``0,``0,``1},QuickGraph.IMutableVertexAndEdgeSet{``0,``1}})">
            <summary>Sets the shim of AlgorithmExtensions.Clone(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; g, Func`2&lt;!!0,!!0&gt; vertexCloner, Func`4&lt;!!1,!!0,!!0,!!1&gt; edgeCloner, IMutableVertexAndEdgeSet`2&lt;!!0,!!1&gt; clone)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.ComputeDisjointSetOf2IUndirectedGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IUndirectedGraph{``0,``1},QuickGraph.Collections.IDisjointSet{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.ComputeDisjointSet(IUndirectedGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.ComputePredecessorCostOf2IDictionaryOfM0M1IDictionaryOfM1DoubleM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``1,System.Double},``0,System.Double})">
            <summary>Sets the shim of AlgorithmExtensions.ComputePredecessorCost(IDictionary`2&lt;!!0,!!1&gt; predecessors, IDictionary`2&lt;!!1,Double&gt; edgeCosts, !!0 target)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.CondensateEdgesOf2IBidirectionalGraphOfM0M1VertexPredicateOfM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IBidirectionalGraph{``0,``1},QuickGraph.VertexPredicate{``0},QuickGraph.IMutableBidirectionalGraph{``0,QuickGraph.Algorithms.Condensation.MergedEdge{``0,``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.CondensateEdges(IBidirectionalGraph`2&lt;!!0,!!1&gt; visitedGraph, VertexPredicate`1&lt;!!0&gt; vertexPredicate)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.CondensateStronglyConnectedOf3IVertexAndEdgeListGraphOfM0M1``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},QuickGraph.IMutableBidirectionalGraph{``2,QuickGraph.Algorithms.Condensation.CondensedEdge{``0,``1,``2}}})">
            <summary>Sets the shim of AlgorithmExtensions.CondensateStronglyConnected(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; g)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.CondensateWeaklyConnectedOf3IVertexAndEdgeListGraphOfM0M1``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},QuickGraph.IMutableBidirectionalGraph{``2,QuickGraph.Algorithms.Condensation.CondensedEdge{``0,``1,``2}}})">
            <summary>Sets the shim of AlgorithmExtensions.CondensateWeaklyConnected(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; g)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.ConnectedComponentsOf2IUndirectedGraphOfM0M1IDictionaryOfM0Int32``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IUndirectedGraph{``0,``1},System.Collections.Generic.IDictionary{``0,System.Int32},System.Int32})">
            <summary>Sets the shim of AlgorithmExtensions.ConnectedComponents(IUndirectedGraph`2&lt;!!0,!!1&gt; g, IDictionary`2&lt;!!0,Int32&gt; components)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.GetEdgeIdentityOf2IEdgeSetOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IEdgeSet{``0,``1},QuickGraph.EdgeIdentity{``0,``1}})">
            <summary>Sets the shim of AlgorithmExtensions.GetEdgeIdentity(IEdgeSet`2&lt;!!0,!!1&gt; graph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.GetIndexerOf2DictionaryOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.Dictionary{``0,``1},System.Func{``0,``1}})">
            <summary>Sets the shim of AlgorithmExtensions.GetIndexer(Dictionary`2&lt;!!0,!!1&gt; dictionary)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.GetVertexIdentityOf1IVertexSetOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexSet{``0},QuickGraph.VertexIdentity{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.GetVertexIdentity(IVertexSet`1&lt;!!0&gt; graph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.IncrementalConnectedComponentsOf2IMutableVertexAndEdgeSetOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IMutableVertexAndEdgeSet{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{System.Int32,System.Collections.Generic.IDictionary{``0,System.Int32}}}})">
            <summary>Sets the shim of AlgorithmExtensions.IncrementalConnectedComponents(IMutableVertexAndEdgeSet`2&lt;!!0,!!1&gt; g)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.IsDirectedAcyclicGraphOf2IVertexListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},System.Boolean})">
            <summary>Sets the shim of AlgorithmExtensions.IsDirectedAcyclicGraph(IVertexListGraph`2&lt;!!0,!!1&gt; g)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.IsolatedVerticesIteratorOf2IBidirectionalGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IBidirectionalGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.IsolatedVerticesIterator(IBidirectionalGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.IsolatedVerticesOf2IBidirectionalGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IBidirectionalGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.IsolatedVertices(IBidirectionalGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.MaximumFlowEdmondsKarpOf2IMutableVertexAndEdgeListGraphOfM0M1FuncOfM1DoubleM0M0TryFuncOfM0M1OutEdgeFactoryOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.Delegates.QuickGraphDelegates.Out4Func7{QuickGraph.IMutableVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},``0,``0,QuickGraph.TryFunc{``0,``1},QuickGraph.EdgeFactory{``0,``1},System.Double})">
            <summary>Sets the shim of AlgorithmExtensions.MaximumFlowEdmondsKarp(IMutableVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; visitedGraph, Func`2&lt;!!1,Double&gt; edgeCapacities, !!0 source, !!0 sink, TryFunc`2&lt;!!0,!!1&gt;&amp; flowPredecessors, EdgeFactory`2&lt;!!0,!!1&gt; edgeFactory)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.MinimumSpanningTreeKruskalOf2IUndirectedGraphOfM0M1FuncOfM1Double``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IUndirectedGraph{``0,``1},System.Func{``1,System.Double},System.Collections.Generic.IEnumerable{``1}})">
            <summary>Sets the shim of AlgorithmExtensions.MinimumSpanningTreeKruskal(IUndirectedGraph`2&lt;!!0,!!1&gt; visitedGraph, Func`2&lt;!!1,Double&gt; weights)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.MinimumSpanningTreePrimOf2IUndirectedGraphOfM0M1FuncOfM1Double``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IUndirectedGraph{``0,``1},System.Func{``1,System.Double},System.Collections.Generic.IEnumerable{``1}})">
            <summary>Sets the shim of AlgorithmExtensions.MinimumSpanningTreePrim(IUndirectedGraph`2&lt;!!0,!!1&gt; visitedGraph, Func`2&lt;!!1,Double&gt; weights)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.OddVerticesOf2IVertexAndEdgeListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},System.Collections.Generic.List{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.OddVertices(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; g)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.OfflineLeastCommonAncestorTarjanOf2IVertexListGraphOfM0M1M0IEnumerableOfSEquatableEdgeOfM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},``0,System.Collections.Generic.IEnumerable{QuickGraph.SEquatableEdge{``0}},QuickGraph.TryFunc{QuickGraph.SEquatableEdge{``0},``0}})">
            <summary>Sets the shim of AlgorithmExtensions.OfflineLeastCommonAncestorTarjan(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph, !!0 root, IEnumerable`1&lt;SEquatableEdge`1&lt;!!0&gt;&gt; pairs)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.RankedShortestPathHoffmanPavleyOf2IBidirectionalGraphOfM0M1FuncOfM1DoubleM0M0Int32``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IBidirectionalGraph{``0,``1},System.Func{``1,System.Double},``0,``0,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.RankedShortestPathHoffmanPavley(IBidirectionalGraph`2&lt;!!0,!!1&gt; visitedGraph, Func`2&lt;!!1,Double&gt; edgeWeights, !!0 source, !!0 target, Int32 pathCount)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.RootsIteratorOf2IBidirectionalGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IBidirectionalGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.RootsIterator(IBidirectionalGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.RootsIteratorOf2IVertexListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.RootsIterator(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.RootsOf2IBidirectionalGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IBidirectionalGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.Roots(IBidirectionalGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.RootsOf2IVertexListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.Roots(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.ShortestPathsAStarOf2IVertexAndEdgeListGraphOfM0M1FuncOfM1DoubleFuncOfM0DoubleM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},System.Func{``0,System.Double},``0,QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.ShortestPathsAStar(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; visitedGraph, Func`2&lt;!!1,Double&gt; edgeWeights, Func`2&lt;!!0,Double&gt; costHeuristic, !!0 source)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.ShortestPathsBellmanFordOf2IVertexAndEdgeListGraphOfM0M1FuncOfM1DoubleM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},``0,QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.ShortestPathsBellmanFord(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; visitedGraph, Func`2&lt;!!1,Double&gt; edgeWeights, !!0 source)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.ShortestPathsDagOf2IVertexAndEdgeListGraphOfM0M1FuncOfM1DoubleM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},``0,QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.ShortestPathsDag(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; visitedGraph, Func`2&lt;!!1,Double&gt; edgeWeights, !!0 source)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.ShortestPathsDijkstraOf2IUndirectedGraphOfM0M1FuncOfM1DoubleM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IUndirectedGraph{``0,``1},System.Func{``1,System.Double},``0,QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.ShortestPathsDijkstra(IUndirectedGraph`2&lt;!!0,!!1&gt; visitedGraph, Func`2&lt;!!1,Double&gt; edgeWeights, !!0 source)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.ShortestPathsDijkstraOf2IVertexAndEdgeListGraphOfM0M1FuncOfM1DoubleM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},``0,QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.ShortestPathsDijkstra(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; visitedGraph, Func`2&lt;!!1,Double&gt; edgeWeights, !!0 source)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.SinksIteratorOf2IVertexListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.SinksIterator(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.SinksOf2IVertexListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.Sinks(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.SourceFirstTopologicalSortOf2IVertexAndEdgeListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.SourceFirstTopologicalSort(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.SourceFirstTopologicalSortOf2IVertexAndEdgeListGraphOfM0M1IListOfM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{QuickGraph.IVertexAndEdgeListGraph{``0,``1},System.Collections.Generic.IList{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.SourceFirstTopologicalSort(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; visitedGraph, IList`1&lt;!!0&gt; vertices)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.StronglyConnectedComponentsOf2IVertexListGraphOfM0M1IDictionaryOfM0Int32Out``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IDictionary{``0,System.Int32},System.Int32})">
            <summary>Sets the shim of AlgorithmExtensions.StronglyConnectedComponents(IVertexListGraph`2&lt;!!0,!!1&gt; g, IDictionary`2&lt;!!0,Int32&gt;&amp; components)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.TopologicalSortOf2IUndirectedGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IUndirectedGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.TopologicalSort(IUndirectedGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.TopologicalSortOf2IUndirectedGraphOfM0M1IListOfM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{QuickGraph.IUndirectedGraph{``0,``1},System.Collections.Generic.IList{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.TopologicalSort(IUndirectedGraph`2&lt;!!0,!!1&gt; visitedGraph, IList`1&lt;!!0&gt; vertices)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.TopologicalSortOf2IVertexListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.TopologicalSort(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.TopologicalSortOf2IVertexListGraphOfM0M1IListOfM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IList{``0}})">
            <summary>Sets the shim of AlgorithmExtensions.TopologicalSort(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph, IList`1&lt;!!0&gt; vertices)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.TreeBreadthFirstSearchOf2IVertexListGraphOfM0M1M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},``0,QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.TreeBreadthFirstSearch(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph, !!0 root)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.TreeCyclePoppingRandomOf2IVertexListGraphOfM0M1M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},``0,QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.TreeCyclePoppingRandom(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph, !!0 root)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.TreeCyclePoppingRandomOf2IVertexListGraphOfM0M1M0IMarkovEdgeChainOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},``0,QuickGraph.Algorithms.RandomWalks.IMarkovEdgeChain{``0,``1},QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.TreeCyclePoppingRandom(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph, !!0 root, IMarkovEdgeChain`2&lt;!!0,!!1&gt; edgeChain)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.TreeDepthFirstSearchOf2IVertexListGraphOfM0M1M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},``0,QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>Sets the shim of AlgorithmExtensions.TreeDepthFirstSearch(IVertexListGraph`2&lt;!!0,!!1&gt; visitedGraph, !!0 root)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.WeaklyConnectedComponentsOf2IVertexListGraphOfM0M1IDictionaryOfM0Int32``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IDictionary{``0,System.Int32},System.Int32})">
            <summary>Sets the shim of AlgorithmExtensions.WeaklyConnectedComponents(IVertexListGraph`2&lt;!!0,!!1&gt; g, IDictionary`2&lt;!!0,Int32&gt; components)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions._GetVertexIdentityb__3Of1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String})">
            <summary>Sets the shim of AlgorithmExtensions.&lt;GetVertexIdentity&gt;b__3(!!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimAlgorithmExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.CentralityApproximationAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.#ctor(QuickGraph.Algorithms.CentralityApproximationAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.ConstructorIVertexListGraphOfT0T1FuncOfT1Double">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.CentralityApproximationAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; distances)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.DistancesGet">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.get_Distances()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.Initialize">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.InternalCompute">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.MaxIterationCountGet">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.get_MaxIterationCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.MaxIterationCountSetInt32">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.set_MaxIterationCount(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.RandGet">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.get_Rand()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.RandSetRandom">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.set_Rand(Random value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.AllInstances.DistancesGet">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.get_Distances()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.AllInstances.MaxIterationCountGet">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.get_MaxIterationCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.AllInstances.MaxIterationCountSetInt32">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.set_MaxIterationCount(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.AllInstances.RandGet">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.get_Rand()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimCentralityApproximationAlgorithm`2.AllInstances.RandSetRandom">
            <summary>Sets the shim of CentralityApproximationAlgorithm`2.set_Rand(Random value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimDistanceRelaxers">
            <summary>Shim type of QuickGraph.Algorithms.DistanceRelaxers</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimDistanceRelaxers.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimDistanceRelaxers.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimDistanceRelaxers.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimDistanceRelaxers.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimDistanceRelaxers.StaticConstructor">
            <summary>Sets the shim of DistanceRelaxers.DistanceRelaxers()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.EulerianTrailAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.#ctor(QuickGraph.Algorithms.EulerianTrailAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IMutableVertexAndEdgeListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AddTemporaryEdgesEdgeFactoryOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.AddTemporaryEdges(EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.CircuitAugmentation">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.CircuitAugmentation()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.CircuitEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.add_CircuitEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.CircuitEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.remove_CircuitEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.CircuitGet">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.get_Circuit()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.ComputeEulerianPathCountIVertexAndEdgeListGraphOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.ComputeEulerianPathCount(IVertexAndEdgeListGraph`2&lt;!0,!1&gt; g)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.ConstructorIAlgorithmComponentIMutableVertexAndEdgeListGraphOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.EulerianTrailAlgorithm`2(IAlgorithmComponent host, IMutableVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.ConstructorIMutableVertexAndEdgeListGraphOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.EulerianTrailAlgorithm`2(IMutableVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.InternalCompute">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.NotInCircuitT1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.NotInCircuit(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.OnCircuitEdgeT1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.OnCircuitEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.OnVisitEdgeT1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.OnVisitEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.RemoveTemporaryEdges">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.RemoveTemporaryEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.SearchT0">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.Search(!0 u)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.SelectOutEdgesNotInCircuitT0">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.SelectOutEdgesNotInCircuit(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.SelectSingleOutEdgeNotInCircuitT0">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.SelectSingleOutEdgeNotInCircuit(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.Trails">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.Trails()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.TrailsT0">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.Trails(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.Visit">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.Visit()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.VisitEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.add_VisitEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.VisitEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.remove_VisitEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.AddTemporaryEdgesEdgeFactoryOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.AddTemporaryEdges(EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.CircuitAugmentation">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.CircuitAugmentation()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.CircuitEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.add_CircuitEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.CircuitEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.remove_CircuitEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.CircuitGet">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.get_Circuit()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.NotInCircuitT1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.NotInCircuit(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.OnCircuitEdgeT1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.OnCircuitEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.OnVisitEdgeT1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.OnVisitEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.RemoveTemporaryEdges">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.RemoveTemporaryEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.SearchT0">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.Search(!0 u)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.SelectOutEdgesNotInCircuitT0">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.SelectOutEdgesNotInCircuit(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.SelectSingleOutEdgeNotInCircuitT0">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.SelectSingleOutEdgeNotInCircuit(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.Trails">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.Trails()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.TrailsT0">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.Trails(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.Visit">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.Visit()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.VisitEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.add_VisitEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimEulerianTrailAlgorithm`2.AllInstances.VisitEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EulerianTrailAlgorithm`2.remove_VisitEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.#ctor(QuickGraph.Algorithms.MaximumBipartiteMatchingAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IMutableVertexAndEdgeListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.ConstructorIMutableVertexAndEdgeListGraphOfT0T1IEnumerableOfT0IEnumerableOfT0VertexFactoryOfT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.MaximumBipartiteMatchingAlgorithm`2(IMutableVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph, IEnumerable`1&lt;!0&gt; vertexSetA, IEnumerable`1&lt;!0&gt; vertexSetB, VertexFactory`1&lt;!0&gt; vertexFactory, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.EdgeFactoryGet">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.get_EdgeFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.EdgeFactorySetEdgeFactoryOfT0T1">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.set_EdgeFactory(EdgeFactory`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.InternalCompute">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.MatchedEdgesGet">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.get_MatchedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.MatchedEdgesSetICollectionOfT1">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.set_MatchedEdges(ICollection`1&lt;!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.VertexFactoryGet">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.get_VertexFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.VertexFactorySetVertexFactoryOfT0">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.set_VertexFactory(VertexFactory`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.VertexSetAGet">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.get_VertexSetA()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.VertexSetASetIEnumerableOfT0">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.set_VertexSetA(IEnumerable`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.VertexSetBGet">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.get_VertexSetB()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.VertexSetBSetIEnumerableOfT0">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.set_VertexSetB(IEnumerable`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2._InternalComputeb__0T1">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.&lt;InternalCompute&gt;b__0(!1 e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.EdgeFactoryGet">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.get_EdgeFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.EdgeFactorySetEdgeFactoryOfT0T1">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.set_EdgeFactory(EdgeFactory`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.MatchedEdgesGet">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.get_MatchedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.MatchedEdgesSetICollectionOfT1">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.set_MatchedEdges(ICollection`1&lt;!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.VertexFactoryGet">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.get_VertexFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.VertexFactorySetVertexFactoryOfT0">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.set_VertexFactory(VertexFactory`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.VertexSetAGet">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.get_VertexSetA()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.VertexSetASetIEnumerableOfT0">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.set_VertexSetA(IEnumerable`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.VertexSetBGet">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.get_VertexSetB()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimMaximumBipartiteMatchingAlgorithm`2.AllInstances.VertexSetBSetIEnumerableOfT0">
            <summary>Sets the shim of MaximumBipartiteMatchingAlgorithm`2.set_VertexSetB(IEnumerable`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory">
            <summary>Shim type of QuickGraph.Algorithms.RandomGraphFactory</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory.CreateOf2IMutableUndirectedGraphOfM0M1VertexFactoryOfM0EdgeFactoryOfM0M1RandomInt32Int32Boolean``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{QuickGraph.IMutableUndirectedGraph{``0,``1},QuickGraph.VertexFactory{``0},QuickGraph.EdgeFactory{``0,``1},System.Random,System.Int32,System.Int32,System.Boolean})">
            <summary>Sets the shim of RandomGraphFactory.Create(IMutableUndirectedGraph`2&lt;!!0,!!1&gt; g, VertexFactory`1&lt;!!0&gt; vertexFactory, EdgeFactory`2&lt;!!0,!!1&gt; edgeFactory, Random rnd, Int32 vertexCount, Int32 edgeCount, Boolean selfEdges)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory.CreateOf2IMutableVertexAndEdgeListGraphOfM0M1VertexFactoryOfM0EdgeFactoryOfM0M1RandomInt32Int32Boolean``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{QuickGraph.IMutableVertexAndEdgeListGraph{``0,``1},QuickGraph.VertexFactory{``0},QuickGraph.EdgeFactory{``0,``1},System.Random,System.Int32,System.Int32,System.Boolean})">
            <summary>Sets the shim of RandomGraphFactory.Create(IMutableVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; g, VertexFactory`1&lt;!!0&gt; vertexFactory, EdgeFactory`2&lt;!!0,!!1&gt; edgeFactory, Random rnd, Int32 vertexCount, Int32 edgeCount, Boolean selfEdges)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory.GetEdgeOf2IEdgeSetOfM0M1Random``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IEdgeSet{``0,``1},System.Random,``1})">
            <summary>Sets the shim of RandomGraphFactory.GetEdge(IEdgeSet`2&lt;!!0,!!1&gt; g, Random rnd)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory.GetEdgeOf2IEnumerableOfM1Int32Random``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},System.Int32,System.Random,``1})">
            <summary>Sets the shim of RandomGraphFactory.GetEdge(IEnumerable`1&lt;!!1&gt; edges, Int32 count, Random rnd)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory.GetVertexOf2IEnumerableOfM0Int32Random``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random,``0})">
            <summary>Sets the shim of RandomGraphFactory.GetVertex(IEnumerable`1&lt;!!0&gt; vertices, Int32 count, Random rnd)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory.GetVertexOf2IVertexListGraphOfM0M1Random``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexListGraph{``0,``1},System.Random,``0})">
            <summary>Sets the shim of RandomGraphFactory.GetVertex(IVertexListGraph`2&lt;!!0,!!1&gt; g, Random rnd)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRandomGraphFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2">
            <summary>Shim type of QuickGraph.Algorithms.RootedAlgorithmBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.#ctor(QuickGraph.Algorithms.RootedAlgorithmBase{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.Bind(QuickGraph.Algorithms.IAlgorithm{`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.ClearRootVertex">
            <summary>Sets the shim of RootedAlgorithmBase`2.ClearRootVertex()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.ComputeT0">
            <summary>Sets the shim of RootedAlgorithmBase`2.Compute(!0 rootVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.ConstructorIAlgorithmComponentT1">
            <summary>Sets the shim of RootedAlgorithmBase`2.RootedAlgorithmBase`2(IAlgorithmComponent host, !1 visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.OnRootVertexChangedEventArgs">
            <summary>Sets the shim of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.RootVertexChangedAddEventHandler">
            <summary>Sets the shim of RootedAlgorithmBase`2.add_RootVertexChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.RootVertexChangedRemoveEventHandler">
            <summary>Sets the shim of RootedAlgorithmBase`2.remove_RootVertexChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.SetRootVertexT0">
            <summary>Sets the shim of RootedAlgorithmBase`2.SetRootVertex(!0 rootVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.TryGetRootVertexT0Out">
            <summary>Sets the shim of RootedAlgorithmBase`2.TryGetRootVertex(!0&amp; rootVertex)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.AllInstances.ClearRootVertex">
            <summary>Sets the shim of RootedAlgorithmBase`2.ClearRootVertex()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.AllInstances.ComputeT0">
            <summary>Sets the shim of RootedAlgorithmBase`2.Compute(!0 rootVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.AllInstances.OnRootVertexChangedEventArgs">
            <summary>Sets the shim of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.AllInstances.RootVertexChangedAddEventHandler">
            <summary>Sets the shim of RootedAlgorithmBase`2.add_RootVertexChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.AllInstances.RootVertexChangedRemoveEventHandler">
            <summary>Sets the shim of RootedAlgorithmBase`2.remove_RootVertexChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.AllInstances.SetRootVertexT0">
            <summary>Sets the shim of RootedAlgorithmBase`2.SetRootVertex(!0 rootVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedAlgorithmBase`2.AllInstances.TryGetRootVertexT0Out">
            <summary>Sets the shim of RootedAlgorithmBase`2.TryGetRootVertex(!0&amp; rootVertex)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2">
            <summary>Shim type of QuickGraph.Algorithms.RootedSearchAlgorithmBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.#ctor(QuickGraph.Algorithms.RootedSearchAlgorithmBase{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.Bind(QuickGraph.Algorithms.IAlgorithm{`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.ClearGoalVertex">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.ClearGoalVertex()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.ComputeT0T0">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.Compute(!0 root, !0 goal)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.ConstructorIAlgorithmComponentT1">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.RootedSearchAlgorithmBase`2(IAlgorithmComponent host, !1 visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.GoalReachedAddEventHandler">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.add_GoalReached(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.GoalReachedRemoveEventHandler">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.remove_GoalReached(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.GoalVertexChangedAddEventHandler">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.add_GoalVertexChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.GoalVertexChangedRemoveEventHandler">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.remove_GoalVertexChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.OnGoalReached">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.OnGoalReached()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.OnGoalVertexChangedEventArgs">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.OnGoalVertexChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.SetGoalVertexT0">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.SetGoalVertex(!0 goalVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.TryGetGoalVertexT0Out">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.TryGetGoalVertex(!0&amp; goalVertex)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances.ClearGoalVertex">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.ClearGoalVertex()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances.ComputeT0T0">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.Compute(!0 root, !0 goal)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances.GoalReachedAddEventHandler">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.add_GoalReached(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances.GoalReachedRemoveEventHandler">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.remove_GoalReached(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances.GoalVertexChangedAddEventHandler">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.add_GoalVertexChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances.GoalVertexChangedRemoveEventHandler">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.remove_GoalVertexChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances.OnGoalReached">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.OnGoalReached()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances.OnGoalVertexChangedEventArgs">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.OnGoalVertexChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances.SetGoalVertexT0">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.SetGoalVertex(!0 goalVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimRootedSearchAlgorithmBase`2.AllInstances.TryGetGoalVertexT0Out">
            <summary>Sets the shim of RootedSearchAlgorithmBase`2.TryGetGoalVertex(!0&amp; goalVertex)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.#ctor(QuickGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.AncestorsGet">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.get_Ancestors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.ComputeT0IEnumerableOfSEquatableEdgeOfT0">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.Compute(!0 root, IEnumerable`1&lt;SEquatableEdge`1&lt;!0&gt;&gt; pairs)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.TarjanOfflineLeastCommonAncestorAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.ConstructorIVertexListGraphOfT0T1">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.TarjanOfflineLeastCommonAncestorAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.Initialize">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.InternalCompute">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.SetVertexPairsIEnumerableOfSEquatableEdgeOfT0">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.SetVertexPairs(IEnumerable`1&lt;SEquatableEdge`1&lt;!0&gt;&gt; pairs)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.TryGetVertexPairsIEnumerableOfSEquatableEdgeOfT0Out">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.TryGetVertexPairs(IEnumerable`1&lt;SEquatableEdge`1&lt;!0&gt;&gt;&amp; pairs)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.AllInstances.AncestorsGet">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.get_Ancestors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.AllInstances.ComputeT0IEnumerableOfSEquatableEdgeOfT0">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.Compute(!0 root, IEnumerable`1&lt;SEquatableEdge`1&lt;!0&gt;&gt; pairs)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.AllInstances.SetVertexPairsIEnumerableOfSEquatableEdgeOfT0">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.SetVertexPairs(IEnumerable`1&lt;SEquatableEdge`1&lt;!0&gt;&gt; pairs)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.ShimTarjanOfflineLeastCommonAncestorAlgorithm`2.AllInstances.TryGetVertexPairsIEnumerableOfSEquatableEdgeOfT0Out">
            <summary>Sets the shim of TarjanOfflineLeastCommonAncestorAlgorithm`2.TryGetVertexPairs(IEnumerable`1&lt;SEquatableEdge`1&lt;!0&gt;&gt;&amp; pairs)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1">
            <summary>Stub type of QuickGraph.Algorithms.AlgorithmBase`1</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.#ctor(`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.Clean">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.Clean01">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.Initialize">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.Initialize01">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.InitializeStub">
            <summary>Initializes a new instance of type StubAlgorithmBase</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.InternalCompute">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.InternalCompute01">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.OnAborted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.OnAbortedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.OnFinished(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.OnFinishedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.OnStarted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.OnStartedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.OnStateChanged(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.OnStateChangedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.TryGetService(System.Type,System.Object@)">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.TryGetServiceTypeObjectOut">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubAlgorithmBase`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1">
            <summary>Stub type of QuickGraph.Algorithms.IAlgorithm`1</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.#ctor">
            <summary>Initializes a new instance of type StubIAlgorithm</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.Abort">
            <summary>Sets the stub of IComputation.Abort()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.Compute">
            <summary>Sets the stub of IComputation.Compute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.qg::QuickGraph#Algorithms#IComputation#Abort">
            <summary>Sets the stub of IComputation.Abort()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.qg::QuickGraph#Algorithms#IComputation#Compute">
            <summary>Sets the stub of IComputation.Compute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.StateGet">
            <summary>Sets the stub of IComputation.get_State()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.SyncRootGet">
            <summary>Sets the stub of IComputation.get_SyncRoot()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.VisitedGraphGet">
            <summary>Sets the stub of IAlgorithm`1.get_VisitedGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.qg::QuickGraph#Algorithms#IComputation#State">
            <summary>Sets the stub of IComputation.get_State()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.qg::QuickGraph#Algorithms#IComputation#SyncRoot">
            <summary>Sets the stub of IComputation.get_SyncRoot()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIAlgorithm`1.qg::QuickGraph#Algorithms#IAlgorithm{TGraph}#VisitedGraph">
            <summary>Sets the stub of IAlgorithm`1.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIComputation">
            <summary>Stub type of QuickGraph.Algorithms.IComputation</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIComputation.#ctor">
            <summary>Initializes a new instance of type StubIComputation</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIComputation.Abort">
            <summary>Sets the stub of IComputation.Abort()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIComputation.Compute">
            <summary>Sets the stub of IComputation.Compute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIComputation.qg::QuickGraph#Algorithms#IComputation#Abort">
            <summary>Sets the stub of IComputation.Abort()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIComputation.qg::QuickGraph#Algorithms#IComputation#Compute">
            <summary>Sets the stub of IComputation.Compute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIComputation.StateGet">
            <summary>Sets the stub of IComputation.get_State()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIComputation.SyncRootGet">
            <summary>Sets the stub of IComputation.get_SyncRoot()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIComputation.qg::QuickGraph#Algorithms#IComputation#State">
            <summary>Sets the stub of IComputation.get_State()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIComputation.qg::QuickGraph#Algorithms#IComputation#SyncRoot">
            <summary>Sets the stub of IComputation.get_SyncRoot()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3">
            <summary>Stub type of QuickGraph.Algorithms.IConnectedComponentAlgorithm`3</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.#ctor">
            <summary>Initializes a new instance of type StubIConnectedComponentAlgorithm</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.Abort">
            <summary>Sets the stub of IComputation.Abort()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.ComponentCountGet">
            <summary>Sets the stub of IConnectedComponentAlgorithm`3.get_ComponentCount()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.ComponentsGet">
            <summary>Sets the stub of IConnectedComponentAlgorithm`3.get_Components()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.Compute">
            <summary>Sets the stub of IComputation.Compute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.qg::QuickGraph#Algorithms#IComputation#Abort">
            <summary>Sets the stub of IComputation.Abort()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.qg::QuickGraph#Algorithms#IComputation#Compute">
            <summary>Sets the stub of IComputation.Compute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.StateGet">
            <summary>Sets the stub of IComputation.get_State()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.SyncRootGet">
            <summary>Sets the stub of IComputation.get_SyncRoot()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.VisitedGraphGet">
            <summary>Sets the stub of IAlgorithm`1.get_VisitedGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.qg::QuickGraph#Algorithms#IConnectedComponentAlgorithm{TVertex@TEdge@TGraph}#ComponentCount">
            <summary>Sets the stub of IConnectedComponentAlgorithm`3.get_ComponentCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.qg::QuickGraph#Algorithms#IConnectedComponentAlgorithm{TVertex@TEdge@TGraph}#Components">
            <summary>Sets the stub of IConnectedComponentAlgorithm`3.get_Components()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.qg::QuickGraph#Algorithms#IComputation#State">
            <summary>Sets the stub of IComputation.get_State()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.qg::QuickGraph#Algorithms#IComputation#SyncRoot">
            <summary>Sets the stub of IComputation.get_SyncRoot()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIConnectedComponentAlgorithm`3.qg::QuickGraph#Algorithms#IAlgorithm{TGraph}#VisitedGraph">
            <summary>Sets the stub of IAlgorithm`1.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIDistanceRecorderAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.IDistanceRecorderAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIDistanceRecorderAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubIDistanceRecorderAlgorithm</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIDistanceRelaxer">
            <summary>Stub type of QuickGraph.Algorithms.IDistanceRelaxer</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIDistanceRelaxer.#ctor">
            <summary>Initializes a new instance of type StubIDistanceRelaxer</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIDistanceRelaxer.CombineDoubleDouble">
            <summary>Sets the stub of IDistanceRelaxer.Combine(Double distance, Double weight)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIDistanceRelaxer.CompareDoubleDouble">
            <summary>Sets the stub of IComparer`1.Compare(!0 x, !0 y)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIDistanceRelaxer.InitialDistanceGet">
            <summary>Sets the stub of IDistanceRelaxer.get_InitialDistance()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIDistanceRelaxer.qg::QuickGraph#Algorithms#IDistanceRelaxer#Combine(System.Double,System.Double)">
            <summary>Sets the stub of IDistanceRelaxer.Combine(Double distance, Double weight)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIDistanceRelaxer.global::System#Collections#Generic#IComparer{System#Double}#Compare(System.Double,System.Double)">
            <summary>Sets the stub of IComparer`1.Compare(!0 x, !0 y)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIDistanceRelaxer.qg::QuickGraph#Algorithms#IDistanceRelaxer#InitialDistance">
            <summary>Sets the stub of IDistanceRelaxer.get_InitialDistance()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIEdgeColorizerAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.IEdgeColorizerAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIEdgeColorizerAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubIEdgeColorizerAlgorithm</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIEdgeColorizerAlgorithm`2.EdgeColorsGet">
            <summary>Sets the stub of IEdgeColorizerAlgorithm`2.get_EdgeColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubIEdgeColorizerAlgorithm`2.qg::QuickGraph#Algorithms#IEdgeColorizerAlgorithm{TVertex@TEdge}#EdgeColors">
            <summary>Sets the stub of IEdgeColorizerAlgorithm`2.get_EdgeColors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIEdgePredecessorRecorderAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.IEdgePredecessorRecorderAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIEdgePredecessorRecorderAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubIEdgePredecessorRecorderAlgorithm</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIEndPathEdgeRecorderAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.IEndPathEdgeRecorderAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIEndPathEdgeRecorderAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubIEndPathEdgeRecorderAlgorithm</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubITreeBuilderAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.ITreeBuilderAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubITreeBuilderAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubITreeBuilderAlgorithm</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIUndirectedTreeBuilderAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.IUndirectedTreeBuilderAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIUndirectedTreeBuilderAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubIUndirectedTreeBuilderAlgorithm</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIUndirectedVertexPredecessorRecorderAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.IUndirectedVertexPredecessorRecorderAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIUndirectedVertexPredecessorRecorderAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubIUndirectedVertexPredecessorRecorderAlgorithm</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIVertexColorizerAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.IVertexColorizerAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIVertexColorizerAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubIVertexColorizerAlgorithm</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubIVertexColorizerAlgorithm`2.GetVertexColorT0">
            <summary>Sets the stub of IVertexColorizerAlgorithm`2.GetVertexColor(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIVertexColorizerAlgorithm`2.qg::QuickGraph#Algorithms#IVertexColorizerAlgorithm{TVertex@TEdge}#GetVertexColor(`0)">
            <summary>Sets the stub of IVertexColorizerAlgorithm`2.GetVertexColor(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIVertexPredecessorRecorderAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.IVertexPredecessorRecorderAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIVertexPredecessorRecorderAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubIVertexPredecessorRecorderAlgorithm</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubIVertexTimeStamperAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.IVertexTimeStamperAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubIVertexTimeStamperAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubIVertexTimeStamperAlgorithm</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2">
            <summary>Stub type of QuickGraph.Algorithms.RootedAlgorithmBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,`1)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.Clean">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.Clean01">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.Initialize">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.Initialize01">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.InitializeStub">
            <summary>Initializes a new instance of type StubRootedAlgorithmBase</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.InternalCompute">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.InternalCompute01">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.OnAborted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.OnAbortedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.OnFinished(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.OnFinishedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.OnRootVertexChanged(System.EventArgs)">
            <summary>Sets the stub of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.OnRootVertexChangedEventArgs">
            <summary>Sets the stub of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.OnStarted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.OnStartedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.OnStateChanged(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.OnStateChangedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.TryGetService(System.Type,System.Object@)">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.TryGetServiceTypeObjectOut">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubRootedAlgorithmBase`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2">
            <summary>Stub type of QuickGraph.Algorithms.RootedSearchAlgorithmBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,`1)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.Clean">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.Clean01">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.Initialize">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.Initialize01">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.InitializeStub">
            <summary>Initializes a new instance of type StubRootedSearchAlgorithmBase</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.InternalCompute">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.InternalCompute01">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnAborted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnAbortedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnFinished(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnFinishedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnGoalReached">
            <summary>Sets the stub of RootedSearchAlgorithmBase`2.OnGoalReached()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnGoalReached01">
            <summary>Sets the stub of RootedSearchAlgorithmBase`2.OnGoalReached()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnGoalVertexChanged(System.EventArgs)">
            <summary>Sets the stub of RootedSearchAlgorithmBase`2.OnGoalVertexChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnGoalVertexChangedEventArgs">
            <summary>Sets the stub of RootedSearchAlgorithmBase`2.OnGoalVertexChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnRootVertexChanged(System.EventArgs)">
            <summary>Sets the stub of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnRootVertexChangedEventArgs">
            <summary>Sets the stub of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnStarted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnStartedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnStateChanged(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.OnStateChangedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.TryGetService(System.Type,System.Object@)">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.TryGetServiceTypeObjectOut">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Fakes.StubRootedSearchAlgorithmBase`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.MaximumFlow.AllVerticesGraphAugmentorAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.#ctor(QuickGraph.Algorithms.MaximumFlow.AllVerticesGraphAugmentorAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IMutableVertexAndEdgeSet{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.AugmentGraph">
            <summary>Sets the shim of AllVerticesGraphAugmentorAlgorithm`2.AugmentGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.ConstructorIAlgorithmComponentIMutableVertexAndEdgeSetOfT0T1VertexFactoryOfT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of AllVerticesGraphAugmentorAlgorithm`2.AllVerticesGraphAugmentorAlgorithm`2(IAlgorithmComponent host, IMutableVertexAndEdgeSet`2&lt;!0,!1&gt; visitedGraph, VertexFactory`1&lt;!0&gt; vertexFactory, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.ConstructorIMutableVertexAndEdgeSetOfT0T1VertexFactoryOfT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of AllVerticesGraphAugmentorAlgorithm`2.AllVerticesGraphAugmentorAlgorithm`2(IMutableVertexAndEdgeSet`2&lt;!0,!1&gt; visitedGraph, VertexFactory`1&lt;!0&gt; vertexFactory, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimAllVerticesGraphAugmentorAlgorithm`2.AllInstances.AugmentGraph">
            <summary>Sets the shim of AllVerticesGraphAugmentorAlgorithm`2.AugmentGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.#ctor(QuickGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IMutableVertexAndEdgeListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.AugmentT0T0">
            <summary>Sets the shim of EdmondsKarpMaximumFlowAlgorithm`2.Augment(!0 source, !0 sink)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.ConstructorIAlgorithmComponentIMutableVertexAndEdgeListGraphOfT0T1FuncOfT1DoubleEdgeFactoryOfT0T1">
            <summary>Sets the shim of EdmondsKarpMaximumFlowAlgorithm`2.EdmondsKarpMaximumFlowAlgorithm`2(IAlgorithmComponent host, IMutableVertexAndEdgeListGraph`2&lt;!0,!1&gt; g, Func`2&lt;!1,Double&gt; capacities, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.ConstructorIMutableVertexAndEdgeListGraphOfT0T1FuncOfT1DoubleEdgeFactoryOfT0T1">
            <summary>Sets the shim of EdmondsKarpMaximumFlowAlgorithm`2.EdmondsKarpMaximumFlowAlgorithm`2(IMutableVertexAndEdgeListGraph`2&lt;!0,!1&gt; g, Func`2&lt;!1,Double&gt; capacities, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.InternalCompute">
            <summary>Sets the shim of EdmondsKarpMaximumFlowAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.ResidualGraphGet">
            <summary>Sets the shim of EdmondsKarpMaximumFlowAlgorithm`2.get_ResidualGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2._get_ResidualGraphb__0T0">
            <summary>Sets the shim of EdmondsKarpMaximumFlowAlgorithm`2.&lt;get_ResidualGraph&gt;b__0(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.AllInstances.AugmentT0T0">
            <summary>Sets the shim of EdmondsKarpMaximumFlowAlgorithm`2.Augment(!0 source, !0 sink)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of EdmondsKarpMaximumFlowAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimEdmondsKarpMaximumFlowAlgorithm`2.AllInstances.ResidualGraphGet">
            <summary>Sets the shim of EdmondsKarpMaximumFlowAlgorithm`2.get_ResidualGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3">
            <summary>Shim type of QuickGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.#ctor(QuickGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.Bind(QuickGraph.Algorithms.IAlgorithm{`2})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AddAugmentedEdgeT0T0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.AddAugmentedEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AugmentedEdgesGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_AugmentedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AugmentedGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_Augmented()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.ConstructorIAlgorithmComponentT2VertexFactoryOfT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.GraphAugmentorAlgorithmBase`3(IAlgorithmComponent host, !2 visitedGraph, VertexFactory`1&lt;!0&gt; vertexFactory, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.Dispose">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.Dispose()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.EdgeFactoryGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_EdgeFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.InternalCompute">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.OnEdgeAddedT1">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.OnEdgeAdded(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.OnSuperSinkAddedT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.OnSuperSinkAdded(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.OnSuperSourceAddedT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.OnSuperSourceAdded(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.Rollback">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.Rollback()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.SuperSinkAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.add_SuperSinkAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.SuperSinkAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.remove_SuperSinkAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.SuperSinkGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_SuperSink()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.SuperSourceAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.add_SuperSourceAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.SuperSourceAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.remove_SuperSourceAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.SuperSourceGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_SuperSource()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.VertexFactoryGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_VertexFactory()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.AddAugmentedEdgeT0T0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.AddAugmentedEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.AugmentedEdgesGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_AugmentedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.AugmentedGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_Augmented()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.Dispose">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.Dispose()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.EdgeFactoryGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_EdgeFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.InternalCompute">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.OnEdgeAddedT1">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.OnEdgeAdded(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.OnSuperSinkAddedT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.OnSuperSinkAdded(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.OnSuperSourceAddedT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.OnSuperSourceAdded(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.Rollback">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.Rollback()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.SuperSinkAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.add_SuperSinkAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.SuperSinkAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.remove_SuperSinkAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.SuperSinkGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_SuperSink()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.SuperSourceAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.add_SuperSourceAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.SuperSourceAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.remove_SuperSourceAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.SuperSourceGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_SuperSource()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphAugmentorAlgorithmBase`3.AllInstances.VertexFactoryGet">
            <summary>Sets the shim of GraphAugmentorAlgorithmBase`3.get_VertexFactory()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.#ctor(QuickGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.Balance">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.Balance()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BalancedGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_Balanced()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BalancingSinkAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.add_BalancingSinkAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BalancingSinkAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.remove_BalancingSinkAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BalancingSinkEdgeGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_BalancingSinkEdge()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BalancingSinkGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_BalancingSink()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BalancingSourceAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.add_BalancingSourceAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BalancingSourceAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.remove_BalancingSourceAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BalancingSourceEdgeGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_BalancingSourceEdge()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.BalancingSourceGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_BalancingSource()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.CapacitiesGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_Capacities()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.ConstructorIMutableBidirectionalGraphOfT0T1T0T0VertexFactoryOfT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.GraphBalancerAlgorithm`2(IMutableBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph, !0 source, !0 sink, VertexFactory`1&lt;!0&gt; vertexFactory, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.ConstructorIMutableBidirectionalGraphOfT0T1VertexFactoryOfT0EdgeFactoryOfT0T1T0T0IDictionaryOfT1Double">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.GraphBalancerAlgorithm`2(IMutableBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph, VertexFactory`1&lt;!0&gt; vertexFactory, EdgeFactory`2&lt;!0,!1&gt; edgeFactory, !0 source, !0 sink, IDictionary`2&lt;!1,Double&gt; capacities)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.DeficientEdgesGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_DeficientEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.DeficientVertexAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.add_DeficientVertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.DeficientVertexAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.remove_DeficientVertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.DeficientVerticesGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_DeficientVertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.EdgeFactoryGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_EdgeFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.GetBalancingIndexT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.GetBalancingIndex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.OnBalancingSinkAdded">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.OnBalancingSinkAdded()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.OnBalancingSourceAdded">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.OnBalancingSourceAdded()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.OnDeficientVertexAddedT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.OnDeficientVertexAdded(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.OnEdgeAddedT1">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.OnEdgeAdded(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.OnSurplusVertexAddedT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.OnSurplusVertexAdded(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.SinkGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_Sink()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.SourceGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.SurplusEdgesGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_SurplusEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.SurplusVertexAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.add_SurplusVertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.SurplusVertexAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.remove_SurplusVertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.SurplusVerticesGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_SurplusVertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.UnBalance">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.UnBalance()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.VertexFactoryGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_VertexFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.VisitedGraphGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.Balance">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.Balance()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.BalancedGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_Balanced()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.BalancingSinkAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.add_BalancingSinkAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.BalancingSinkAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.remove_BalancingSinkAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.BalancingSinkEdgeGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_BalancingSinkEdge()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.BalancingSinkGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_BalancingSink()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.BalancingSourceAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.add_BalancingSourceAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.BalancingSourceAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.remove_BalancingSourceAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.BalancingSourceEdgeGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_BalancingSourceEdge()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.BalancingSourceGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_BalancingSource()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.CapacitiesGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_Capacities()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.DeficientEdgesGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_DeficientEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.DeficientVertexAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.add_DeficientVertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.DeficientVertexAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.remove_DeficientVertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.DeficientVerticesGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_DeficientVertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.EdgeFactoryGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_EdgeFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.GetBalancingIndexT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.GetBalancingIndex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.OnBalancingSinkAdded">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.OnBalancingSinkAdded()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.OnBalancingSourceAdded">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.OnBalancingSourceAdded()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.OnDeficientVertexAddedT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.OnDeficientVertexAdded(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.OnEdgeAddedT1">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.OnEdgeAdded(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.OnSurplusVertexAddedT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.OnSurplusVertexAdded(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.SinkGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_Sink()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.SourceGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.SurplusEdgesGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_SurplusEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.SurplusVertexAddedAddVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.add_SurplusVertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.SurplusVertexAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.remove_SurplusVertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.SurplusVerticesGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_SurplusVertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.UnBalance">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.UnBalance()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.VertexFactoryGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_VertexFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimGraphBalancerAlgorithm`2.AllInstances.VisitedGraphGet">
            <summary>Sets the shim of GraphBalancerAlgorithm`2.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.#ctor(QuickGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IMutableVertexAndEdgeListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.CapacitiesGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_Capacities()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.CapacitiesSetFuncOfT1Double">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_Capacities(Func`2&lt;!1,Double&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.ComputeT0T0">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.Compute(!0 source, !0 sink)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.ConstructorIAlgorithmComponentIMutableVertexAndEdgeListGraphOfT0T1FuncOfT1DoubleEdgeFactoryOfT0T1">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.MaximumFlowAlgorithm`2(IAlgorithmComponent host, IMutableVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; capacities, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.EdgeFactoryGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_EdgeFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.EdgeFactorySetEdgeFactoryOfT0T1">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_EdgeFactory(EdgeFactory`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.GetVertexColorT0">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.MaxFlowGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_MaxFlow()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.MaxFlowSetDouble">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_MaxFlow(Double value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.PredecessorsGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_Predecessors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.PredecessorsSetDictionaryOfT0T1">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_Predecessors(Dictionary`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.ResidualCapacitiesGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_ResidualCapacities()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.ResidualCapacitiesSetDictionaryOfT1Double">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_ResidualCapacities(Dictionary`2&lt;!1,Double&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.ReversedEdgesGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_ReversedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.ReversedEdgesSetDictionaryOfT1T1">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_ReversedEdges(Dictionary`2&lt;!1,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.SinkGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_Sink()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.SinkSetT0">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_Sink(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.SourceGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.SourceSetT0">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_Source(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.VertexColorsGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.VertexColorsSetDictionaryOfT0GraphColor">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_VertexColors(Dictionary`2&lt;!0,GraphColor&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.CapacitiesGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_Capacities()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.CapacitiesSetFuncOfT1Double">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_Capacities(Func`2&lt;!1,Double&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.ComputeT0T0">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.Compute(!0 source, !0 sink)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.EdgeFactoryGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_EdgeFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.EdgeFactorySetEdgeFactoryOfT0T1">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_EdgeFactory(EdgeFactory`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.GetVertexColorT0">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.MaxFlowGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_MaxFlow()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.MaxFlowSetDouble">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_MaxFlow(Double value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.PredecessorsGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_Predecessors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.PredecessorsSetDictionaryOfT0T1">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_Predecessors(Dictionary`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.ResidualCapacitiesGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_ResidualCapacities()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.ResidualCapacitiesSetDictionaryOfT1Double">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_ResidualCapacities(Dictionary`2&lt;!1,Double&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.ReversedEdgesGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_ReversedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.ReversedEdgesSetDictionaryOfT1T1">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_ReversedEdges(Dictionary`2&lt;!1,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.SinkGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_Sink()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.SinkSetT0">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_Sink(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.SourceGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.SourceSetT0">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_Source(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.VertexColorsGet">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMaximumFlowAlgorithm`2.AllInstances.VertexColorsSetDictionaryOfT0GraphColor">
            <summary>Sets the shim of MaximumFlowAlgorithm`2.set_VertexColors(Dictionary`2&lt;!0,GraphColor&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.MaximumFlow.MultiSourceSinkGraphAugmentorAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.#ctor(QuickGraph.Algorithms.MaximumFlow.MultiSourceSinkGraphAugmentorAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IMutableBidirectionalGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.AugmentGraph">
            <summary>Sets the shim of MultiSourceSinkGraphAugmentorAlgorithm`2.AugmentGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.ConstructorIAlgorithmComponentIMutableBidirectionalGraphOfT0T1VertexFactoryOfT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of MultiSourceSinkGraphAugmentorAlgorithm`2.MultiSourceSinkGraphAugmentorAlgorithm`2(IAlgorithmComponent host, IMutableBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph, VertexFactory`1&lt;!0&gt; vertexFactory, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.ConstructorIMutableBidirectionalGraphOfT0T1VertexFactoryOfT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of MultiSourceSinkGraphAugmentorAlgorithm`2.MultiSourceSinkGraphAugmentorAlgorithm`2(IMutableBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph, VertexFactory`1&lt;!0&gt; vertexFactory, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimMultiSourceSinkGraphAugmentorAlgorithm`2.AllInstances.AugmentGraph">
            <summary>Sets the shim of MultiSourceSinkGraphAugmentorAlgorithm`2.AugmentGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.#ctor(QuickGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AddReversedEdges">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.AddReversedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AugmentedEdgesGet">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.get_AugmentedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AugmentedGet">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.get_Augmented()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.ConstructorIAlgorithmComponentIMutableVertexAndEdgeListGraphOfT0T1EdgeFactoryOfT0T1">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.ReversedEdgeAugmentorAlgorithm`2(IAlgorithmComponent host, IMutableVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.ConstructorIMutableVertexAndEdgeListGraphOfT0T1EdgeFactoryOfT0T1">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.ReversedEdgeAugmentorAlgorithm`2(IMutableVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.EdgeFactoryGet">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.get_EdgeFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.FindReversedEdgeT1">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.FindReversedEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.OnReservedEdgeAddedT1">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.OnReservedEdgeAdded(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.RemoveReversedEdges">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.RemoveReversedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.ReversedEdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.add_ReversedEdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.ReversedEdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.remove_ReversedEdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.ReversedEdgesGet">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.get_ReversedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.SystemIDisposableDispose">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.VisitedGraphGet">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.AddReversedEdges">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.AddReversedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.AugmentedEdgesGet">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.get_AugmentedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.AugmentedGet">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.get_Augmented()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.EdgeFactoryGet">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.get_EdgeFactory()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.FindReversedEdgeT1">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.FindReversedEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.OnReservedEdgeAddedT1">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.OnReservedEdgeAdded(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.RemoveReversedEdges">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.RemoveReversedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.ReversedEdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.add_ReversedEdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.ReversedEdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.remove_ReversedEdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.ReversedEdgesGet">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.get_ReversedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.SystemIDisposableDispose">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.ShimReversedEdgeAugmentorAlgorithm`2.AllInstances.VisitedGraphGet">
            <summary>Sets the shim of ReversedEdgeAugmentorAlgorithm`2.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3">
            <summary>Stub type of QuickGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,`2,QuickGraph.VertexFactory{`0},QuickGraph.EdgeFactory{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.AugmentGraph">
            <summary>Sets the stub of GraphAugmentorAlgorithmBase`3.AugmentGraph()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.AugmentGraph01">
            <summary>Sets the stub of GraphAugmentorAlgorithmBase`3.AugmentGraph()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.Clean">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.Clean01">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.Initialize">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.Initialize01">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.InitializeStub">
            <summary>Initializes a new instance of type StubGraphAugmentorAlgorithmBase</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.InternalCompute">
            <summary>Sets the stub of GraphAugmentorAlgorithmBase`3.InternalCompute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.InternalCompute01">
            <summary>Sets the stub of GraphAugmentorAlgorithmBase`3.InternalCompute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.OnAborted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.OnAbortedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.OnFinished(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.OnFinishedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.OnStarted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.OnStartedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.OnStateChanged(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.OnStateChangedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.Rollback">
            <summary>Sets the stub of GraphAugmentorAlgorithmBase`3.Rollback()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.Rollback01">
            <summary>Sets the stub of GraphAugmentorAlgorithmBase`3.Rollback()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.TryGetService(System.Type,System.Object@)">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.TryGetServiceTypeObjectOut">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.StubGraphAugmentorAlgorithmBase`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IMutableVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double},QuickGraph.EdgeFactory{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.Clean">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.Clean01">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.Initialize">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.Initialize01">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.InitializeStub">
            <summary>Initializes a new instance of type StubMaximumFlowAlgorithm</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.InternalCompute">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.InternalCompute01">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.OnAborted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.OnAbortedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.OnFinished(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.OnFinishedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.OnStarted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.OnStartedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.OnStateChanged(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.OnStateChangedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.TryGetService(System.Type,System.Object@)">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.TryGetServiceTypeObjectOut">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MaximumFlow.Fakes.StubMaximumFlowAlgorithm`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.MinimumSpanningTree.KruskalMinimumSpanningTreeAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.#ctor(QuickGraph.Algorithms.MinimumSpanningTree.KruskalMinimumSpanningTreeAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IUndirectedGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.Bind(QuickGraph.Algorithms.MinimumSpanningTree.IMinimumSpanningTreeAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.ConstructorIAlgorithmComponentIUndirectedGraphOfT0T1FuncOfT1Double">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.KruskalMinimumSpanningTreeAlgorithm`2(IAlgorithmComponent host, IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; edgeWeights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.ConstructorIUndirectedGraphOfT0T1FuncOfT1Double">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.KruskalMinimumSpanningTreeAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; edgeWeights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.InternalCompute">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.OnExamineEdgeT1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.OnExamineEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.OnTreeEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.AllInstances.OnExamineEdgeT1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.OnExamineEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.OnTreeEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.ShimKruskalMinimumSpanningTreeAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of KruskalMinimumSpanningTreeAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.MinimumSpanningTree.IMinimumSpanningTreeAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.#ctor">
            <summary>Initializes a new instance of type StubIMinimumSpanningTreeAlgorithm</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.Abort">
            <summary>Sets the stub of IComputation.Abort()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.Compute">
            <summary>Sets the stub of IComputation.Compute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.qg::QuickGraph#Algorithms#IComputation#Abort">
            <summary>Sets the stub of IComputation.Abort()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.qg::QuickGraph#Algorithms#IComputation#Compute">
            <summary>Sets the stub of IComputation.Compute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.StateGet">
            <summary>Sets the stub of IComputation.get_State()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.SyncRootGet">
            <summary>Sets the stub of IComputation.get_SyncRoot()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.VisitedGraphGet">
            <summary>Sets the stub of IAlgorithm`1.get_VisitedGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.qg::QuickGraph#Algorithms#IComputation#State">
            <summary>Sets the stub of IComputation.get_State()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.qg::QuickGraph#Algorithms#IComputation#SyncRoot">
            <summary>Sets the stub of IComputation.get_SyncRoot()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.MinimumSpanningTree.Fakes.StubIMinimumSpanningTreeAlgorithm`2.qg::QuickGraph#Algorithms#IAlgorithm{QuickGraph#IUndirectedGraph{TVertex@TEdge}}#VisitedGraph">
            <summary>Sets the stub of IAlgorithm`1.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2">
            <summary>Shim type of QuickGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.#ctor(QuickGraph.Algorithms.Observers.EdgePredecessorRecorderObserver{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.Bind(QuickGraph.Algorithms.Observers.IObserver{QuickGraph.Algorithms.IEdgePredecessorRecorderAlgorithm{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllMergedPaths">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.AllMergedPaths()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllPaths">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.AllPaths()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AttachIEdgePredecessorRecorderAlgorithmOfT0T1">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.Attach(IEdgePredecessorRecorderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.Constructor">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.EdgePredecessorRecorderObserver`2()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.ConstructorIDictionaryOfT1T1IListOfT1">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.EdgePredecessorRecorderObserver`2(IDictionary`2&lt;!1,!1&gt; edgePredecessors, IList`1&lt;!1&gt; endPathEdges)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.DiscoverTreeEdgeT1T1">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.DiscoverTreeEdge(!1 edge, !1 targetEdge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.EdgePredecessorsGet">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.get_EdgePredecessors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.EndPathEdgesGet">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.get_EndPathEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.FinishEdgeT1">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.FinishEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.MergedPathT1IDictionaryOfT1GraphColor">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.MergedPath(!1 se, IDictionary`2&lt;!1,GraphColor&gt; colors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.PathT1">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.Path(!1 se)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllInstances.AllMergedPaths">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.AllMergedPaths()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllInstances.AllPaths">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.AllPaths()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllInstances.AttachIEdgePredecessorRecorderAlgorithmOfT0T1">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.Attach(IEdgePredecessorRecorderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllInstances.DiscoverTreeEdgeT1T1">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.DiscoverTreeEdge(!1 edge, !1 targetEdge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllInstances.EdgePredecessorsGet">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.get_EdgePredecessors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllInstances.EndPathEdgesGet">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.get_EndPathEdges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllInstances.FinishEdgeT1">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.FinishEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllInstances.MergedPathT1IDictionaryOfT1GraphColor">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.MergedPath(!1 se, IDictionary`2&lt;!1,GraphColor&gt; colors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgePredecessorRecorderObserver`2.AllInstances.PathT1">
            <summary>Sets the shim of EdgePredecessorRecorderObserver`2.Path(!1 se)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2">
            <summary>Shim type of QuickGraph.Algorithms.Observers.EdgeRecorderObserver`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.#ctor(QuickGraph.Algorithms.Observers.EdgeRecorderObserver{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.Bind(QuickGraph.Algorithms.Observers.IObserver{QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.AttachITreeBuilderAlgorithmOfT0T1">
            <summary>Sets the shim of EdgeRecorderObserver`2.Attach(ITreeBuilderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.Constructor">
            <summary>Sets the shim of EdgeRecorderObserver`2.EdgeRecorderObserver`2()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.ConstructorIListOfT1">
            <summary>Sets the shim of EdgeRecorderObserver`2.EdgeRecorderObserver`2(IList`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.EdgesGet">
            <summary>Sets the shim of EdgeRecorderObserver`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.RecordEdgeT1">
            <summary>Sets the shim of EdgeRecorderObserver`2.RecordEdge(!1 args)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.AllInstances.AttachITreeBuilderAlgorithmOfT0T1">
            <summary>Sets the shim of EdgeRecorderObserver`2.Attach(ITreeBuilderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.AllInstances.EdgesGet">
            <summary>Sets the shim of EdgeRecorderObserver`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimEdgeRecorderObserver`2.AllInstances.RecordEdgeT1">
            <summary>Sets the shim of EdgeRecorderObserver`2.RecordEdge(!1 args)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2">
            <summary>Shim type of QuickGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.#ctor(QuickGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.Bind(QuickGraph.Algorithms.Observers.IObserver{QuickGraph.Algorithms.IUndirectedTreeBuilderAlgorithm{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.AttachIUndirectedTreeBuilderAlgorithmOfT0T1">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.Attach(IUndirectedTreeBuilderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.ConstructorFuncOfT1Double">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.UndirectedVertexDistanceRecorderObserver`2(Func`2&lt;!1,Double&gt; edgeWeights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.ConstructorFuncOfT1DoubleIDistanceRelaxerIDictionaryOfT0Double">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.UndirectedVertexDistanceRecorderObserver`2(Func`2&lt;!1,Double&gt; edgeWeights, IDistanceRelaxer distanceRelaxer, IDictionary`2&lt;!0,Double&gt; distances)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.DistanceRelaxerGet">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.get_DistanceRelaxer()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.DistancesGet">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.get_Distances()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.EdgeWeightsGet">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.get_EdgeWeights()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.TreeEdgeObjectUndirectedEdgeEventArgsOfT0T1">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.TreeEdge(Object sender, UndirectedEdgeEventArgs`2&lt;!0,!1&gt; args)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.AllInstances.AttachIUndirectedTreeBuilderAlgorithmOfT0T1">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.Attach(IUndirectedTreeBuilderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.AllInstances.DistanceRelaxerGet">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.get_DistanceRelaxer()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.AllInstances.DistancesGet">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.get_Distances()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.AllInstances.EdgeWeightsGet">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.get_EdgeWeights()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexDistanceRecorderObserver`2.AllInstances.TreeEdgeObjectUndirectedEdgeEventArgsOfT0T1">
            <summary>Sets the shim of UndirectedVertexDistanceRecorderObserver`2.TreeEdge(Object sender, UndirectedEdgeEventArgs`2&lt;!0,!1&gt; args)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2">
            <summary>Shim type of QuickGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.#ctor(QuickGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.Bind(QuickGraph.Algorithms.Observers.IObserver{QuickGraph.Algorithms.IUndirectedTreeBuilderAlgorithm{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.AttachIUndirectedTreeBuilderAlgorithmOfT0T1">
            <summary>Sets the shim of UndirectedVertexPredecessorRecorderObserver`2.Attach(IUndirectedTreeBuilderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.Constructor">
            <summary>Sets the shim of UndirectedVertexPredecessorRecorderObserver`2.UndirectedVertexPredecessorRecorderObserver`2()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.ConstructorIDictionaryOfT0T1">
            <summary>Sets the shim of UndirectedVertexPredecessorRecorderObserver`2.UndirectedVertexPredecessorRecorderObserver`2(IDictionary`2&lt;!0,!1&gt; vertexPredecessors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.TreeEdgeObjectUndirectedEdgeEventArgsOfT0T1">
            <summary>Sets the shim of UndirectedVertexPredecessorRecorderObserver`2.TreeEdge(Object sender, UndirectedEdgeEventArgs`2&lt;!0,!1&gt; e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.TryGetPathT0IEnumerableOfT1Out">
            <summary>Sets the shim of UndirectedVertexPredecessorRecorderObserver`2.TryGetPath(!0 vertex, IEnumerable`1&lt;!1&gt;&amp; path)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.VertexPredecessorsGet">
            <summary>Sets the shim of UndirectedVertexPredecessorRecorderObserver`2.get_VertexPredecessors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.AllInstances.AttachIUndirectedTreeBuilderAlgorithmOfT0T1">
            <summary>Sets the shim of UndirectedVertexPredecessorRecorderObserver`2.Attach(IUndirectedTreeBuilderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.AllInstances.TreeEdgeObjectUndirectedEdgeEventArgsOfT0T1">
            <summary>Sets the shim of UndirectedVertexPredecessorRecorderObserver`2.TreeEdge(Object sender, UndirectedEdgeEventArgs`2&lt;!0,!1&gt; e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.AllInstances.TryGetPathT0IEnumerableOfT1Out">
            <summary>Sets the shim of UndirectedVertexPredecessorRecorderObserver`2.TryGetPath(!0 vertex, IEnumerable`1&lt;!1&gt;&amp; path)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimUndirectedVertexPredecessorRecorderObserver`2.AllInstances.VertexPredecessorsGet">
            <summary>Sets the shim of UndirectedVertexPredecessorRecorderObserver`2.get_VertexPredecessors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2">
            <summary>Shim type of QuickGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.#ctor(QuickGraph.Algorithms.Observers.VertexDistanceRecorderObserver{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.Bind(QuickGraph.Algorithms.Observers.IObserver{QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.AttachITreeBuilderAlgorithmOfT0T1">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.Attach(ITreeBuilderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.ConstructorFuncOfT1Double">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.VertexDistanceRecorderObserver`2(Func`2&lt;!1,Double&gt; edgeWeights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.ConstructorFuncOfT1DoubleIDistanceRelaxerIDictionaryOfT0Double">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.VertexDistanceRecorderObserver`2(Func`2&lt;!1,Double&gt; edgeWeights, IDistanceRelaxer distanceRelaxer, IDictionary`2&lt;!0,Double&gt; distances)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.DistanceRelaxerGet">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.get_DistanceRelaxer()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.DistancesGet">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.get_Distances()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.EdgeWeightsGet">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.get_EdgeWeights()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.TreeEdgeT1">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.TreeEdge(!1 edge)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.AllInstances.AttachITreeBuilderAlgorithmOfT0T1">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.Attach(ITreeBuilderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.AllInstances.DistanceRelaxerGet">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.get_DistanceRelaxer()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.AllInstances.DistancesGet">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.get_Distances()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.AllInstances.EdgeWeightsGet">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.get_EdgeWeights()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexDistanceRecorderObserver`2.AllInstances.TreeEdgeT1">
            <summary>Sets the shim of VertexDistanceRecorderObserver`2.TreeEdge(!1 edge)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2">
            <summary>Shim type of QuickGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.#ctor(QuickGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.Bind(QuickGraph.Algorithms.Observers.IObserver{QuickGraph.Algorithms.IVertexPredecessorRecorderAlgorithm{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.AllPaths">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.AllPaths()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.AttachIVertexPredecessorRecorderAlgorithmOfT0T1">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.Attach(IVertexPredecessorRecorderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.Constructor">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.VertexPredecessorPathRecorderObserver`2()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.ConstructorIDictionaryOfT0T1">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.VertexPredecessorPathRecorderObserver`2(IDictionary`2&lt;!0,!1&gt; vertexPredecessors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.EndPathVerticesGet">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.get_EndPathVertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.FinishVertexT0">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.FinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.TreeEdgeT1">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.TreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.VertexPredecessorsGet">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.get_VertexPredecessors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.AllInstances.AllPaths">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.AllPaths()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.AllInstances.AttachIVertexPredecessorRecorderAlgorithmOfT0T1">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.Attach(IVertexPredecessorRecorderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.AllInstances.EndPathVerticesGet">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.get_EndPathVertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.AllInstances.FinishVertexT0">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.FinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.AllInstances.TreeEdgeT1">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.TreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorPathRecorderObserver`2.AllInstances.VertexPredecessorsGet">
            <summary>Sets the shim of VertexPredecessorPathRecorderObserver`2.get_VertexPredecessors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2">
            <summary>Shim type of QuickGraph.Algorithms.Observers.VertexPredecessorRecorderObserver`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.#ctor(QuickGraph.Algorithms.Observers.VertexPredecessorRecorderObserver{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.Bind(QuickGraph.Algorithms.Observers.IObserver{QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.AttachITreeBuilderAlgorithmOfT0T1">
            <summary>Sets the shim of VertexPredecessorRecorderObserver`2.Attach(ITreeBuilderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.Constructor">
            <summary>Sets the shim of VertexPredecessorRecorderObserver`2.VertexPredecessorRecorderObserver`2()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.ConstructorDictionaryOfT0T1">
            <summary>Sets the shim of VertexPredecessorRecorderObserver`2.VertexPredecessorRecorderObserver`2(Dictionary`2&lt;!0,!1&gt; vertexPredecessors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.TreeEdgeT1">
            <summary>Sets the shim of VertexPredecessorRecorderObserver`2.TreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.TryGetPathT0IEnumerableOfT1Out">
            <summary>Sets the shim of VertexPredecessorRecorderObserver`2.TryGetPath(!0 vertex, IEnumerable`1&lt;!1&gt;&amp; path)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.VertexPredecessorsGet">
            <summary>Sets the shim of VertexPredecessorRecorderObserver`2.get_VertexPredecessors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.AllInstances.AttachITreeBuilderAlgorithmOfT0T1">
            <summary>Sets the shim of VertexPredecessorRecorderObserver`2.Attach(ITreeBuilderAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.AllInstances.TreeEdgeT1">
            <summary>Sets the shim of VertexPredecessorRecorderObserver`2.TreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.AllInstances.TryGetPathT0IEnumerableOfT1Out">
            <summary>Sets the shim of VertexPredecessorRecorderObserver`2.TryGetPath(!0 vertex, IEnumerable`1&lt;!1&gt;&amp; path)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexPredecessorRecorderObserver`2.AllInstances.VertexPredecessorsGet">
            <summary>Sets the shim of VertexPredecessorRecorderObserver`2.get_VertexPredecessors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2">
            <summary>Shim type of QuickGraph.Algorithms.Observers.VertexRecorderObserver`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.#ctor(QuickGraph.Algorithms.Observers.VertexRecorderObserver{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.Bind(QuickGraph.Algorithms.Observers.IObserver{QuickGraph.Algorithms.IVertexTimeStamperAlgorithm{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.AttachIVertexTimeStamperAlgorithmOfT0T1">
            <summary>Sets the shim of VertexRecorderObserver`2.Attach(IVertexTimeStamperAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.Constructor">
            <summary>Sets the shim of VertexRecorderObserver`2.VertexRecorderObserver`2()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.ConstructorIListOfT0">
            <summary>Sets the shim of VertexRecorderObserver`2.VertexRecorderObserver`2(IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.VerticesGet">
            <summary>Sets the shim of VertexRecorderObserver`2.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.algorithm_DiscoverVertexT0">
            <summary>Sets the shim of VertexRecorderObserver`2.algorithm_DiscoverVertex(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.AllInstances.AttachIVertexTimeStamperAlgorithmOfT0T1">
            <summary>Sets the shim of VertexRecorderObserver`2.Attach(IVertexTimeStamperAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.AllInstances.VerticesGet">
            <summary>Sets the shim of VertexRecorderObserver`2.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexRecorderObserver`2.AllInstances.algorithm_DiscoverVertexT0">
            <summary>Sets the shim of VertexRecorderObserver`2.algorithm_DiscoverVertex(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2">
            <summary>Shim type of QuickGraph.Algorithms.Observers.VertexTimeStamperObserver`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.#ctor(QuickGraph.Algorithms.Observers.VertexTimeStamperObserver{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.Bind(QuickGraph.Algorithms.Observers.IObserver{QuickGraph.Algorithms.IVertexTimeStamperAlgorithm{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.AttachIVertexTimeStamperAlgorithmOfT0T1">
            <summary>Sets the shim of VertexTimeStamperObserver`2.Attach(IVertexTimeStamperAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.Constructor">
            <summary>Sets the shim of VertexTimeStamperObserver`2.VertexTimeStamperObserver`2()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.ConstructorDictionaryOfT0Int32">
            <summary>Sets the shim of VertexTimeStamperObserver`2.VertexTimeStamperObserver`2(Dictionary`2&lt;!0,Int32&gt; discoverTimes)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.ConstructorDictionaryOfT0Int32DictionaryOfT0Int32">
            <summary>Sets the shim of VertexTimeStamperObserver`2.VertexTimeStamperObserver`2(Dictionary`2&lt;!0,Int32&gt; discoverTimes, Dictionary`2&lt;!0,Int32&gt; finishTimes)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.DiscoverTimesGet">
            <summary>Sets the shim of VertexTimeStamperObserver`2.get_DiscoverTimes()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.DiscoverVertexT0">
            <summary>Sets the shim of VertexTimeStamperObserver`2.DiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.FinishTimesGet">
            <summary>Sets the shim of VertexTimeStamperObserver`2.get_FinishTimes()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.FinishVertexT0">
            <summary>Sets the shim of VertexTimeStamperObserver`2.FinishVertex(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.AllInstances.AttachIVertexTimeStamperAlgorithmOfT0T1">
            <summary>Sets the shim of VertexTimeStamperObserver`2.Attach(IVertexTimeStamperAlgorithm`2&lt;!0,!1&gt; algorithm)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.AllInstances.DiscoverTimesGet">
            <summary>Sets the shim of VertexTimeStamperObserver`2.get_DiscoverTimes()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.AllInstances.DiscoverVertexT0">
            <summary>Sets the shim of VertexTimeStamperObserver`2.DiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.AllInstances.FinishTimesGet">
            <summary>Sets the shim of VertexTimeStamperObserver`2.get_FinishTimes()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Observers.Fakes.ShimVertexTimeStamperObserver`2.AllInstances.FinishVertexT0">
            <summary>Sets the shim of VertexTimeStamperObserver`2.FinishVertex(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.Fakes.StubIObserver`1">
            <summary>Stub type of QuickGraph.Algorithms.Observers.IObserver`1</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.StubIObserver`1.#ctor">
            <summary>Initializes a new instance of type StubIObserver</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Observers.Fakes.StubIObserver`1.AttachT0">
            <summary>Sets the stub of IObserver`1.Attach(!0 algorithm)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.Fakes.StubIObserver`1.qg::QuickGraph#Algorithms#Observers#IObserver{TAlgorithm}#Attach(`0)">
            <summary>Sets the stub of IObserver`1.Attach(!0 algorithm)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.#ctor(QuickGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AttemptDouble">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.Attempt(Double eps)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.ChanceDouble">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.Chance(Double eps)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.ClearTreeT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.ClearTree(!0 u)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.ClearTreeVertexAddVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.add_ClearTreeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.ClearTreeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.remove_ClearTreeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1IMarkovEdgeChainOfT0T1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.CyclePoppingRandomTreeAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, IMarkovEdgeChain`2&lt;!0,!1&gt; edgeChain)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.ConstructorIVertexListGraphOfT0T1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.CyclePoppingRandomTreeAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.ConstructorIVertexListGraphOfT0T1IMarkovEdgeChainOfT0T1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.CyclePoppingRandomTreeAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, IMarkovEdgeChain`2&lt;!0,!1&gt; edgeChain)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.EdgeChainGet">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.get_EdgeChain()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.GetVertexColorT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.GetVertexColor(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.Initialize">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.InternalCompute">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.NotInTreeT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.NotInTree(!0 u)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.OnClearTreeVertexT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.OnClearTreeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.OnFinishVertexT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.OnInitializeVertexT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.RandomTree">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.RandomTree()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.RandomTreeWithRootT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.RandomTreeWithRoot(!0 root)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.RndGet">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.get_Rnd()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.RndSetRandom">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.set_Rnd(Random value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.SetInTreeT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.SetInTree(!0 u)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.SuccessorsGet">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.get_Successors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.TreeT0T1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.Tree(!0 u, !1 next)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.TryGetNextInTreeT0T0Out">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.TryGetNextInTree(!0 u, !0&amp; next)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.TryGetSuccessorDictionaryOfT1Int32T0T1Out">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.TryGetSuccessor(Dictionary`2&lt;!1,Int32&gt; visited, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.VertexColorsGet">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.AttemptDouble">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.Attempt(Double eps)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.ChanceDouble">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.Chance(Double eps)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.ClearTreeT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.ClearTree(!0 u)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.ClearTreeVertexAddVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.add_ClearTreeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.ClearTreeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.remove_ClearTreeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.EdgeChainGet">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.get_EdgeChain()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.GetVertexColorT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.GetVertexColor(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.NotInTreeT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.NotInTree(!0 u)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.OnClearTreeVertexT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.OnClearTreeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.OnFinishVertexT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.OnInitializeVertexT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.RandomTree">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.RandomTree()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.RandomTreeWithRootT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.RandomTreeWithRoot(!0 root)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.RndGet">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.get_Rnd()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.RndSetRandom">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.set_Rnd(Random value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.SetInTreeT0">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.SetInTree(!0 u)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.SuccessorsGet">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.get_Successors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.TreeT0T1">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.Tree(!0 u, !1 next)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.TryGetNextInTreeT0T0Out">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.TryGetNextInTree(!0 u, !0&amp; next)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.TryGetSuccessorDictionaryOfT1Int32T0T1Out">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.TryGetSuccessor(Dictionary`2&lt;!1,Int32&gt; visited, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimCyclePoppingRandomTreeAlgorithm`2.AllInstances.VertexColorsGet">
            <summary>Sets the shim of CyclePoppingRandomTreeAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2">
            <summary>Shim type of QuickGraph.Algorithms.RandomWalks.MarkovEdgeChainBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.#ctor(QuickGraph.Algorithms.RandomWalks.MarkovEdgeChainBase{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.Bind(QuickGraph.Algorithms.RandomWalks.IEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.Bind(QuickGraph.Algorithms.RandomWalks.IMarkovEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.Constructor">
            <summary>Sets the shim of MarkovEdgeChainBase`2.MarkovEdgeChainBase`2()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.RandGet">
            <summary>Sets the shim of MarkovEdgeChainBase`2.get_Rand()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.RandSetRandom">
            <summary>Sets the shim of MarkovEdgeChainBase`2.set_Rand(Random value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.AllInstances.RandGet">
            <summary>Sets the shim of MarkovEdgeChainBase`2.get_Rand()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimMarkovEdgeChainBase`2.AllInstances.RandSetRandom">
            <summary>Sets the shim of MarkovEdgeChainBase`2.set_Rand(Random value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2">
            <summary>Shim type of QuickGraph.Algorithms.RandomWalks.NormalizedMarkovEdgeChain`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.#ctor(QuickGraph.Algorithms.RandomWalks.NormalizedMarkovEdgeChain{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.Bind(QuickGraph.Algorithms.RandomWalks.IEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.Bind(QuickGraph.Algorithms.RandomWalks.IMarkovEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.Constructor">
            <summary>Sets the shim of NormalizedMarkovEdgeChain`2.NormalizedMarkovEdgeChain`2()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the shim of NormalizedMarkovEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the shim of NormalizedMarkovEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.AllInstances.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the shim of NormalizedMarkovEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimNormalizedMarkovEdgeChain`2.AllInstances.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the shim of NormalizedMarkovEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.#ctor(QuickGraph.Algorithms.RandomWalks.RandomWalkAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.ConstructorIImplicitGraphOfT0T1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.RandomWalkAlgorithm`2(IImplicitGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.ConstructorIImplicitGraphOfT0T1IEdgeChainOfT0T1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.RandomWalkAlgorithm`2(IImplicitGraph`2&lt;!0,!1&gt; visitedGraph, IEdgeChain`2&lt;!0,!1&gt; edgeChain)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.EdgeChainGet">
            <summary>Sets the shim of RandomWalkAlgorithm`2.get_EdgeChain()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.EdgeChainSetIEdgeChainOfT0T1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.set_EdgeChain(IEdgeChain`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.EndPredicateGet">
            <summary>Sets the shim of RandomWalkAlgorithm`2.get_EndPredicate()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.EndPredicateSetEdgePredicateOfT0T1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.set_EndPredicate(EdgePredicate`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.EndVertexAddVertexActionOfT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.add_EndVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.EndVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.remove_EndVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.GenerateT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.Generate(!0 root)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.GenerateT0Int32">
            <summary>Sets the shim of RandomWalkAlgorithm`2.Generate(!0 root, Int32 walkCount)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.OnEndVertexT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.OnEndVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.OnStartVertexT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.TryGetSuccessorT0T1Out">
            <summary>Sets the shim of RandomWalkAlgorithm`2.TryGetSuccessor(!0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.VisitedGraphGet">
            <summary>Sets the shim of RandomWalkAlgorithm`2.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.EdgeChainGet">
            <summary>Sets the shim of RandomWalkAlgorithm`2.get_EdgeChain()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.EdgeChainSetIEdgeChainOfT0T1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.set_EdgeChain(IEdgeChain`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.EndPredicateGet">
            <summary>Sets the shim of RandomWalkAlgorithm`2.get_EndPredicate()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.EndPredicateSetEdgePredicateOfT0T1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.set_EndPredicate(EdgePredicate`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.EndVertexAddVertexActionOfT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.add_EndVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.EndVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.remove_EndVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.GenerateT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.Generate(!0 root)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.GenerateT0Int32">
            <summary>Sets the shim of RandomWalkAlgorithm`2.Generate(!0 root, Int32 walkCount)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.OnEndVertexT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.OnEndVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.OnStartVertexT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of RandomWalkAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of RandomWalkAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.TryGetSuccessorT0T1Out">
            <summary>Sets the shim of RandomWalkAlgorithm`2.TryGetSuccessor(!0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRandomWalkAlgorithm`2.AllInstances.VisitedGraphGet">
            <summary>Sets the shim of RandomWalkAlgorithm`2.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2">
            <summary>Shim type of QuickGraph.Algorithms.RandomWalks.RoundRobinEdgeChain`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.#ctor(QuickGraph.Algorithms.RandomWalks.RoundRobinEdgeChain{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.Bind(QuickGraph.Algorithms.RandomWalks.IEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.Constructor">
            <summary>Sets the shim of RoundRobinEdgeChain`2.RoundRobinEdgeChain`2()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the shim of RoundRobinEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the shim of RoundRobinEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.AllInstances.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the shim of RoundRobinEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimRoundRobinEdgeChain`2.AllInstances.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the shim of RoundRobinEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2">
            <summary>Shim type of QuickGraph.Algorithms.RandomWalks.VanishingWeightedMarkovEdgeChain`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.#ctor(QuickGraph.Algorithms.RandomWalks.VanishingWeightedMarkovEdgeChain{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.Bind(QuickGraph.Algorithms.RandomWalks.IEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.Bind(QuickGraph.Algorithms.RandomWalks.IMarkovEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.ConstructorIDictionaryOfT1Double">
            <summary>Sets the shim of VanishingWeightedMarkovEdgeChain`2.VanishingWeightedMarkovEdgeChain`2(IDictionary`2&lt;!1,Double&gt; weights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.ConstructorIDictionaryOfT1DoubleDouble">
            <summary>Sets the shim of VanishingWeightedMarkovEdgeChain`2.VanishingWeightedMarkovEdgeChain`2(IDictionary`2&lt;!1,Double&gt; weights, Double factor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.FactorGet">
            <summary>Sets the shim of VanishingWeightedMarkovEdgeChain`2.get_Factor()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.FactorSetDouble">
            <summary>Sets the shim of VanishingWeightedMarkovEdgeChain`2.set_Factor(Double value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the shim of VanishingWeightedMarkovEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the shim of VanishingWeightedMarkovEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.AllInstances.FactorGet">
            <summary>Sets the shim of VanishingWeightedMarkovEdgeChain`2.get_Factor()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.AllInstances.FactorSetDouble">
            <summary>Sets the shim of VanishingWeightedMarkovEdgeChain`2.set_Factor(Double value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.AllInstances.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the shim of VanishingWeightedMarkovEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimVanishingWeightedMarkovEdgeChain`2.AllInstances.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the shim of VanishingWeightedMarkovEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2">
            <summary>Shim type of QuickGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChain`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.#ctor(QuickGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChain{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.Bind(QuickGraph.Algorithms.RandomWalks.IEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.Bind(QuickGraph.Algorithms.RandomWalks.IMarkovEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.ConstructorIDictionaryOfT1Double">
            <summary>Sets the shim of WeightedMarkovEdgeChain`2.WeightedMarkovEdgeChain`2(IDictionary`2&lt;!1,Double&gt; weights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the shim of WeightedMarkovEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; sucessor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the shim of WeightedMarkovEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.AllInstances.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the shim of WeightedMarkovEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; sucessor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChain`2.AllInstances.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the shim of WeightedMarkovEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2">
            <summary>Shim type of QuickGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.#ctor(QuickGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.Bind(QuickGraph.Algorithms.RandomWalks.IEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.Bind(QuickGraph.Algorithms.RandomWalks.IMarkovEdgeChain{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.ConstructorIDictionaryOfT1Double">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.WeightedMarkovEdgeChainBase`2(IDictionary`2&lt;!1,Double&gt; weights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.GetOutWeightIImplicitGraphOfT0T1T0">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.GetOutWeight(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.GetWeightsIEnumerableOfT1">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.GetWeights(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.TryGetSuccessorIEnumerableOfT1DoubleT1Out">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, Double position, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.TryGetSuccessorIImplicitGraphOfT0T1T0DoubleT1Out">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, Double position, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.WeightsGet">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.get_Weights()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.WeightsSetIDictionaryOfT1Double">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.set_Weights(IDictionary`2&lt;!1,Double&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.AllInstances.GetOutWeightIImplicitGraphOfT0T1T0">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.GetOutWeight(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.AllInstances.GetWeightsIEnumerableOfT1">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.GetWeights(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.AllInstances.TryGetSuccessorIEnumerableOfT1DoubleT1Out">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, Double position, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.AllInstances.TryGetSuccessorIImplicitGraphOfT0T1T0DoubleT1Out">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, Double position, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.AllInstances.WeightsGet">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.get_Weights()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.ShimWeightedMarkovEdgeChainBase`2.AllInstances.WeightsSetIDictionaryOfT1Double">
            <summary>Sets the shim of WeightedMarkovEdgeChainBase`2.set_Weights(IDictionary`2&lt;!1,Double&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.StubIEdgeChain`2">
            <summary>Stub type of QuickGraph.Algorithms.RandomWalks.IEdgeChain`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubIEdgeChain`2.#ctor">
            <summary>Initializes a new instance of type StubIEdgeChain</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubIEdgeChain`2.qg::QuickGraph#Algorithms#RandomWalks#IEdgeChain{TVertex@TEdge}#TryGetSuccessor(QuickGraph.IImplicitGraph{`0,`1},`0,`1@)">
            <summary>Sets the stub of IEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubIEdgeChain`2.qg::QuickGraph#Algorithms#RandomWalks#IEdgeChain{TVertex@TEdge}#TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},`0,`1@)">
            <summary>Sets the stub of IEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RandomWalks.Fakes.StubIEdgeChain`2.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the stub of IEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RandomWalks.Fakes.StubIEdgeChain`2.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the stub of IEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.StubIMarkovEdgeChain`2">
            <summary>Stub type of QuickGraph.Algorithms.RandomWalks.IMarkovEdgeChain`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubIMarkovEdgeChain`2.#ctor">
            <summary>Initializes a new instance of type StubIMarkovEdgeChain</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubIMarkovEdgeChain`2.AttachBackingFieldToRand">
            <summary>Attaches delegates to emulate StubIMarkovEdgeChain.Rand as a property with a backing field.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubIMarkovEdgeChain`2.qg::QuickGraph#Algorithms#RandomWalks#IEdgeChain{TVertex@TEdge}#TryGetSuccessor(QuickGraph.IImplicitGraph{`0,`1},`0,`1@)">
            <summary>Sets the stub of IEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubIMarkovEdgeChain`2.qg::QuickGraph#Algorithms#RandomWalks#IEdgeChain{TVertex@TEdge}#TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},`0,`1@)">
            <summary>Sets the stub of IEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RandomWalks.Fakes.StubIMarkovEdgeChain`2.RandGet">
            <summary>Sets the stub of IMarkovEdgeChain`2.get_Rand()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RandomWalks.Fakes.StubIMarkovEdgeChain`2.RandSetRandom">
            <summary>Sets the stub of IMarkovEdgeChain`2.set_Rand(Random value)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RandomWalks.Fakes.StubIMarkovEdgeChain`2.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the stub of IEdgeChain`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RandomWalks.Fakes.StubIMarkovEdgeChain`2.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the stub of IEdgeChain`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.StubIMarkovEdgeChain`2.qg::QuickGraph#Algorithms#RandomWalks#IMarkovEdgeChain{TVertex@TEdge}#Rand">
            <summary>Sets the stub of IMarkovEdgeChain`2.get_Rand()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.StubMarkovEdgeChainBase`2">
            <summary>Stub type of QuickGraph.Algorithms.RandomWalks.MarkovEdgeChainBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubMarkovEdgeChainBase`2.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubMarkovEdgeChainBase`2.InitializeStub">
            <summary>Initializes a new instance of type StubMarkovEdgeChainBase</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubMarkovEdgeChainBase`2.TryGetSuccessor(QuickGraph.IImplicitGraph{`0,`1},`0,`1@)">
            <summary>Sets the stub of MarkovEdgeChainBase`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubMarkovEdgeChainBase`2.TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},`0,`1@)">
            <summary>Sets the stub of MarkovEdgeChainBase`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RandomWalks.Fakes.StubMarkovEdgeChainBase`2.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the stub of MarkovEdgeChainBase`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RandomWalks.Fakes.StubMarkovEdgeChainBase`2.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the stub of MarkovEdgeChainBase`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.StubMarkovEdgeChainBase`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.StubMarkovEdgeChainBase`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.StubMarkovEdgeChainBase`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.Fakes.StubWeightedMarkovEdgeChainBase`2">
            <summary>Stub type of QuickGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubWeightedMarkovEdgeChainBase`2.#ctor(System.Collections.Generic.IDictionary{`1,System.Double})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubWeightedMarkovEdgeChainBase`2.InitializeStub">
            <summary>Initializes a new instance of type StubWeightedMarkovEdgeChainBase</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubWeightedMarkovEdgeChainBase`2.TryGetSuccessor(QuickGraph.IImplicitGraph{`0,`1},`0,`1@)">
            <summary>Sets the stub of MarkovEdgeChainBase`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RandomWalks.Fakes.StubWeightedMarkovEdgeChainBase`2.TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},`0,`1@)">
            <summary>Sets the stub of MarkovEdgeChainBase`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RandomWalks.Fakes.StubWeightedMarkovEdgeChainBase`2.TryGetSuccessorIEnumerableOfT1T0T1Out">
            <summary>Sets the stub of MarkovEdgeChainBase`2.TryGetSuccessor(IEnumerable`1&lt;!1&gt; edges, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RandomWalks.Fakes.StubWeightedMarkovEdgeChainBase`2.TryGetSuccessorIImplicitGraphOfT0T1T0T1Out">
            <summary>Sets the stub of MarkovEdgeChainBase`2.TryGetSuccessor(IImplicitGraph`2&lt;!0,!1&gt; g, !0 u, !1&amp; successor)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.StubWeightedMarkovEdgeChainBase`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.StubWeightedMarkovEdgeChainBase`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.Fakes.StubWeightedMarkovEdgeChainBase`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.#ctor(QuickGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IBidirectionalGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.AppendShortestPathListOfT1IDictionaryOfT0T1T0">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.AppendShortestPath(List`1&lt;!1&gt; path, IDictionary`2&lt;!0,!1&gt; successors, !0 startVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.ComputeMinimumTreeT0IDictionaryOfT0T1OutIDictionaryOfT0DoubleOut">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.ComputeMinimumTree(!0 goal, IDictionary`2&lt;!0,!1&gt;&amp; successors, IDictionary`2&lt;!0,Double&gt;&amp; distances)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.ComputeT0T0">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.Compute(!0 rootVertex, !0 goalVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.ConstructorIAlgorithmComponentIBidirectionalGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.HoffmanPavleyRankedShortestPathAlgorithm`2(IAlgorithmComponent host, IBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; edgeWeights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.ConstructorIBidirectionalGraphOfT0T1FuncOfT1Double">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.HoffmanPavleyRankedShortestPathAlgorithm`2(IBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; edgeWeights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.InternalCompute">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.SetGoalVertexT0">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.SetGoalVertex(!0 goalVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.TryGetGoalVertexT0Out">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.TryGetGoalVertex(!0&amp; goalVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2._ComputeMinimumTreeb__2SReversedEdgeOfT0T1">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.&lt;ComputeMinimumTree&gt;b__2(SReversedEdge`2&lt;!0,!1&gt; e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.AllInstances.AppendShortestPathListOfT1IDictionaryOfT0T1T0">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.AppendShortestPath(List`1&lt;!1&gt; path, IDictionary`2&lt;!0,!1&gt; successors, !0 startVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.AllInstances.ComputeMinimumTreeT0IDictionaryOfT0T1OutIDictionaryOfT0DoubleOut">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.ComputeMinimumTree(!0 goal, IDictionary`2&lt;!0,!1&gt;&amp; successors, IDictionary`2&lt;!0,Double&gt;&amp; distances)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.AllInstances.ComputeT0T0">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.Compute(!0 rootVertex, !0 goalVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.AllInstances.SetGoalVertexT0">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.SetGoalVertex(!0 goalVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.AllInstances.TryGetGoalVertexT0Out">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.TryGetGoalVertex(!0&amp; goalVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimHoffmanPavleyRankedShortestPathAlgorithm`2.AllInstances._ComputeMinimumTreeb__2SReversedEdgeOfT0T1">
            <summary>Sets the shim of HoffmanPavleyRankedShortestPathAlgorithm`2.&lt;ComputeMinimumTree&gt;b__2(SReversedEdge`2&lt;!0,!1&gt; e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3">
            <summary>Shim type of QuickGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.#ctor(QuickGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.Bind(QuickGraph.Algorithms.IAlgorithm{`2})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.AddComputedShortestPathListOfT1">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.AddComputedShortestPath(List`1&lt;!1&gt; path)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.ComputedShortestPathCountGet">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.get_ComputedShortestPathCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.ComputedShortestPathsGet">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.get_ComputedShortestPaths()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.ConstructorIAlgorithmComponentT2IDistanceRelaxer">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.RankedShortestPathAlgorithmBase`3(IAlgorithmComponent host, !2 visitedGraph, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.DistanceRelaxerGet">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.get_DistanceRelaxer()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.Initialize">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.ShortestPathCountGet">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.get_ShortestPathCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.ShortestPathCountSetInt32">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.set_ShortestPathCount(Int32 value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.AllInstances.AddComputedShortestPathListOfT1">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.AddComputedShortestPath(List`1&lt;!1&gt; path)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.AllInstances.ComputedShortestPathCountGet">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.get_ComputedShortestPathCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.AllInstances.ComputedShortestPathsGet">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.get_ComputedShortestPaths()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.AllInstances.DistanceRelaxerGet">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.get_DistanceRelaxer()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.AllInstances.Initialize">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.AllInstances.ShortestPathCountGet">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.get_ShortestPathCount()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.ShimRankedShortestPathAlgorithmBase`3.AllInstances.ShortestPathCountSetInt32">
            <summary>Sets the shim of RankedShortestPathAlgorithmBase`3.set_ShortestPathCount(Int32 value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3">
            <summary>Stub type of QuickGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,`2,QuickGraph.Algorithms.IDistanceRelaxer)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.Clean">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.Clean01">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.Initialize">
            <summary>Sets the stub of RankedShortestPathAlgorithmBase`3.Initialize()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.Initialize01">
            <summary>Sets the stub of RankedShortestPathAlgorithmBase`3.Initialize()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.InitializeStub">
            <summary>Initializes a new instance of type StubRankedShortestPathAlgorithmBase</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.InternalCompute">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.InternalCompute01">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.OnAborted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.OnAbortedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.OnFinished(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.OnFinishedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.OnRootVertexChanged(System.EventArgs)">
            <summary>Sets the stub of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.OnRootVertexChangedEventArgs">
            <summary>Sets the stub of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.OnStarted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.OnStartedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.OnStateChanged(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.OnStateChangedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.TryGetService(System.Type,System.Object@)">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.TryGetServiceTypeObjectOut">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RankedShortestPath.Fakes.StubRankedShortestPathAlgorithmBase`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Ranking.PageRankAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.#ctor(QuickGraph.Algorithms.Ranking.PageRankAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IBidirectionalGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.ConstructorIBidirectionalGraphOfT0T1">
            <summary>Sets the shim of PageRankAlgorithm`2.PageRankAlgorithm`2(IBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.DampingGet">
            <summary>Sets the shim of PageRankAlgorithm`2.get_Damping()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.DampingSetDouble">
            <summary>Sets the shim of PageRankAlgorithm`2.set_Damping(Double value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.GetRanksMean">
            <summary>Sets the shim of PageRankAlgorithm`2.GetRanksMean()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.GetRanksSum">
            <summary>Sets the shim of PageRankAlgorithm`2.GetRanksSum()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.InitializeRanks">
            <summary>Sets the shim of PageRankAlgorithm`2.InitializeRanks()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.InternalCompute">
            <summary>Sets the shim of PageRankAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.MaxIterationGet">
            <summary>Sets the shim of PageRankAlgorithm`2.get_MaxIteration()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.MaxIterationSetInt32">
            <summary>Sets the shim of PageRankAlgorithm`2.set_MaxIteration(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.RanksGet">
            <summary>Sets the shim of PageRankAlgorithm`2.get_Ranks()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.ToleranceGet">
            <summary>Sets the shim of PageRankAlgorithm`2.get_Tolerance()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.ToleranceSetDouble">
            <summary>Sets the shim of PageRankAlgorithm`2.set_Tolerance(Double value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2._InternalComputeb__0T1">
            <summary>Sets the shim of PageRankAlgorithm`2.&lt;InternalCompute&gt;b__0(!1 e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.DampingGet">
            <summary>Sets the shim of PageRankAlgorithm`2.get_Damping()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.DampingSetDouble">
            <summary>Sets the shim of PageRankAlgorithm`2.set_Damping(Double value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.GetRanksMean">
            <summary>Sets the shim of PageRankAlgorithm`2.GetRanksMean()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.GetRanksSum">
            <summary>Sets the shim of PageRankAlgorithm`2.GetRanksSum()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.InitializeRanks">
            <summary>Sets the shim of PageRankAlgorithm`2.InitializeRanks()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of PageRankAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.MaxIterationGet">
            <summary>Sets the shim of PageRankAlgorithm`2.get_MaxIteration()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.MaxIterationSetInt32">
            <summary>Sets the shim of PageRankAlgorithm`2.set_MaxIteration(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.RanksGet">
            <summary>Sets the shim of PageRankAlgorithm`2.get_Ranks()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.ToleranceGet">
            <summary>Sets the shim of PageRankAlgorithm`2.get_Tolerance()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Ranking.Fakes.ShimPageRankAlgorithm`2.AllInstances.ToleranceSetDouble">
            <summary>Sets the shim of PageRankAlgorithm`2.set_Tolerance(Double value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Search.BestFirstFrontierSearchAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Search.BestFirstFrontierSearchAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IBidirectionalIncidenceGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.ConstructorIAlgorithmComponentIBidirectionalIncidenceGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of BestFirstFrontierSearchAlgorithm`2.BestFirstFrontierSearchAlgorithm`2(IAlgorithmComponent host, IBidirectionalIncidenceGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; edgeWeights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.InternalCompute">
            <summary>Sets the shim of BestFirstFrontierSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of BestFirstFrontierSearchAlgorithm`2.OnTreeEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BestFirstFrontierSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BestFirstFrontierSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of BestFirstFrontierSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of BestFirstFrontierSearchAlgorithm`2.OnTreeEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BestFirstFrontierSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBestFirstFrontierSearchAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BestFirstFrontierSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IBidirectionalGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.BackEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.BackEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIBidirectionalGraphOfT0T1IDictionaryOfT0GraphColor">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.BidirectionalDepthFirstSearchAlgorithm`2(IAlgorithmComponent host, IBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,GraphColor&gt; colors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.ConstructorIBidirectionalGraphOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.BidirectionalDepthFirstSearchAlgorithm`2(IBidirectionalGraph`2&lt;!0,!1&gt; g)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.ConstructorIBidirectionalGraphOfT0T1IDictionaryOfT0GraphColor">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.BidirectionalDepthFirstSearchAlgorithm`2(IBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,GraphColor&gt; colors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.GetVertexColorT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.Initialize">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.InternalCompute">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.MaxDepthGet">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.MaxDepthSetInt32">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.OnBackEdgeT1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnBackEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.OnDiscoverVertexT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.OnExamineEdgeT1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.OnFinishVertexT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdgeT1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.OnInitializeVertexT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.OnStartVertexT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.ProcessEdgeInt32T0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.ProcessEdge(Int32 depth, !0 v, !1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.VertexColorsGet">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.VisitT0Int32">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.Visit(!0 u, Int32 depth)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.GetVertexColorT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthGet">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthSetInt32">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.OnBackEdgeT1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnBackEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.OnDiscoverVertexT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.OnExamineEdgeT1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.OnFinishVertexT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.OnForwardOrCrossEdgeT1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.OnInitializeVertexT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.OnStartVertexT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.ProcessEdgeInt32T0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.ProcessEdge(Int32 depth, !0 v, !1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.VertexColorsGet">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBidirectionalDepthFirstSearchAlgorithm`2.AllInstances.VisitT0Int32">
            <summary>Sets the shim of BidirectionalDepthFirstSearchAlgorithm`2.Visit(!0 u, Int32 depth)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Search.BreadthFirstSearchAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IDistanceRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexPredecessorRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.BlackTargetAddEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_BlackTarget(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.BlackTargetRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_BlackTarget(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1IQueueOfT0IDictionaryOfT0GraphColor">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.BreadthFirstSearchAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, IQueue`1&lt;!0&gt; vertexQueue, IDictionary`2&lt;!0,GraphColor&gt; vertexColors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1IQueueOfT0IDictionaryOfT0GraphColorFuncOfIEnumerableOfT1IEnumerableOfT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.BreadthFirstSearchAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, IQueue`1&lt;!0&gt; vertexQueue, IDictionary`2&lt;!0,GraphColor&gt; vertexColors, Func`2&lt;IEnumerable`1&lt;!1&gt;,IEnumerable`1&lt;!1&gt;&gt; outEdgeEnumerator)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.ConstructorIVertexListGraphOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.BreadthFirstSearchAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; g)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.ConstructorIVertexListGraphOfT0T1IQueueOfT0IDictionaryOfT0GraphColor">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.BreadthFirstSearchAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, IQueue`1&lt;!0&gt; vertexQueue, IDictionary`2&lt;!0,GraphColor&gt; vertexColors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.EnqueueRootT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.EnqueueRoot(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.FlushVisitQueue">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.FlushVisitQueue()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.GetVertexColorT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.GrayTargetAddEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_GrayTarget(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.GrayTargetRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_GrayTarget(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.Initialize">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.InternalCompute">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.NonTreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_NonTreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.NonTreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_NonTreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OnBlackTargetT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnBlackTarget(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OnDiscoverVertexT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OnExamineEdgeT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OnExamineVertexT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnExamineVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OnFinishVertexT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OnGrayTargetT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnGrayTarget(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OnInitializeVertexT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OnNonTreeEdgeT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnNonTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OnStartVertexT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.OutEdgeEnumeratorGet">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.get_OutEdgeEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.VertexColorsGet">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.VisitT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.Visit(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2._ctorb__0IEnumerableOfT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.&lt;.ctor&gt;b__0(IEnumerable`1&lt;!1&gt; e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.BlackTargetAddEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_BlackTarget(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.BlackTargetRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_BlackTarget(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.EnqueueRootT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.EnqueueRoot(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.FlushVisitQueue">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.FlushVisitQueue()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.GetVertexColorT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.GrayTargetAddEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_GrayTarget(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.GrayTargetRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_GrayTarget(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.NonTreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_NonTreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.NonTreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_NonTreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OnBlackTargetT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnBlackTarget(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OnDiscoverVertexT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OnExamineEdgeT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OnExamineVertexT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnExamineVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OnFinishVertexT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OnGrayTargetT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnGrayTarget(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OnInitializeVertexT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OnNonTreeEdgeT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnNonTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OnStartVertexT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.OutEdgeEnumeratorGet">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.get_OutEdgeEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.VertexColorsGet">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimBreadthFirstSearchAlgorithm`2.AllInstances.VisitT0">
            <summary>Sets the shim of BreadthFirstSearchAlgorithm`2.Visit(!0 s)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IDistanceRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexPredecessorRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexTimeStamperAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.BackEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.BackEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.DepthFirstSearchAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1IDictionaryOfT0GraphColor">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.DepthFirstSearchAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,GraphColor&gt; colors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1IDictionaryOfT0GraphColorFuncOfIEnumerableOfT1IEnumerableOfT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.DepthFirstSearchAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,GraphColor&gt; colors, Func`2&lt;IEnumerable`1&lt;!1&gt;,IEnumerable`1&lt;!1&gt;&gt; outEdgeEnumerator)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.ConstructorIVertexListGraphOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.DepthFirstSearchAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.ConstructorIVertexListGraphOfT0T1IDictionaryOfT0GraphColor">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.DepthFirstSearchAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,GraphColor&gt; colors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.GetVertexColorT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.Initialize">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.InternalCompute">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.MaxDepthGet">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.MaxDepthSetInt32">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.ObjectInvariant">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.ObjectInvariant()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.OnBackEdgeT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnBackEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.OnDiscoverVertexT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.OnExamineEdgeT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.OnFinishVertexT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdgeT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.OnInitializeVertexT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.OnStartVertexT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.OutEdgeEnumeratorGet">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.get_OutEdgeEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.VertexColorsGet">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.VisitT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.Visit(!0 root)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2._ctorb__0IEnumerableOfT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.&lt;.ctor&gt;b__0(IEnumerable`1&lt;!1&gt; e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2._ctorb__2IEnumerableOfT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.&lt;.ctor&gt;b__2(IEnumerable`1&lt;!1&gt; e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.GetVertexColorT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthGet">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthSetInt32">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.ObjectInvariant">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.ObjectInvariant()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.OnBackEdgeT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnBackEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.OnDiscoverVertexT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.OnExamineEdgeT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.OnFinishVertexT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.OnForwardOrCrossEdgeT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.OnInitializeVertexT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.OnStartVertexT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.OutEdgeEnumeratorGet">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.get_OutEdgeEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.VertexColorsGet">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimDepthFirstSearchAlgorithm`2.AllInstances.VisitT0">
            <summary>Sets the shim of DepthFirstSearchAlgorithm`2.Visit(!0 root)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IEdgeListAndIncidenceGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IEdgeColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IEdgePredecessorRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.BackEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.BackEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIEdgeListAndIncidenceGraphOfT0T1IDictionaryOfT1GraphColor">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.EdgeDepthFirstSearchAlgorithm`2(IAlgorithmComponent host, IEdgeListAndIncidenceGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!1,GraphColor&gt; colors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.ConstructorIEdgeListAndIncidenceGraphOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.EdgeDepthFirstSearchAlgorithm`2(IEdgeListAndIncidenceGraph`2&lt;!0,!1&gt; g)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.ConstructorIEdgeListAndIncidenceGraphOfT0T1IDictionaryOfT1GraphColor">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.EdgeDepthFirstSearchAlgorithm`2(IEdgeListAndIncidenceGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!1,GraphColor&gt; colors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.DiscoverTreeEdgeAddEdgeEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_DiscoverTreeEdge(EdgeEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.DiscoverTreeEdgeRemoveEdgeEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_DiscoverTreeEdge(EdgeEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.EdgeColorsGet">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.get_EdgeColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.FinishEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_FinishEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.FinishEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_FinishEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.Initialize">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.InitializeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_InitializeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.InitializeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_InitializeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.InternalCompute">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.MaxDepthGet">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.MaxDepthSetInt32">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.OnBackEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnBackEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.OnDiscoverTreeEdgeT1T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnDiscoverTreeEdge(!1 e, !1 targetEge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.OnExamineEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.OnFinishEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnFinishEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.OnInitializeEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnInitializeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.OnStartEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnStartEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.OnStartVertexT0">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.StartEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_StartEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.StartEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_StartEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.VisitT1Int32">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.Visit(!1 se, Int32 depth)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.DiscoverTreeEdgeAddEdgeEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_DiscoverTreeEdge(EdgeEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.DiscoverTreeEdgeRemoveEdgeEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_DiscoverTreeEdge(EdgeEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.EdgeColorsGet">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.get_EdgeColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.FinishEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_FinishEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.FinishEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_FinishEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.InitializeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_InitializeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.InitializeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_InitializeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthGet">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthSetInt32">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnBackEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnBackEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnDiscoverTreeEdgeT1T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnDiscoverTreeEdge(!1 e, !1 targetEge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnExamineEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnFinishEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnFinishEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnForwardOrCrossEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnInitializeEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnInitializeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnStartEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnStartEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnStartVertexT0">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.StartEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_StartEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.StartEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_StartEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimEdgeDepthFirstSearchAlgorithm`2.AllInstances.VisitT1Int32">
            <summary>Sets the shim of EdgeDepthFirstSearchAlgorithm`2.Visit(!1 se, Int32 depth)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IIncidenceGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexPredecessorRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexTimeStamperAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.BackEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.BackEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIIncidenceGraphOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.ImplicitDepthFirstSearchAlgorithm`2(IAlgorithmComponent host, IIncidenceGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.ConstructorIIncidenceGraphOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.ImplicitDepthFirstSearchAlgorithm`2(IIncidenceGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.Initialize">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.InternalCompute">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.MaxDepthGet">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.MaxDepthSetInt32">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.OnBackEdgeT1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnBackEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.OnDiscoverVertexT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.OnExamineEdgeT1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.OnFinishVertexT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdgeT1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.OnStartVertexT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.VertexColorsGet">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.VisitT0Int32">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.Visit(!0 u, Int32 depth)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthGet">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthSetInt32">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.OnBackEdgeT1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnBackEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.OnDiscoverVertexT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.OnExamineEdgeT1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.OnFinishVertexT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.OnForwardOrCrossEdgeT1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.OnStartVertexT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.VertexColorsGet">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitDepthFirstSearchAlgorithm`2.AllInstances.VisitT0Int32">
            <summary>Sets the shim of ImplicitDepthFirstSearchAlgorithm`2.Visit(!0 u, Int32 depth)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IIncidenceGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.BackEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.BackEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIIncidenceGraphOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.ImplicitEdgeDepthFirstSearchAlgorithm`2(IAlgorithmComponent host, IIncidenceGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.ConstructorIIncidenceGraphOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.ImplicitEdgeDepthFirstSearchAlgorithm`2(IIncidenceGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.DiscoverTreeEdgeAddEdgeEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_DiscoverTreeEdge(EdgeEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.DiscoverTreeEdgeRemoveEdgeEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_DiscoverTreeEdge(EdgeEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.EdgeColorsGet">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.get_EdgeColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.FinishEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_FinishEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.FinishEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_FinishEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.Initialize">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.InternalCompute">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.MaxDepthGet">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.MaxDepthSetInt32">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.OnBackEdgeT1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnBackEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.OnDiscoverTreeEdgeT1T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnDiscoverTreeEdge(!1 se, !1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.OnFinishEdgeT1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnFinishEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdgeT1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.OnStartEdgeT1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnStartEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.OnStartVertexT0">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.OnTreeEdgeT1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.StartEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_StartEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.StartEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_StartEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.VisitT1Int32">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.Visit(!1 se, Int32 depth)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_BackEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.DiscoverTreeEdgeAddEdgeEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_DiscoverTreeEdge(EdgeEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.DiscoverTreeEdgeRemoveEdgeEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_DiscoverTreeEdge(EdgeEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.EdgeColorsGet">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.get_EdgeColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.FinishEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_FinishEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.FinishEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_FinishEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthGet">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthSetInt32">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnBackEdgeT1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnBackEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnDiscoverTreeEdgeT1T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnDiscoverTreeEdge(!1 se, !1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnFinishEdgeT1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnFinishEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnForwardOrCrossEdgeT1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnStartEdgeT1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnStartEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnStartVertexT0">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.StartEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_StartEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.StartEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_StartEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimImplicitEdgeDepthFirstSearchAlgorithm`2.AllInstances.VisitT1Int32">
            <summary>Sets the shim of ImplicitEdgeDepthFirstSearchAlgorithm`2.Visit(!1 se, Int32 depth)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IUndirectedGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IDistanceRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IUndirectedTreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IUndirectedVertexPredecessorRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.BlackTargetAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_BlackTarget(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.BlackTargetRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_BlackTarget(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIUndirectedGraphOfT0T1IQueueOfT0IDictionaryOfT0GraphColor">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.UndirectedBreadthFirstSearchAlgorithm`2(IAlgorithmComponent host, IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, IQueue`1&lt;!0&gt; vertexQueue, IDictionary`2&lt;!0,GraphColor&gt; vertexColors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.ConstructorIUndirectedGraphOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.UndirectedBreadthFirstSearchAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; g)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.ConstructorIUndirectedGraphOfT0T1IQueueOfT0IDictionaryOfT0GraphColor">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.UndirectedBreadthFirstSearchAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, IQueue`1&lt;!0&gt; vertexQueue, IDictionary`2&lt;!0,GraphColor&gt; vertexColors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.EnqueueRootT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.EnqueueRoot(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.FlushVisitQueue">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.FlushVisitQueue()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.GetVertexColorT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.GrayTargetAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_GrayTarget(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.GrayTargetRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_GrayTarget(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.Initialize">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.InternalCompute">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.NonTreeEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_NonTreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.NonTreeEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_NonTreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.OnBlackTargetT1Boolean">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnBlackTarget(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.OnDiscoverVertexT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.OnExamineEdgeT1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.OnExamineVertexT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnExamineVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.OnFinishVertexT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.OnGrayTargetT1Boolean">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnGrayTarget(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.OnInitializeVertexT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.OnNonTreeEdgeT1Boolean">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnNonTreeEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.OnStartVertexT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.OnTreeEdgeT1Boolean">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnTreeEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.TreeEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.TreeEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.VertexColorsGet">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.VisitT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.Visit(!0 s)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.BlackTargetAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_BlackTarget(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.BlackTargetRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_BlackTarget(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.EnqueueRootT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.EnqueueRoot(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.FlushVisitQueue">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.FlushVisitQueue()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.GetVertexColorT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.GrayTargetAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_GrayTarget(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.GrayTargetRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_GrayTarget(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.NonTreeEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_NonTreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.NonTreeEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_NonTreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.OnBlackTargetT1Boolean">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnBlackTarget(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.OnDiscoverVertexT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.OnExamineEdgeT1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.OnExamineVertexT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnExamineVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.OnFinishVertexT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.OnGrayTargetT1Boolean">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnGrayTarget(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.OnInitializeVertexT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.OnNonTreeEdgeT1Boolean">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnNonTreeEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.OnStartVertexT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.OnTreeEdgeT1Boolean">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.OnTreeEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.TreeEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.add_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.TreeEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.remove_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.VertexColorsGet">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedBreadthFirstSearchAlgorithm`2.AllInstances.VisitT0">
            <summary>Sets the shim of UndirectedBreadthFirstSearchAlgorithm`2.Visit(!0 s)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IUndirectedGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IDistanceRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IUndirectedTreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IUndirectedVertexPredecessorRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexTimeStamperAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AdjacentEdgeEnumeratorGet">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.get_AdjacentEdgeEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.BackEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_BackEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.BackEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_BackEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIUndirectedGraphOfT0T1IDictionaryOfT0GraphColor">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.UndirectedDepthFirstSearchAlgorithm`2(IAlgorithmComponent host, IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,GraphColor&gt; colors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.ConstructorIAlgorithmComponentIUndirectedGraphOfT0T1IDictionaryOfT0GraphColorFuncOfIEnumerableOfT1IEnumerableOfT1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.UndirectedDepthFirstSearchAlgorithm`2(IAlgorithmComponent host, IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,GraphColor&gt; colors, Func`2&lt;IEnumerable`1&lt;!1&gt;,IEnumerable`1&lt;!1&gt;&gt; adjacentEdgeEnumerator)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.ConstructorIUndirectedGraphOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.UndirectedDepthFirstSearchAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.ConstructorIUndirectedGraphOfT0T1IDictionaryOfT0GraphColor">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.UndirectedDepthFirstSearchAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, IDictionary`2&lt;!0,GraphColor&gt; colors)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.ExamineEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_ExamineEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.ExamineEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_ExamineEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.ForwardOrCrossEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.GetVertexColorT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.Initialize">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.InternalCompute">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.MaxDepthGet">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.MaxDepthSetInt32">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.OnBackEdgeT1Boolean">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnBackEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.OnDiscoverVertexT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.OnExamineEdgeT1Boolean">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnExamineEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.OnFinishVertexT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdgeT1Boolean">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.OnInitializeVertexT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.OnStartVertexT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.OnTreeEdgeT1Boolean">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.OnVertexMaxDepthReachedT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnVertexMaxDepthReached(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.TreeEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.TreeEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.VertexColorsGet">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.VertexMaxDepthReachedAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_VertexMaxDepthReached(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.VertexMaxDepthReachedRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_VertexMaxDepthReached(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.VisitT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.Visit(!0 root)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2._ctorb__0IEnumerableOfT1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.&lt;.ctor&gt;b__0(IEnumerable`1&lt;!1&gt; e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.AdjacentEdgeEnumeratorGet">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.get_AdjacentEdgeEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_BackEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.BackEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_BackEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_ExamineEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.ExamineEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_ExamineEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_ForwardOrCrossEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.ForwardOrCrossEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_ForwardOrCrossEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.GetVertexColorT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthGet">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.get_MaxDepth()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.MaxDepthSetInt32">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.OnBackEdgeT1Boolean">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnBackEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.OnDiscoverVertexT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.OnExamineEdgeT1Boolean">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnExamineEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.OnFinishVertexT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.OnForwardOrCrossEdgeT1Boolean">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.OnInitializeVertexT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.OnStartVertexT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.OnTreeEdgeT1Boolean">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnTreeEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.OnVertexMaxDepthReachedT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.OnVertexMaxDepthReached(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.TreeEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.VertexColorsGet">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.VertexMaxDepthReachedAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.add_VertexMaxDepthReached(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.VertexMaxDepthReachedRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.remove_VertexMaxDepthReached(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.Fakes.ShimUndirectedDepthFirstSearchAlgorithm`2.AllInstances.VisitT0">
            <summary>Sets the shim of UndirectedDepthFirstSearchAlgorithm`2.Visit(!0 root)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmComponent">
            <summary>Stub type of QuickGraph.Algorithms.Services.IAlgorithmComponent</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmComponent.#ctor">
            <summary>Initializes a new instance of type StubIAlgorithmComponent</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmComponent.GetServiceOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets stubs of GetService()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmComponent.qg::QuickGraph#Algorithms#Services#IAlgorithmComponent#GetService``1">
            <summary>Sets the stub of IAlgorithmComponent.GetService()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmComponent.qg::QuickGraph#Algorithms#Services#IAlgorithmComponent#TryGetService``1(``0@)">
            <summary>Sets the stub of IAlgorithmComponent.TryGetService(!!0&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmComponent.ServicesGet">
            <summary>Sets the stub of IAlgorithmComponent.get_Services()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmComponent.TryGetServiceOf1M0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``0,System.Boolean})">
            <summary>Sets stubs of TryGetService(!!0&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmComponent.qg::QuickGraph#Algorithms#Services#IAlgorithmComponent#Services">
            <summary>Sets the stub of IAlgorithmComponent.get_Services()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmServices">
            <summary>Stub type of QuickGraph.Algorithms.Services.IAlgorithmServices</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmServices.#ctor">
            <summary>Initializes a new instance of type StubIAlgorithmServices</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmServices.CancelManagerGet">
            <summary>Sets the stub of IAlgorithmServices.get_CancelManager()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Services.Fakes.StubIAlgorithmServices.qg::QuickGraph#Algorithms#Services#IAlgorithmServices#CancelManager">
            <summary>Sets the stub of IAlgorithmServices.get_CancelManager()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Services.Fakes.StubICancelManager">
            <summary>Stub type of QuickGraph.Algorithms.Services.ICancelManager</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.Fakes.StubICancelManager.#ctor">
            <summary>Initializes a new instance of type StubICancelManager</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Services.Fakes.StubICancelManager.Cancel">
            <summary>Sets the stub of ICancelManager.Cancel()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Services.Fakes.StubICancelManager.IsCancellingGet">
            <summary>Sets the stub of ICancelManager.get_IsCancelling()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.Fakes.StubICancelManager.qg::QuickGraph#Algorithms#Services#ICancelManager#Cancel">
            <summary>Sets the stub of ICancelManager.Cancel()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.Fakes.StubICancelManager.qg::QuickGraph#Algorithms#Services#ICancelManager#ResetCancel">
            <summary>Sets the stub of ICancelManager.ResetCancel()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.Services.Fakes.StubICancelManager.ResetCancel">
            <summary>Sets the stub of ICancelManager.ResetCancel()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Services.Fakes.StubICancelManager.qg::QuickGraph#Algorithms#Services#ICancelManager#IsCancelling">
            <summary>Sets the stub of ICancelManager.get_IsCancelling()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Services.Fakes.StubIService">
            <summary>Stub type of QuickGraph.Algorithms.Services.IService</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.Fakes.StubIService.#ctor">
            <summary>Initializes a new instance of type StubIService</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.#ctor(QuickGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IDistanceRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexPredecessorRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.ComputeFromRootT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.ComputeFromRoot(!0 rootVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.ComputeNoInitT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.ComputeNoInit(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1FuncOfT1DoubleFuncOfT0DoubleIDistanceRelaxer">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.AStarShortestPathAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, Func`2&lt;!0,Double&gt; costHeuristic, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.ConstructorIVertexListGraphOfT0T1FuncOfT1DoubleFuncOfT0Double">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.AStarShortestPathAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, Func`2&lt;!0,Double&gt; costHeuristic)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.ConstructorIVertexListGraphOfT0T1FuncOfT1DoubleFuncOfT0DoubleIDistanceRelaxer">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.AStarShortestPathAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, Func`2&lt;!0,Double&gt; costHeuristic, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.CostHeuristicGet">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.get_CostHeuristic()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.EdgeNotRelaxedAddEdgeActionOfT0T1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.EdgeNotRelaxedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.Initialize">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.InternalBlackTargetT1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.InternalBlackTarget(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.InternalCompute">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.InternalExamineEdgeT1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.InternalExamineEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.InternalGrayTargetT1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.InternalGrayTarget(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.InternalTreeEdgeT1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.InternalTreeEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.OnEdgeNotRelaxedT1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.OnEdgeNotRelaxed(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.ComputeFromRootT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.ComputeFromRoot(!0 rootVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.ComputeNoInitT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.ComputeNoInit(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.CostHeuristicGet">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.get_CostHeuristic()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.EdgeNotRelaxedAddEdgeActionOfT0T1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.EdgeNotRelaxedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.InternalBlackTargetT1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.InternalBlackTarget(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.InternalExamineEdgeT1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.InternalExamineEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.InternalGrayTargetT1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.InternalGrayTarget(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.InternalTreeEdgeT1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.InternalTreeEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.OnEdgeNotRelaxedT1">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.OnEdgeNotRelaxed(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimAStarShortestPathAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of AStarShortestPathAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.#ctor(QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexAndEdgeListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.ConstructorIAlgorithmComponentIVertexAndEdgeListGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.BellmanFordShortestPathAlgorithm`2(IAlgorithmComponent host, IVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.ConstructorIVertexAndEdgeListGraphOfT0T1FuncOfT1Double">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.BellmanFordShortestPathAlgorithm`2(IVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.ConstructorIVertexAndEdgeListGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.BellmanFordShortestPathAlgorithm`2(IVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.EdgeMinimizedAddEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.add_EdgeMinimized(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.EdgeMinimizedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.remove_EdgeMinimized(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.EdgeNotMinimizedAddEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.add_EdgeNotMinimized(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.EdgeNotMinimizedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.remove_EdgeNotMinimized(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.EdgeNotRelaxedAddEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.add_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.EdgeNotRelaxedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.remove_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.FoundNegativeCycleGet">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.get_FoundNegativeCycle()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.Initialize">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.InternalCompute">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.OnEdgeMinimizedT1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.OnEdgeMinimized(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.OnEdgeNotMinimizedT1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.OnEdgeNotMinimized(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.OnEdgeNotRelaxedT1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.OnEdgeNotRelaxed(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.OnExamineEdgeT1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.OnInitializeVertexT0">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.PredecessorsGet">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.get_Predecessors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.EdgeMinimizedAddEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.add_EdgeMinimized(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.EdgeMinimizedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.remove_EdgeMinimized(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.EdgeNotMinimizedAddEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.add_EdgeNotMinimized(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.EdgeNotMinimizedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.remove_EdgeNotMinimized(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.EdgeNotRelaxedAddEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.add_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.EdgeNotRelaxedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.remove_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.FoundNegativeCycleGet">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.get_FoundNegativeCycle()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.OnEdgeMinimizedT1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.OnEdgeMinimized(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.OnEdgeNotMinimizedT1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.OnEdgeNotMinimized(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.OnEdgeNotRelaxedT1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.OnEdgeNotRelaxed(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.OnExamineEdgeT1">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.OnInitializeVertexT0">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimBellmanFordShortestPathAlgorithm`2.AllInstances.PredecessorsGet">
            <summary>Sets the shim of BellmanFordShortestPathAlgorithm`2.get_Predecessors()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.#ctor(QuickGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IDistanceRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexPredecessorRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.ComputeNoInitT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.ComputeNoInit(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.DagShortestPathAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; g, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.ConstructorIVertexListGraphOfT0T1FuncOfT1Double">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.DagShortestPathAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; g, Func`2&lt;!1,Double&gt; weights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.ConstructorIVertexListGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.DagShortestPathAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; g, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.EdgeNotRelaxedAddEdgeActionOfT0T1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.EdgeNotRelaxedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.Initialize">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.InternalCompute">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.OnDiscoverVertexT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.OnEdgeNotRelaxedT1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnEdgeNotRelaxed(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.OnExamineEdgeT1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.OnExamineVertexT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnExamineVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.OnFinishVertexT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.OnInitializeVertexT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.OnStartVertexT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.ComputeNoInitT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.ComputeNoInit(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.EdgeNotRelaxedAddEdgeActionOfT0T1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.EdgeNotRelaxedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.OnDiscoverVertexT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnDiscoverVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.OnEdgeNotRelaxedT1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnEdgeNotRelaxed(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.OnExamineEdgeT1">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnExamineEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.OnExamineVertexT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnExamineVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.OnFinishVertexT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnFinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.OnInitializeVertexT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnInitializeVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.OnStartVertexT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.OnStartVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDagShortestPathAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DagShortestPathAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.#ctor(QuickGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IDistanceRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexPredecessorRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AssertHeap">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.AssertHeap()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.ComputeFromRootT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.ComputeFromRoot(!0 rootVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.ComputeNoInitT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.ComputeNoInit(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.ConstructorIAlgorithmComponentIVertexListGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.DijkstraShortestPathAlgorithm`2(IAlgorithmComponent host, IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.ConstructorIVertexListGraphOfT0T1FuncOfT1Double">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.DijkstraShortestPathAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.ConstructorIVertexListGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.DijkstraShortestPathAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.EdgeNotRelaxedAddEdgeActionOfT0T1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.EdgeNotRelaxedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.Initialize">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.InternalCompute">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.InternalExamineEdgeT1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.InternalExamineEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.InternalGrayTargetT1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.InternalGrayTarget(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.InternalTreeEdgeT1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.InternalTreeEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.OnEdgeNotRelaxedT1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.OnEdgeNotRelaxed(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.AssertHeap">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.AssertHeap()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.ComputeFromRootT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.ComputeFromRoot(!0 rootVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.ComputeNoInitT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.ComputeNoInit(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.EdgeNotRelaxedAddEdgeActionOfT0T1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.EdgeNotRelaxedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_EdgeNotRelaxed(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.InternalExamineEdgeT1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.InternalExamineEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.InternalGrayTargetT1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.InternalGrayTarget(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.InternalTreeEdgeT1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.InternalTreeEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.OnEdgeNotRelaxedT1">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.OnEdgeNotRelaxed(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimDijkstraShortestPathAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of DijkstraShortestPathAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.#ctor(QuickGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexAndEdgeListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.ConstructorIAlgorithmComponentIVertexAndEdgeListGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.FloydWarshallAllShortestPathAlgorithm`2(IAlgorithmComponent host, IVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.ConstructorIVertexAndEdgeListGraphOfT0T1FuncOfT1Double">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.FloydWarshallAllShortestPathAlgorithm`2(IVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.ConstructorIVertexAndEdgeListGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.FloydWarshallAllShortestPathAlgorithm`2(IVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.DumpTextWriter">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.Dump(TextWriter writer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.InternalCompute">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.TryGetDistanceT0T0DoubleOut">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.TryGetDistance(!0 source, !0 target, Double&amp; cost)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.TryGetPathT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.TryGetPath(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; path)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.AllInstances.DumpTextWriter">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.Dump(TextWriter writer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.AllInstances.TryGetDistanceT0T0DoubleOut">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.TryGetDistance(!0 source, !0 target, Double&amp; cost)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimFloydWarshallAllShortestPathAlgorithm`2.AllInstances.TryGetPathT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of FloydWarshallAllShortestPathAlgorithm`2.TryGetPath(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; path)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3">
            <summary>Shim type of QuickGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.#ctor(QuickGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.Bind(QuickGraph.Algorithms.IAlgorithm{`2})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.Bind(QuickGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.ConstructorIAlgorithmComponentT2FuncOfT1Double">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.ShortestPathAlgorithmBase`3(IAlgorithmComponent host, !2 visitedGraph, Func`2&lt;!1,Double&gt; weights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.ConstructorIAlgorithmComponentT2FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.ShortestPathAlgorithmBase`3(IAlgorithmComponent host, !2 visitedGraph, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.DistanceRelaxerGet">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.get_DistanceRelaxer()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.DistancesGet">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.get_Distances()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.DistancesIndexGetter">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.DistancesIndexGetter()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.GetVertexColorT0">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.Initialize">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.OnTreeEdgeT1">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.RelaxT1">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.Relax(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.TryGetDistanceT0DoubleOut">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.TryGetDistance(!0 vertex, Double&amp; distance)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.VertexColorsGet">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.WeightsGet">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.get_Weights()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.DistanceRelaxerGet">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.get_DistanceRelaxer()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.DistancesGet">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.get_Distances()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.DistancesIndexGetter">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.DistancesIndexGetter()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.GetVertexColorT0">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.Initialize">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.OnTreeEdgeT1">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.RelaxT1">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.Relax(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.TreeEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.add_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.TreeEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.remove_TreeEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.TryGetDistanceT0DoubleOut">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.TryGetDistance(!0 vertex, Double&amp; distance)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.VertexColorsGet">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimShortestPathAlgorithmBase`3.AllInstances.WeightsGet">
            <summary>Sets the shim of ShortestPathAlgorithmBase`3.get_Weights()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.#ctor(QuickGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IUndirectedGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IDistanceRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IUndirectedTreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IUndirectedVertexPredecessorRecorderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.IVertexColorizerAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AssertHeap">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.AssertHeap()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.ComputeFromRootT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.ComputeFromRoot(!0 rootVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.ComputeNoInitT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.ComputeNoInit(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.ConstructorIAlgorithmComponentIUndirectedGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.UndirectedDijkstraShortestPathAlgorithm`2(IAlgorithmComponent host, IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.ConstructorIUndirectedGraphOfT0T1FuncOfT1Double">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.UndirectedDijkstraShortestPathAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.ConstructorIUndirectedGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.UndirectedDijkstraShortestPathAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.EdgeNotRelaxedAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_EdgeNotRelaxed(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.EdgeNotRelaxedRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_EdgeNotRelaxed(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.Initialize">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.InternalCompute">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.InternalGrayTargetObjectUndirectedEdgeEventArgsOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.InternalGrayTarget(Object sender, UndirectedEdgeEventArgs`2&lt;!0,!1&gt; args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.InternalTreeEdgeObjectUndirectedEdgeEventArgsOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.InternalTreeEdge(Object sender, UndirectedEdgeEventArgs`2&lt;!0,!1&gt; args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.OnEdgeNotRelaxedT1Boolean">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.OnEdgeNotRelaxed(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.AssertHeap">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.AssertHeap()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.ComputeFromRootT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.ComputeFromRoot(!0 rootVertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.ComputeNoInitT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.ComputeNoInit(!0 s)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.DiscoverVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.DiscoverVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_DiscoverVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.EdgeNotRelaxedAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_EdgeNotRelaxed(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.EdgeNotRelaxedRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_EdgeNotRelaxed(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.ExamineEdgeAddEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.ExamineEdgeRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_ExamineEdge(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.ExamineVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.ExamineVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_ExamineVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.FinishVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.FinishVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_FinishVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.Initialize">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.InitializeVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.InitializeVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_InitializeVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.InternalGrayTargetObjectUndirectedEdgeEventArgsOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.InternalGrayTarget(Object sender, UndirectedEdgeEventArgs`2&lt;!0,!1&gt; args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.InternalTreeEdgeObjectUndirectedEdgeEventArgsOfT0T1">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.InternalTreeEdge(Object sender, UndirectedEdgeEventArgs`2&lt;!0,!1&gt; args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.OnEdgeNotRelaxedT1Boolean">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.OnEdgeNotRelaxed(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.StartVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.add_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedDijkstraShortestPathAlgorithm`2.AllInstances.StartVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedDijkstraShortestPathAlgorithm`2.remove_StartVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2">
            <summary>Shim type of QuickGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.#ctor(QuickGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IUndirectedGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.Bind(QuickGraph.Algorithms.IUndirectedTreeBuilderAlgorithm{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.ConstructorIAlgorithmComponentIUndirectedGraphOfT0T1FuncOfT1Double">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.UndirectedShortestPathAlgorithmBase`2(IAlgorithmComponent host, IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.ConstructorIAlgorithmComponentIUndirectedGraphOfT0T1FuncOfT1DoubleIDistanceRelaxer">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.UndirectedShortestPathAlgorithmBase`2(IAlgorithmComponent host, IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph, Func`2&lt;!1,Double&gt; weights, IDistanceRelaxer distanceRelaxer)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.DistanceRelaxerGet">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.get_DistanceRelaxer()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.DistancesGet">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.get_Distances()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.DistancesIndexGetter">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.DistancesIndexGetter()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.GetVertexColorT0">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.Initialize">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.OnTreeEdgeT1Boolean">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.OnTreeEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.RelaxT1T0T0">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.Relax(!1 e, !0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.TreeEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.add_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.TreeEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.remove_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.TryGetDistanceT0DoubleOut">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.TryGetDistance(!0 vertex, Double&amp; distance)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.VertexColorsGet">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.WeightsGet">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.get_Weights()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.DistanceRelaxerGet">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.get_DistanceRelaxer()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.DistancesGet">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.get_Distances()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.DistancesIndexGetter">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.DistancesIndexGetter()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.GetVertexColorT0">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.GetVertexColor(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.Initialize">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.Initialize()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.OnTreeEdgeT1Boolean">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.OnTreeEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.RelaxT1T0T0">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.Relax(!1 e, !0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.TreeEdgeAddUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.add_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.TreeEdgeRemoveUndirectedEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.remove_TreeEdge(UndirectedEdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.TryGetDistanceT0DoubleOut">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.TryGetDistance(!0 vertex, Double&amp; distance)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.VertexColorsGet">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.get_VertexColors()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.ShimUndirectedShortestPathAlgorithmBase`2.AllInstances.WeightsGet">
            <summary>Sets the shim of UndirectedShortestPathAlgorithmBase`2.get_Weights()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2">
            <summary>Stub type of QuickGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.#ctor(QuickGraph.IVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.#ctor(QuickGraph.IVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double},QuickGraph.Algorithms.IDistanceRelaxer)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double},QuickGraph.Algorithms.IDistanceRelaxer)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.Clean">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.Clean01">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.Initialize">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.Initialize01">
            <summary>Sets the stub of AlgorithmBase`1.Initialize()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.InitializeStub">
            <summary>Initializes a new instance of type StubFloydWarshallAllShortestPathAlgorithm</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.InternalCompute">
            <summary>Sets the stub of FloydWarshallAllShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.InternalCompute01">
            <summary>Sets the stub of FloydWarshallAllShortestPathAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.OnAborted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.OnAbortedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.OnFinished(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.OnFinishedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.OnStarted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.OnStartedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.OnStateChanged(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.OnStateChangedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.TryGetService(System.Type,System.Object@)">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.TryGetServiceTypeObjectOut">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.StubFloydWarshallAllShortestPathAlgorithm`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3">
            <summary>Stub type of QuickGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,`2,System.Func{`1,System.Double})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,`2,System.Func{`1,System.Double},QuickGraph.Algorithms.IDistanceRelaxer)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.Clean">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.Clean01">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.Initialize">
            <summary>Sets the stub of ShortestPathAlgorithmBase`3.Initialize()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.Initialize01">
            <summary>Sets the stub of ShortestPathAlgorithmBase`3.Initialize()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.InitializeStub">
            <summary>Initializes a new instance of type StubShortestPathAlgorithmBase</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.InternalCompute">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.InternalCompute01">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnAborted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnAbortedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnFinished(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnFinishedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnRootVertexChanged(System.EventArgs)">
            <summary>Sets the stub of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnRootVertexChangedEventArgs">
            <summary>Sets the stub of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnStarted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnStartedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnStateChanged(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnStateChangedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnTreeEdge(`1)">
            <summary>Sets the stub of ShortestPathAlgorithmBase`3.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.OnTreeEdgeT1">
            <summary>Sets the stub of ShortestPathAlgorithmBase`3.OnTreeEdge(!1 e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.TryGetService(System.Type,System.Object@)">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.TryGetServiceTypeObjectOut">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.StubShortestPathAlgorithmBase`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2">
            <summary>Stub type of QuickGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double},QuickGraph.Algorithms.IDistanceRelaxer)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.Clean">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.Clean01">
            <summary>Sets the stub of AlgorithmBase`1.Clean()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.Initialize">
            <summary>Sets the stub of UndirectedShortestPathAlgorithmBase`2.Initialize()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.Initialize01">
            <summary>Sets the stub of UndirectedShortestPathAlgorithmBase`2.Initialize()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.InitializeStub">
            <summary>Initializes a new instance of type StubUndirectedShortestPathAlgorithmBase</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.InternalCompute">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.InternalCompute01">
            <summary>Sets the stub of AlgorithmBase`1.InternalCompute()</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnAborted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnAbortedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnAborted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnFinished(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnFinishedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnFinished(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnRootVertexChanged(System.EventArgs)">
            <summary>Sets the stub of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnRootVertexChangedEventArgs">
            <summary>Sets the stub of RootedAlgorithmBase`2.OnRootVertexChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnStarted(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnStartedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStarted(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnStateChanged(System.EventArgs)">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnStateChangedEventArgs">
            <summary>Sets the stub of AlgorithmBase`1.OnStateChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnTreeEdge(`1,System.Boolean)">
            <summary>Sets the stub of UndirectedShortestPathAlgorithmBase`2.OnTreeEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.OnTreeEdgeT1Boolean">
            <summary>Sets the stub of UndirectedShortestPathAlgorithmBase`2.OnTreeEdge(!1 e, Boolean reversed)</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.TryGetService(System.Type,System.Object@)">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.TryGetServiceTypeObjectOut">
            <summary>Sets the stub of AlgorithmBase`1.TryGetService(Type serviceType, Object&amp; service)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.Fakes.StubUndirectedShortestPathAlgorithmBase`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.TopologicalSort.SourceFirstTopologicalSortAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.#ctor(QuickGraph.Algorithms.TopologicalSort.SourceFirstTopologicalSortAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexAndEdgeListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AddVertexAddVertexActionOfT0">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.add_AddVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AddVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.remove_AddVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.ComputeIListOfT0">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.Compute(IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.ConstructorIVertexAndEdgeListGraphOfT0T1">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.SourceFirstTopologicalSortAlgorithm`2(IVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.HeapGet">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.get_Heap()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.InDegreesGet">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.get_InDegrees()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.InitializeInDegrees">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.InitializeInDegrees()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.InternalCompute">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.OnAddVertexT0">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.OnAddVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.SortedVerticesGet">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.get_SortedVertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2._ctorb__0T0">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.&lt;.ctor&gt;b__0(!0 e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances.AddVertexAddVertexActionOfT0">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.add_AddVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances.AddVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.remove_AddVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances.ComputeIListOfT0">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.Compute(IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances.HeapGet">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.get_Heap()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances.InDegreesGet">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.get_InDegrees()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances.InitializeInDegrees">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.InitializeInDegrees()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances.OnAddVertexT0">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.OnAddVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances.SortedVerticesGet">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.get_SortedVertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimSourceFirstTopologicalSortAlgorithm`2.AllInstances._ctorb__0T0">
            <summary>Sets the shim of SourceFirstTopologicalSortAlgorithm`2.&lt;.ctor&gt;b__0(!0 e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.TopologicalSort.TopologicalSortAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.#ctor(QuickGraph.Algorithms.TopologicalSort.TopologicalSortAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IVertexListGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.AllowCyclicGraphGet">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.get_AllowCyclicGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.BackEdgeT1">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.BackEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.ComputeIListOfT0">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.Compute(IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.ConstructorIVertexListGraphOfT0T1">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.TopologicalSortAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; g)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.ConstructorIVertexListGraphOfT0T1IListOfT0">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.TopologicalSortAlgorithm`2(IVertexListGraph`2&lt;!0,!1&gt; g, IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.FinishVertexT0">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.FinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.InternalCompute">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.SortedVerticesGet">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.get_SortedVertices()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.AllInstances.AllowCyclicGraphGet">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.get_AllowCyclicGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.AllInstances.BackEdgeT1">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.BackEdge(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.AllInstances.ComputeIListOfT0">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.Compute(IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.AllInstances.FinishVertexT0">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.FinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimTopologicalSortAlgorithm`2.AllInstances.SortedVerticesGet">
            <summary>Sets the shim of TopologicalSortAlgorithm`2.get_SortedVertices()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.#ctor(QuickGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IUndirectedGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AddVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.add_AddVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AddVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.remove_AddVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllowCyclicGraphGet">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.get_AllowCyclicGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllowCyclicGraphSetBoolean">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.set_AllowCyclicGraph(Boolean value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.ComputeIListOfT0">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.Compute(IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.ConstructorIUndirectedGraphOfT0T1">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.UndirectedFirstTopologicalSortAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.DegreesGet">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.get_Degrees()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.HeapGet">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.get_Heap()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.InitializeInDegrees">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.InitializeInDegrees()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.InternalCompute">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.OnAddVertexT0">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.OnAddVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.SortedVerticesGet">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.get_SortedVertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2._ctorb__0T0">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.&lt;.ctor&gt;b__0(!0 e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.AddVertexAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.add_AddVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.AddVertexRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.remove_AddVertex(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.AllowCyclicGraphGet">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.get_AllowCyclicGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.AllowCyclicGraphSetBoolean">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.set_AllowCyclicGraph(Boolean value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.ComputeIListOfT0">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.Compute(IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.DegreesGet">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.get_Degrees()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.HeapGet">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.get_Heap()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.InitializeInDegrees">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.InitializeInDegrees()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.OnAddVertexT0">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.OnAddVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances.SortedVerticesGet">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.get_SortedVertices()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedFirstTopologicalSortAlgorithm`2.AllInstances._ctorb__0T0">
            <summary>Sets the shim of UndirectedFirstTopologicalSortAlgorithm`2.&lt;.ctor&gt;b__0(!0 e)</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2">
            <summary>Shim type of QuickGraph.Algorithms.TopologicalSort.UndirectedTopologicalSortAlgorithm`2</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.#ctor(QuickGraph.Algorithms.TopologicalSort.UndirectedTopologicalSortAlgorithm{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.IComputation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.IAlgorithm{QuickGraph.IUndirectedGraph{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.Bind(QuickGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.AllowCyclicGraphGet">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.get_AllowCyclicGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.AllowCyclicGraphSetBoolean">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.set_AllowCyclicGraph(Boolean value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.BackEdgeObjectUndirectedEdgeEventArgsOfT0T1">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.BackEdge(Object sender, UndirectedEdgeEventArgs`2&lt;!0,!1&gt; a)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.ComputeIListOfT0">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.Compute(IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.ConstructorIUndirectedGraphOfT0T1">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.UndirectedTopologicalSortAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; g)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.ConstructorIUndirectedGraphOfT0T1IListOfT0">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.UndirectedTopologicalSortAlgorithm`2(IUndirectedGraph`2&lt;!0,!1&gt; g, IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.FinishVertexT0">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.FinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.InternalCompute">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.SortedVerticesGet">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.get_SortedVertices()</summary>
        </member>
        <member name="T:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.AllInstances.AllowCyclicGraphGet">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.get_AllowCyclicGraph()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.AllInstances.AllowCyclicGraphSetBoolean">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.set_AllowCyclicGraph(Boolean value)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.AllInstances.BackEdgeObjectUndirectedEdgeEventArgsOfT0T1">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.BackEdge(Object sender, UndirectedEdgeEventArgs`2&lt;!0,!1&gt; a)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.AllInstances.ComputeIListOfT0">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.Compute(IList`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.AllInstances.FinishVertexT0">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.FinishVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.AllInstances.InternalCompute">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.InternalCompute()</summary>
        </member>
        <member name="P:QuickGraph.Algorithms.TopologicalSort.Fakes.ShimUndirectedTopologicalSortAlgorithm`2.AllInstances.SortedVerticesGet">
            <summary>Sets the shim of UndirectedTopologicalSortAlgorithm`2.get_SortedVertices()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimBinaryHeap`2">
            <summary>Shim type of QuickGraph.Collections.BinaryHeap`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.#ctor(QuickGraph.Collections.BinaryHeap{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AddT0T1">
            <summary>Sets the shim of BinaryHeap`2.Add(!0 priority, !1 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.CapacityGet">
            <summary>Sets the shim of BinaryHeap`2.get_Capacity()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.Constructor">
            <summary>Sets the shim of BinaryHeap`2.BinaryHeap`2()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.ConstructorFuncOfT0T0Int32">
            <summary>Sets the shim of BinaryHeap`2.BinaryHeap`2(Func`3&lt;!0,!0,Int32&gt; priorityComparison)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.ConstructorInt32FuncOfT0T0Int32">
            <summary>Sets the shim of BinaryHeap`2.BinaryHeap`2(Int32 capacity, Func`3&lt;!0,!0,Int32&gt; priorityComparison)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.CountGet">
            <summary>Sets the shim of BinaryHeap`2.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.GetEnumerator">
            <summary>Sets the shim of BinaryHeap`2.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.IndexOfT1">
            <summary>Sets the shim of BinaryHeap`2.IndexOf(!1 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.LessInt32Int32">
            <summary>Sets the shim of BinaryHeap`2.Less(Int32 i, Int32 j)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.MinHeapifyDownInt32">
            <summary>Sets the shim of BinaryHeap`2.MinHeapifyDown(Int32 start)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.MinHeapifyUpInt32">
            <summary>Sets the shim of BinaryHeap`2.MinHeapifyUp(Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.Minimum">
            <summary>Sets the shim of BinaryHeap`2.Minimum()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.MinimumUpdateT0T1">
            <summary>Sets the shim of BinaryHeap`2.MinimumUpdate(!0 priority, !1 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.PriorityComparisonGet">
            <summary>Sets the shim of BinaryHeap`2.get_PriorityComparison()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.RemoveAtInt32">
            <summary>Sets the shim of BinaryHeap`2.RemoveAt(Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.RemoveMinimum">
            <summary>Sets the shim of BinaryHeap`2.RemoveMinimum()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.ResizeArray">
            <summary>Sets the shim of BinaryHeap`2.ResizeArray()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.SwapInt32Int32">
            <summary>Sets the shim of BinaryHeap`2.Swap(Int32 i, Int32 j)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of BinaryHeap`2.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.ToValueArray">
            <summary>Sets the shim of BinaryHeap`2.ToValueArray()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.UpdateT0T1">
            <summary>Sets the shim of BinaryHeap`2.Update(!0 priority, !1 value)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.AddT0T1">
            <summary>Sets the shim of BinaryHeap`2.Add(!0 priority, !1 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.CapacityGet">
            <summary>Sets the shim of BinaryHeap`2.get_Capacity()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.CountGet">
            <summary>Sets the shim of BinaryHeap`2.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.GetEnumerator">
            <summary>Sets the shim of BinaryHeap`2.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.IndexOfT1">
            <summary>Sets the shim of BinaryHeap`2.IndexOf(!1 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.LessInt32Int32">
            <summary>Sets the shim of BinaryHeap`2.Less(Int32 i, Int32 j)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.MinHeapifyDownInt32">
            <summary>Sets the shim of BinaryHeap`2.MinHeapifyDown(Int32 start)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.MinHeapifyUpInt32">
            <summary>Sets the shim of BinaryHeap`2.MinHeapifyUp(Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.Minimum">
            <summary>Sets the shim of BinaryHeap`2.Minimum()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.MinimumUpdateT0T1">
            <summary>Sets the shim of BinaryHeap`2.MinimumUpdate(!0 priority, !1 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.PriorityComparisonGet">
            <summary>Sets the shim of BinaryHeap`2.get_PriorityComparison()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.RemoveAtInt32">
            <summary>Sets the shim of BinaryHeap`2.RemoveAt(Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.RemoveMinimum">
            <summary>Sets the shim of BinaryHeap`2.RemoveMinimum()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.ResizeArray">
            <summary>Sets the shim of BinaryHeap`2.ResizeArray()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.SwapInt32Int32">
            <summary>Sets the shim of BinaryHeap`2.Swap(Int32 i, Int32 j)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of BinaryHeap`2.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.ToValueArray">
            <summary>Sets the shim of BinaryHeap`2.ToValueArray()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryHeap`2.AllInstances.UpdateT0T1">
            <summary>Sets the shim of BinaryHeap`2.Update(!0 priority, !1 value)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimBinaryQueue`2">
            <summary>Shim type of QuickGraph.Collections.BinaryQueue`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.#ctor(QuickGraph.Collections.BinaryQueue{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.Bind(QuickGraph.Collections.IPriorityQueue{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.Bind(QuickGraph.Collections.IQueue{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.ConstructorFuncOfT0T1">
            <summary>Sets the shim of BinaryQueue`2.BinaryQueue`2(Func`2&lt;!0,!1&gt; distances)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.ConstructorFuncOfT0T1FuncOfT1T1Int32">
            <summary>Sets the shim of BinaryQueue`2.BinaryQueue`2(Func`2&lt;!0,!1&gt; distances, Func`3&lt;!1,!1,Int32&gt; distanceComparison)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.ContainsT0">
            <summary>Sets the shim of BinaryQueue`2.Contains(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.CountGet">
            <summary>Sets the shim of BinaryQueue`2.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.Dequeue">
            <summary>Sets the shim of BinaryQueue`2.Dequeue()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.EnqueueT0">
            <summary>Sets the shim of BinaryQueue`2.Enqueue(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.Peek">
            <summary>Sets the shim of BinaryQueue`2.Peek()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.ToArray">
            <summary>Sets the shim of BinaryQueue`2.ToArray()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.UpdateT0">
            <summary>Sets the shim of BinaryQueue`2.Update(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.AllInstances.ContainsT0">
            <summary>Sets the shim of BinaryQueue`2.Contains(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.AllInstances.CountGet">
            <summary>Sets the shim of BinaryQueue`2.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.AllInstances.Dequeue">
            <summary>Sets the shim of BinaryQueue`2.Dequeue()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.AllInstances.EnqueueT0">
            <summary>Sets the shim of BinaryQueue`2.Enqueue(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.AllInstances.Peek">
            <summary>Sets the shim of BinaryQueue`2.Peek()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.AllInstances.ToArray">
            <summary>Sets the shim of BinaryQueue`2.ToArray()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimBinaryQueue`2.AllInstances.UpdateT0">
            <summary>Sets the shim of BinaryQueue`2.Update(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2">
            <summary>Shim type of QuickGraph.Collections.EdgeEdgeDictionary`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.#ctor(QuickGraph.Collections.EdgeEdgeDictionary{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Bind(System.Collections.IDictionary)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Bind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`1,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`1,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Bind(System.Collections.Generic.IDictionary{`1,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Clone">
            <summary>Sets the shim of EdgeEdgeDictionary`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.Constructor">
            <summary>Sets the shim of EdgeEdgeDictionary`2.EdgeEdgeDictionary`2()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.ConstructorInt32">
            <summary>Sets the shim of EdgeEdgeDictionary`2.EdgeEdgeDictionary`2(Int32 capacity)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeEdgeDictionary`2.AllInstances.Clone">
            <summary>Sets the shim of EdgeEdgeDictionary`2.Clone()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimEdgeList`2">
            <summary>Shim type of QuickGraph.Collections.EdgeList`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.#ctor(QuickGraph.Collections.EdgeList{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.Bind(QuickGraph.Collections.IEdgeList{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.Bind(System.Collections.IList)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.Bind(System.Collections.Generic.ICollection{`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.Bind(System.Collections.Generic.IEnumerable{`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimEdgeList`2.Bind(System.Collections.Generic.IList{`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeList`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeList`2.Clone">
            <summary>Sets the shim of EdgeList`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeList`2.Constructor">
            <summary>Sets the shim of EdgeList`2.EdgeList`2()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeList`2.ConstructorEdgeListOfT0T1">
            <summary>Sets the shim of EdgeList`2.EdgeList`2(EdgeList`2&lt;!0,!1&gt; list)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeList`2.ConstructorInt32">
            <summary>Sets the shim of EdgeList`2.EdgeList`2(Int32 capacity)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeList`2.QuickGraphCollectionsIEdgeListTVertexTEdgeClone">
            <summary>Sets the shim of EdgeList`2.QuickGraph.Collections.IEdgeList&lt;TVertex,TEdge&gt;.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeList`2.QuickGraphCollectionsIEdgeListTVertexTEdgeTrimExcess">
            <summary>Sets the shim of EdgeList`2.QuickGraph.Collections.IEdgeList&lt;TVertex,TEdge&gt;.TrimExcess()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimEdgeList`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeList`2.AllInstances.Clone">
            <summary>Sets the shim of EdgeList`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeList`2.AllInstances.QuickGraphCollectionsIEdgeListTVertexTEdgeClone">
            <summary>Sets the shim of EdgeList`2.QuickGraph.Collections.IEdgeList&lt;TVertex,TEdge&gt;.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimEdgeList`2.AllInstances.QuickGraphCollectionsIEdgeListTVertexTEdgeTrimExcess">
            <summary>Sets the shim of EdgeList`2.QuickGraph.Collections.IEdgeList&lt;TVertex,TEdge&gt;.TrimExcess()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2">
            <summary>Shim type of QuickGraph.Collections.FibonacciHeap`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.#ctor(QuickGraph.Collections.FibonacciHeap{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.MaxOf1IEnumerableOfM0FuncOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Int32})">
            <summary>Sets the shim of FibonacciHeap`2.Max(IEnumerable`1&lt;!!0&gt; values, Func`2&lt;!!0,Int32&gt; converter)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.ChangeKeyFibonacciHeapCellOfT0T1T0">
            <summary>Sets the shim of FibonacciHeap`2.ChangeKey(FibonacciHeapCell`2&lt;!0,!1&gt; node, !0 newKey)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.ChangeKeyInternalFibonacciHeapCellOfT0T1T0Boolean">
            <summary>Sets the shim of FibonacciHeap`2.ChangeKeyInternal(FibonacciHeapCell`2&lt;!0,!1&gt; node, !0 NewKey, Boolean deletingNode)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.CompressHeap">
            <summary>Sets the shim of FibonacciHeap`2.CompressHeap()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.Constructor">
            <summary>Sets the shim of FibonacciHeap`2.FibonacciHeap`2()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.ConstructorHeapDirection">
            <summary>Sets the shim of FibonacciHeap`2.FibonacciHeap`2(HeapDirection Direction)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.ConstructorHeapDirectionFuncOfT0T0Int32">
            <summary>Sets the shim of FibonacciHeap`2.FibonacciHeap`2(HeapDirection Direction, Func`3&lt;!0,!0,Int32&gt; priorityComparison)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.CountGet">
            <summary>Sets the shim of FibonacciHeap`2.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.DeleteFibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeap`2.Delete(FibonacciHeapCell`2&lt;!0,!1&gt; node)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.Dequeue">
            <summary>Sets the shim of FibonacciHeap`2.Dequeue()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.DirectionGet">
            <summary>Sets the shim of FibonacciHeap`2.get_Direction()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.DrawHeap">
            <summary>Sets the shim of FibonacciHeap`2.DrawHeap()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.EnqueueT0T1">
            <summary>Sets the shim of FibonacciHeap`2.Enqueue(!0 Priority, !1 Value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.GetDestructiveEnumerator">
            <summary>Sets the shim of FibonacciHeap`2.GetDestructiveEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.GetEnumerator">
            <summary>Sets the shim of FibonacciHeap`2.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.IsEmptyGet">
            <summary>Sets the shim of FibonacciHeap`2.get_IsEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.MergeFibonacciHeapOfT0T1">
            <summary>Sets the shim of FibonacciHeap`2.Merge(FibonacciHeap`2&lt;!0,!1&gt; other)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.PriorityComparisonGet">
            <summary>Sets the shim of FibonacciHeap`2.get_PriorityComparison()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.ReduceNodesFibonacciHeapCellOfT0T1FibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeap`2.ReduceNodes(FibonacciHeapCell`2&lt;!0,!1&gt; parentNode, FibonacciHeapCell`2&lt;!0,!1&gt; childNode)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of FibonacciHeap`2.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.TopGet">
            <summary>Sets the shim of FibonacciHeap`2.get_Top()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.UpdateNext">
            <summary>Sets the shim of FibonacciHeap`2.UpdateNext()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.UpdateNodesDegreeFibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeap`2.UpdateNodesDegree(FibonacciHeapCell`2&lt;!0,!1&gt; parentNode)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2._UpdateNodesDegreeb__1FibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeap`2.&lt;UpdateNodesDegree&gt;b__1(FibonacciHeapCell`2&lt;!0,!1&gt; x)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.ChangeKeyFibonacciHeapCellOfT0T1T0">
            <summary>Sets the shim of FibonacciHeap`2.ChangeKey(FibonacciHeapCell`2&lt;!0,!1&gt; node, !0 newKey)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.ChangeKeyInternalFibonacciHeapCellOfT0T1T0Boolean">
            <summary>Sets the shim of FibonacciHeap`2.ChangeKeyInternal(FibonacciHeapCell`2&lt;!0,!1&gt; node, !0 NewKey, Boolean deletingNode)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.CompressHeap">
            <summary>Sets the shim of FibonacciHeap`2.CompressHeap()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.CountGet">
            <summary>Sets the shim of FibonacciHeap`2.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.DeleteFibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeap`2.Delete(FibonacciHeapCell`2&lt;!0,!1&gt; node)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.Dequeue">
            <summary>Sets the shim of FibonacciHeap`2.Dequeue()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.DirectionGet">
            <summary>Sets the shim of FibonacciHeap`2.get_Direction()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.DrawHeap">
            <summary>Sets the shim of FibonacciHeap`2.DrawHeap()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.EnqueueT0T1">
            <summary>Sets the shim of FibonacciHeap`2.Enqueue(!0 Priority, !1 Value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.GetDestructiveEnumerator">
            <summary>Sets the shim of FibonacciHeap`2.GetDestructiveEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.GetEnumerator">
            <summary>Sets the shim of FibonacciHeap`2.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.IsEmptyGet">
            <summary>Sets the shim of FibonacciHeap`2.get_IsEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.MergeFibonacciHeapOfT0T1">
            <summary>Sets the shim of FibonacciHeap`2.Merge(FibonacciHeap`2&lt;!0,!1&gt; other)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.PriorityComparisonGet">
            <summary>Sets the shim of FibonacciHeap`2.get_PriorityComparison()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.ReduceNodesFibonacciHeapCellOfT0T1FibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeap`2.ReduceNodes(FibonacciHeapCell`2&lt;!0,!1&gt; parentNode, FibonacciHeapCell`2&lt;!0,!1&gt; childNode)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of FibonacciHeap`2.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.TopGet">
            <summary>Sets the shim of FibonacciHeap`2.get_Top()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.UpdateNext">
            <summary>Sets the shim of FibonacciHeap`2.UpdateNext()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeap`2.AllInstances.UpdateNodesDegreeFibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeap`2.UpdateNodesDegree(FibonacciHeapCell`2&lt;!0,!1&gt; parentNode)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimFibonacciHeapCell`2">
            <summary>Shim type of QuickGraph.Collections.FibonacciHeapCell`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeapCell`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeapCell`2.#ctor(QuickGraph.Collections.FibonacciHeapCell{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeapCell`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeapCell`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapCell`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapCell`2.Constructor">
            <summary>Sets the shim of FibonacciHeapCell`2.FibonacciHeapCell`2()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapCell`2.ToKeyValuePair">
            <summary>Sets the shim of FibonacciHeapCell`2.ToKeyValuePair()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimFibonacciHeapCell`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapCell`2.AllInstances.ToKeyValuePair">
            <summary>Sets the shim of FibonacciHeapCell`2.ToKeyValuePair()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2">
            <summary>Shim type of QuickGraph.Collections.FibonacciHeapLinkedList`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.#ctor(QuickGraph.Collections.FibonacciHeapLinkedList{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.Bind(System.Collections.Generic.IEnumerable{QuickGraph.Collections.FibonacciHeapCell{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.AddLastFibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.AddLast(FibonacciHeapCell`2&lt;!0,!1&gt; node)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.Constructor">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.FibonacciHeapLinkedList`2()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.FirstGet">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.get_First()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.GetEnumerator">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.MergeListsFibonacciHeapLinkedListOfT0T1">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.MergeLists(FibonacciHeapLinkedList`2&lt;!0,!1&gt; list)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.RemoveFibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.Remove(FibonacciHeapCell`2&lt;!0,!1&gt; node)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.AllInstances.AddLastFibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.AddLast(FibonacciHeapCell`2&lt;!0,!1&gt; node)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.AllInstances.FirstGet">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.get_First()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.AllInstances.GetEnumerator">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.AllInstances.MergeListsFibonacciHeapLinkedListOfT0T1">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.MergeLists(FibonacciHeapLinkedList`2&lt;!0,!1&gt; list)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.AllInstances.RemoveFibonacciHeapCellOfT0T1">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.Remove(FibonacciHeapCell`2&lt;!0,!1&gt; node)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciHeapLinkedList`2.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of FibonacciHeapLinkedList`2.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2">
            <summary>Shim type of QuickGraph.Collections.FibonacciQueue`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.#ctor(QuickGraph.Collections.FibonacciQueue{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.Bind(QuickGraph.Collections.IPriorityQueue{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.Bind(QuickGraph.Collections.IQueue{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.ConstructorDictionaryOfT0T1">
            <summary>Sets the shim of FibonacciQueue`2.FibonacciQueue`2(Dictionary`2&lt;!0,!1&gt; values)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.ConstructorDictionaryOfT0T1FuncOfT1T1Int32">
            <summary>Sets the shim of FibonacciQueue`2.FibonacciQueue`2(Dictionary`2&lt;!0,!1&gt; values, Func`3&lt;!1,!1,Int32&gt; distanceComparison)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.ConstructorFuncOfT0T1">
            <summary>Sets the shim of FibonacciQueue`2.FibonacciQueue`2(Func`2&lt;!0,!1&gt; distances)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.ConstructorInt32IEnumerableOfT0FuncOfT0T1">
            <summary>Sets the shim of FibonacciQueue`2.FibonacciQueue`2(Int32 valueCount, IEnumerable`1&lt;!0&gt; values, Func`2&lt;!0,!1&gt; distances)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.ConstructorInt32IEnumerableOfT0FuncOfT0T1FuncOfT1T1Int32">
            <summary>Sets the shim of FibonacciQueue`2.FibonacciQueue`2(Int32 valueCount, IEnumerable`1&lt;!0&gt; values, Func`2&lt;!0,!1&gt; distances, Func`3&lt;!1,!1,Int32&gt; distanceComparison)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.ContainsT0">
            <summary>Sets the shim of FibonacciQueue`2.Contains(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.CountGet">
            <summary>Sets the shim of FibonacciQueue`2.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.Dequeue">
            <summary>Sets the shim of FibonacciQueue`2.Dequeue()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.EnqueueT0">
            <summary>Sets the shim of FibonacciQueue`2.Enqueue(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.Peek">
            <summary>Sets the shim of FibonacciQueue`2.Peek()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.ToArray">
            <summary>Sets the shim of FibonacciQueue`2.ToArray()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.UpdateT0">
            <summary>Sets the shim of FibonacciQueue`2.Update(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.AllInstances.ContainsT0">
            <summary>Sets the shim of FibonacciQueue`2.Contains(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.AllInstances.CountGet">
            <summary>Sets the shim of FibonacciQueue`2.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.AllInstances.Dequeue">
            <summary>Sets the shim of FibonacciQueue`2.Dequeue()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.AllInstances.EnqueueT0">
            <summary>Sets the shim of FibonacciQueue`2.Enqueue(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.AllInstances.Peek">
            <summary>Sets the shim of FibonacciQueue`2.Peek()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.AllInstances.ToArray">
            <summary>Sets the shim of FibonacciQueue`2.ToArray()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimFibonacciQueue`2.AllInstances.UpdateT0">
            <summary>Sets the shim of FibonacciQueue`2.Update(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1">
            <summary>Shim type of QuickGraph.Collections.ForestDisjointSet`1</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.#ctor(QuickGraph.Collections.ForestDisjointSet{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.Bind(QuickGraph.Collections.IDisjointSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.AreInSameSetT0T0">
            <summary>Sets the shim of ForestDisjointSet`1.AreInSameSet(!0 left, !0 right)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.Constructor">
            <summary>Sets the shim of ForestDisjointSet`1.ForestDisjointSet`1()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.ConstructorInt32">
            <summary>Sets the shim of ForestDisjointSet`1.ForestDisjointSet`1(Int32 elementCapacity)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.ContainsT0">
            <summary>Sets the shim of ForestDisjointSet`1.Contains(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.ElementCountGet">
            <summary>Sets the shim of ForestDisjointSet`1.get_ElementCount()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.FindSetT0">
            <summary>Sets the shim of ForestDisjointSet`1.FindSet(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.MakeSetT0">
            <summary>Sets the shim of ForestDisjointSet`1.MakeSet(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.ObjectInvariant">
            <summary>Sets the shim of ForestDisjointSet`1.ObjectInvariant()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.SetCountGet">
            <summary>Sets the shim of ForestDisjointSet`1.get_SetCount()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.UnionT0T0">
            <summary>Sets the shim of ForestDisjointSet`1.Union(!0 left, !0 right)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.AllInstances.AreInSameSetT0T0">
            <summary>Sets the shim of ForestDisjointSet`1.AreInSameSet(!0 left, !0 right)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.AllInstances.ContainsT0">
            <summary>Sets the shim of ForestDisjointSet`1.Contains(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.AllInstances.ElementCountGet">
            <summary>Sets the shim of ForestDisjointSet`1.get_ElementCount()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.AllInstances.FindSetT0">
            <summary>Sets the shim of ForestDisjointSet`1.FindSet(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.AllInstances.MakeSetT0">
            <summary>Sets the shim of ForestDisjointSet`1.MakeSet(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.AllInstances.ObjectInvariant">
            <summary>Sets the shim of ForestDisjointSet`1.ObjectInvariant()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.AllInstances.SetCountGet">
            <summary>Sets the shim of ForestDisjointSet`1.get_SetCount()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimForestDisjointSet`1.AllInstances.UnionT0T0">
            <summary>Sets the shim of ForestDisjointSet`1.Union(!0 left, !0 right)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimQueue`1">
            <summary>Shim type of QuickGraph.Collections.Queue`1</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimQueue`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimQueue`1.#ctor(QuickGraph.Collections.Queue{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimQueue`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimQueue`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimQueue`1.Bind(QuickGraph.Collections.IQueue{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimQueue`1.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimQueue`1.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimQueue`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.Constructor">
            <summary>Sets the shim of Queue`1.Queue`1()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.QuickGraphCollectionsIQueueTContainsT0">
            <summary>Sets the shim of Queue`1.QuickGraph.Collections.IQueue&lt;T&gt;.Contains(!0 )</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.QuickGraphCollectionsIQueueTDequeue">
            <summary>Sets the shim of Queue`1.QuickGraph.Collections.IQueue&lt;T&gt;.Dequeue()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.QuickGraphCollectionsIQueueTEnqueueT0">
            <summary>Sets the shim of Queue`1.QuickGraph.Collections.IQueue&lt;T&gt;.Enqueue(!0 )</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.QuickGraphCollectionsIQueueTPeek">
            <summary>Sets the shim of Queue`1.QuickGraph.Collections.IQueue&lt;T&gt;.Peek()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.QuickGraphCollectionsIQueueTToArray">
            <summary>Sets the shim of Queue`1.QuickGraph.Collections.IQueue&lt;T&gt;.ToArray()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimQueue`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.AllInstances.QuickGraphCollectionsIQueueTContainsT0">
            <summary>Sets the shim of Queue`1.QuickGraph.Collections.IQueue&lt;T&gt;.Contains(!0 )</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.AllInstances.QuickGraphCollectionsIQueueTDequeue">
            <summary>Sets the shim of Queue`1.QuickGraph.Collections.IQueue&lt;T&gt;.Dequeue()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.AllInstances.QuickGraphCollectionsIQueueTEnqueueT0">
            <summary>Sets the shim of Queue`1.QuickGraph.Collections.IQueue&lt;T&gt;.Enqueue(!0 )</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.AllInstances.QuickGraphCollectionsIQueueTPeek">
            <summary>Sets the shim of Queue`1.QuickGraph.Collections.IQueue&lt;T&gt;.Peek()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimQueue`1.AllInstances.QuickGraphCollectionsIQueueTToArray">
            <summary>Sets the shim of Queue`1.QuickGraph.Collections.IQueue&lt;T&gt;.ToArray()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimSoftHeap`2">
            <summary>Shim type of QuickGraph.Collections.SoftHeap`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimSoftHeap`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimSoftHeap`2.#ctor(QuickGraph.Collections.SoftHeap{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimSoftHeap`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimSoftHeap`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimSoftHeap`2.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimSoftHeap`2.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AddT0T1">
            <summary>Sets the shim of SoftHeap`2.Add(!0 key, !1 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.ComparisonGet">
            <summary>Sets the shim of SoftHeap`2.get_Comparison()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.ConstructorDoubleT0">
            <summary>Sets the shim of SoftHeap`2.SoftHeap`2(Double maximumErrorRate, !0 keyMaxValue)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.ConstructorDoubleT0FuncOfT0T0Int32">
            <summary>Sets the shim of SoftHeap`2.SoftHeap`2(Double maximumErrorRate, !0 keyMaxValue, Func`3&lt;!0,!0,Int32&gt; comparison)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.CountGet">
            <summary>Sets the shim of SoftHeap`2.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.DeleteMin">
            <summary>Sets the shim of SoftHeap`2.DeleteMin()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.ErrorRateGet">
            <summary>Sets the shim of SoftHeap`2.get_ErrorRate()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.GetEnumerator">
            <summary>Sets the shim of SoftHeap`2.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.Invariant">
            <summary>Sets the shim of SoftHeap`2.Invariant()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.KeyMaxValueGet">
            <summary>Sets the shim of SoftHeap`2.get_KeyMaxValue()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.MinRankGet">
            <summary>Sets the shim of SoftHeap`2.get_MinRank()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of SoftHeap`2.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances.AddT0T1">
            <summary>Sets the shim of SoftHeap`2.Add(!0 key, !1 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances.ComparisonGet">
            <summary>Sets the shim of SoftHeap`2.get_Comparison()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances.CountGet">
            <summary>Sets the shim of SoftHeap`2.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances.DeleteMin">
            <summary>Sets the shim of SoftHeap`2.DeleteMin()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances.ErrorRateGet">
            <summary>Sets the shim of SoftHeap`2.get_ErrorRate()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances.GetEnumerator">
            <summary>Sets the shim of SoftHeap`2.GetEnumerator()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances.Invariant">
            <summary>Sets the shim of SoftHeap`2.Invariant()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances.KeyMaxValueGet">
            <summary>Sets the shim of SoftHeap`2.get_KeyMaxValue()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances.MinRankGet">
            <summary>Sets the shim of SoftHeap`2.get_MinRank()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimSoftHeap`2.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of SoftHeap`2.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2">
            <summary>Shim type of QuickGraph.Collections.VertexEdgeDictionary`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.#ctor(QuickGraph.Collections.VertexEdgeDictionary{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Bind(QuickGraph.Collections.IVertexEdgeDictionary{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Bind(System.Collections.IDictionary)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Bind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,QuickGraph.Collections.IEdgeList{`0,`1}}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,QuickGraph.Collections.IEdgeList{`0,`1}}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Bind(System.Collections.Generic.IDictionary{`0,QuickGraph.Collections.IEdgeList{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Clone">
            <summary>Sets the shim of VertexEdgeDictionary`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.Constructor">
            <summary>Sets the shim of VertexEdgeDictionary`2.VertexEdgeDictionary`2()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.ConstructorIEqualityComparerOfT0">
            <summary>Sets the shim of VertexEdgeDictionary`2.VertexEdgeDictionary`2(IEqualityComparer`1&lt;!0&gt; vertexComparer)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.ConstructorInt32">
            <summary>Sets the shim of VertexEdgeDictionary`2.VertexEdgeDictionary`2(Int32 capacity)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.ConstructorInt32IEqualityComparerOfT0">
            <summary>Sets the shim of VertexEdgeDictionary`2.VertexEdgeDictionary`2(Int32 capacity, IEqualityComparer`1&lt;!0&gt; vertexComparer)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.QuickGraphCollectionsIVertexEdgeDictionaryTVertexTEdgeClone">
            <summary>Sets the shim of VertexEdgeDictionary`2.QuickGraph.Collections.IVertexEdgeDictionary&lt;TVertex,TEdge&gt;.Clone()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.AllInstances.Clone">
            <summary>Sets the shim of VertexEdgeDictionary`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexEdgeDictionary`2.AllInstances.QuickGraphCollectionsIVertexEdgeDictionaryTVertexTEdgeClone">
            <summary>Sets the shim of VertexEdgeDictionary`2.QuickGraph.Collections.IVertexEdgeDictionary&lt;TVertex,TEdge&gt;.Clone()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimVertexList`1">
            <summary>Shim type of QuickGraph.Collections.VertexList`1</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexList`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexList`1.#ctor(QuickGraph.Collections.VertexList{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexList`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexList`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexList`1.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexList`1.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexList`1.Bind(System.Collections.IList)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexList`1.Bind(System.Collections.Generic.ICollection{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexList`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.ShimVertexList`1.Bind(System.Collections.Generic.IList{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexList`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexList`1.Clone">
            <summary>Sets the shim of VertexList`1.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexList`1.Constructor">
            <summary>Sets the shim of VertexList`1.VertexList`1()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexList`1.ConstructorInt32">
            <summary>Sets the shim of VertexList`1.VertexList`1(Int32 capacity)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexList`1.ConstructorVertexListOfT0">
            <summary>Sets the shim of VertexList`1.VertexList`1(VertexList`1&lt;!0&gt; other)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.ShimVertexList`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.ShimVertexList`1.AllInstances.Clone">
            <summary>Sets the shim of VertexList`1.Clone()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.StubBinaryHeap`2">
            <summary>Stub type of QuickGraph.Collections.BinaryHeap`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubBinaryHeap`2.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubBinaryHeap`2.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubBinaryHeap`2.#ctor(System.Int32,System.Func{`0,`0,System.Int32})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubBinaryHeap`2.InitializeStub">
            <summary>Initializes a new instance of type StubBinaryHeap</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubBinaryHeap`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubBinaryHeap`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubBinaryHeap`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2">
            <summary>Stub type of QuickGraph.Collections.EdgeEdgeDictionary`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2.#ctor(System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2.InitializeStub">
            <summary>Initializes a new instance of type StubEdgeEdgeDictionary</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2.OnDeserialization(System.Object)">
            <summary>Sets the stub of Dictionary`2.OnDeserialization(Object sender)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2.OnDeserializationObject">
            <summary>Sets the stub of Dictionary`2.OnDeserialization(Object sender)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubEdgeEdgeDictionary`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.StubForestDisjointSet`1">
            <summary>Stub type of QuickGraph.Collections.ForestDisjointSet`1</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubForestDisjointSet`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubForestDisjointSet`1.#ctor(System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubForestDisjointSet`1.InitializeStub">
            <summary>Initializes a new instance of type StubForestDisjointSet</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubForestDisjointSet`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubForestDisjointSet`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubForestDisjointSet`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.StubIDisjointSet`1">
            <summary>Stub type of QuickGraph.Collections.IDisjointSet`1</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIDisjointSet`1.#ctor">
            <summary>Initializes a new instance of type StubIDisjointSet</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIDisjointSet`1.AreInSameSetT0T0">
            <summary>Sets the stub of IDisjointSet`1.AreInSameSet(!0 left, !0 right)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIDisjointSet`1.ContainsT0">
            <summary>Sets the stub of IDisjointSet`1.Contains(!0 value)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIDisjointSet`1.ElementCountGet">
            <summary>Sets the stub of IDisjointSet`1.get_ElementCount()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIDisjointSet`1.FindSetT0">
            <summary>Sets the stub of IDisjointSet`1.FindSet(!0 value)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIDisjointSet`1.MakeSetT0">
            <summary>Sets the stub of IDisjointSet`1.MakeSet(!0 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIDisjointSet`1.qg::QuickGraph#Collections#IDisjointSet{T}#AreInSameSet(`0,`0)">
            <summary>Sets the stub of IDisjointSet`1.AreInSameSet(!0 left, !0 right)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIDisjointSet`1.qg::QuickGraph#Collections#IDisjointSet{T}#Contains(`0)">
            <summary>Sets the stub of IDisjointSet`1.Contains(!0 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIDisjointSet`1.qg::QuickGraph#Collections#IDisjointSet{T}#FindSet(`0)">
            <summary>Sets the stub of IDisjointSet`1.FindSet(!0 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIDisjointSet`1.qg::QuickGraph#Collections#IDisjointSet{T}#MakeSet(`0)">
            <summary>Sets the stub of IDisjointSet`1.MakeSet(!0 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIDisjointSet`1.qg::QuickGraph#Collections#IDisjointSet{T}#Union(`0,`0)">
            <summary>Sets the stub of IDisjointSet`1.Union(!0 left, !0 right)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIDisjointSet`1.SetCountGet">
            <summary>Sets the stub of IDisjointSet`1.get_SetCount()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIDisjointSet`1.UnionT0T0">
            <summary>Sets the stub of IDisjointSet`1.Union(!0 left, !0 right)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIDisjointSet`1.qg::QuickGraph#Collections#IDisjointSet{T}#ElementCount">
            <summary>Sets the stub of IDisjointSet`1.get_ElementCount()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIDisjointSet`1.qg::QuickGraph#Collections#IDisjointSet{T}#SetCount">
            <summary>Sets the stub of IDisjointSet`1.get_SetCount()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.StubIEdgeList`2">
            <summary>Stub type of QuickGraph.Collections.IEdgeList`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.#ctor">
            <summary>Initializes a new instance of type StubIEdgeList</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.AddT1">
            <summary>Sets the stub of ICollection`1.Add(!0 item)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.Clear">
            <summary>Sets the stub of ICollection`1.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.Clone">
            <summary>Sets the stub of IEdgeList`2.Clone()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.ContainsT1">
            <summary>Sets the stub of ICollection`1.Contains(!0 item)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.CopyToT1ArrayInt32">
            <summary>Sets the stub of ICollection`1.CopyTo(!0[] array, Int32 arrayIndex)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.CountGet">
            <summary>Sets the stub of ICollection`1.get_Count()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.GetEnumerator01">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.IndexOfT1">
            <summary>Sets the stub of IList`1.IndexOf(!0 item)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.InsertInt32T1">
            <summary>Sets the stub of IList`1.Insert(Int32 index, !0 item)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.IsReadOnlyGet">
            <summary>Sets the stub of ICollection`1.get_IsReadOnly()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.ItemGetInt32">
            <summary>Sets the stub of IList`1.get_Item(Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.ItemSetInt32T1">
            <summary>Sets the stub of IList`1.set_Item(Int32 index, !0 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.qg::QuickGraph#Collections#IEdgeList{TVertex@TEdge}#Clone">
            <summary>Sets the stub of IEdgeList`2.Clone()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.qg::QuickGraph#Collections#IEdgeList{TVertex@TEdge}#TrimExcess">
            <summary>Sets the stub of IEdgeList`2.TrimExcess()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.RemoveAtInt32">
            <summary>Sets the stub of IList`1.RemoveAt(Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.RemoveT1">
            <summary>Sets the stub of ICollection`1.Remove(!0 item)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#ICollection{TEdge}#Add(`1)">
            <summary>Sets the stub of ICollection`1.Add(!0 item)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#ICollection{TEdge}#Clear">
            <summary>Sets the stub of ICollection`1.Clear()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#ICollection{TEdge}#Contains(`1)">
            <summary>Sets the stub of ICollection`1.Contains(!0 item)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#ICollection{TEdge}#CopyTo(`1[],System.Int32)">
            <summary>Sets the stub of ICollection`1.CopyTo(!0[] array, Int32 arrayIndex)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#ICollection{TEdge}#Remove(`1)">
            <summary>Sets the stub of ICollection`1.Remove(!0 item)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#IEnumerable{TEdge}#GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#IList{TEdge}#IndexOf(`1)">
            <summary>Sets the stub of IList`1.IndexOf(!0 item)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#IList{TEdge}#Insert(System.Int32,`1)">
            <summary>Sets the stub of IList`1.Insert(Int32 index, !0 item)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#IList{TEdge}#RemoveAt(System.Int32)">
            <summary>Sets the stub of IList`1.RemoveAt(Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#IEnumerable#GetEnumerator">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIEdgeList`2.TrimExcess">
            <summary>Sets the stub of IEdgeList`2.TrimExcess()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#ICollection{TEdge}#Count">
            <summary>Sets the stub of ICollection`1.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIEdgeList`2.global::System#Collections#Generic#ICollection{TEdge}#IsReadOnly">
            <summary>Sets the stub of ICollection`1.get_IsReadOnly()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIEdgeList`2.System#Collections#Generic#IList{TEdge}#Item(System.Int32)">
            <summary>Sets the stub of IList`1.get_Item(Int32 index)</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.StubIPriorityQueue`1">
            <summary>Stub type of QuickGraph.Collections.IPriorityQueue`1</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.#ctor">
            <summary>Initializes a new instance of type StubIPriorityQueue</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.ContainsT0">
            <summary>Sets the stub of IQueue`1.Contains(!0 value)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.CountGet">
            <summary>Sets the stub of IQueue`1.get_Count()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.Dequeue">
            <summary>Sets the stub of IQueue`1.Dequeue()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.EnqueueT0">
            <summary>Sets the stub of IQueue`1.Enqueue(!0 value)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.Peek">
            <summary>Sets the stub of IQueue`1.Peek()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.qg::QuickGraph#Collections#IPriorityQueue{T}#Update(`0)">
            <summary>Sets the stub of IPriorityQueue`1.Update(!0 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.qg::QuickGraph#Collections#IQueue{T}#Contains(`0)">
            <summary>Sets the stub of IQueue`1.Contains(!0 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.qg::QuickGraph#Collections#IQueue{T}#Dequeue">
            <summary>Sets the stub of IQueue`1.Dequeue()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.qg::QuickGraph#Collections#IQueue{T}#Enqueue(`0)">
            <summary>Sets the stub of IQueue`1.Enqueue(!0 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.qg::QuickGraph#Collections#IQueue{T}#Peek">
            <summary>Sets the stub of IQueue`1.Peek()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.qg::QuickGraph#Collections#IQueue{T}#ToArray">
            <summary>Sets the stub of IQueue`1.ToArray()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.ToArray">
            <summary>Sets the stub of IQueue`1.ToArray()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.UpdateT0">
            <summary>Sets the stub of IPriorityQueue`1.Update(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIPriorityQueue`1.qg::QuickGraph#Collections#IQueue{T}#Count">
            <summary>Sets the stub of IQueue`1.get_Count()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.StubIQueue`1">
            <summary>Stub type of QuickGraph.Collections.IQueue`1</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIQueue`1.#ctor">
            <summary>Initializes a new instance of type StubIQueue</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIQueue`1.ContainsT0">
            <summary>Sets the stub of IQueue`1.Contains(!0 value)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIQueue`1.CountGet">
            <summary>Sets the stub of IQueue`1.get_Count()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIQueue`1.Dequeue">
            <summary>Sets the stub of IQueue`1.Dequeue()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIQueue`1.EnqueueT0">
            <summary>Sets the stub of IQueue`1.Enqueue(!0 value)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIQueue`1.Peek">
            <summary>Sets the stub of IQueue`1.Peek()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIQueue`1.qg::QuickGraph#Collections#IQueue{T}#Contains(`0)">
            <summary>Sets the stub of IQueue`1.Contains(!0 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIQueue`1.qg::QuickGraph#Collections#IQueue{T}#Dequeue">
            <summary>Sets the stub of IQueue`1.Dequeue()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIQueue`1.qg::QuickGraph#Collections#IQueue{T}#Enqueue(`0)">
            <summary>Sets the stub of IQueue`1.Enqueue(!0 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIQueue`1.qg::QuickGraph#Collections#IQueue{T}#Peek">
            <summary>Sets the stub of IQueue`1.Peek()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIQueue`1.qg::QuickGraph#Collections#IQueue{T}#ToArray">
            <summary>Sets the stub of IQueue`1.ToArray()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIQueue`1.ToArray">
            <summary>Sets the stub of IQueue`1.ToArray()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIQueue`1.qg::QuickGraph#Collections#IQueue{T}#Count">
            <summary>Sets the stub of IQueue`1.get_Count()</summary>
        </member>
        <member name="T:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2">
            <summary>Stub type of QuickGraph.Collections.IVertexEdgeDictionary`2</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.#ctor">
            <summary>Initializes a new instance of type StubIVertexEdgeDictionary</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.AddKeyValuePairOfT0IEdgeListOfT0T1">
            <summary>Sets the stub of ICollection`1.Add(!0 item)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.AddT0IEdgeListOfT0T1">
            <summary>Sets the stub of IDictionary`2.Add(!0 key, !1 value)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.Clear">
            <summary>Sets the stub of ICollection`1.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.Clone">
            <summary>Sets the stub of IVertexEdgeDictionary`2.Clone()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.ContainsKeyT0">
            <summary>Sets the stub of IDictionary`2.ContainsKey(!0 key)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.ContainsKeyValuePairOfT0IEdgeListOfT0T1">
            <summary>Sets the stub of ICollection`1.Contains(!0 item)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.CopyToKeyValuePairOfT0IEdgeListOfT0T1ArrayInt32">
            <summary>Sets the stub of ICollection`1.CopyTo(!0[] array, Int32 arrayIndex)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.CountGet">
            <summary>Sets the stub of ICollection`1.get_Count()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.GetEnumerator01">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.IsReadOnlyGet">
            <summary>Sets the stub of ICollection`1.get_IsReadOnly()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.ItemGetT0">
            <summary>Sets the stub of IDictionary`2.get_Item(!0 key)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.ItemSetT0IEdgeListOfT0T1">
            <summary>Sets the stub of IDictionary`2.set_Item(!0 key, !1 value)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.KeysGet">
            <summary>Sets the stub of IDictionary`2.get_Keys()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.qg::QuickGraph#Collections#IVertexEdgeDictionary{TVertex@TEdge}#Clone">
            <summary>Sets the stub of IVertexEdgeDictionary`2.Clone()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.RemoveKeyValuePairOfT0IEdgeListOfT0T1">
            <summary>Sets the stub of ICollection`1.Remove(!0 item)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.RemoveT0">
            <summary>Sets the stub of IDictionary`2.Remove(!0 key)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}}#Add(System.Collections.Generic.KeyValuePair{`0,QuickGraph.Collections.IEdgeList{`0,`1}})">
            <summary>Sets the stub of ICollection`1.Add(!0 item)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}}#Clear">
            <summary>Sets the stub of ICollection`1.Clear()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}}#Contains(System.Collections.Generic.KeyValuePair{`0,QuickGraph.Collections.IEdgeList{`0,`1}})">
            <summary>Sets the stub of ICollection`1.Contains(!0 item)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,QuickGraph.Collections.IEdgeList{`0,`1}}[],System.Int32)">
            <summary>Sets the stub of ICollection`1.CopyTo(!0[] array, Int32 arrayIndex)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}}#Remove(System.Collections.Generic.KeyValuePair{`0,QuickGraph.Collections.IEdgeList{`0,`1}})">
            <summary>Sets the stub of ICollection`1.Remove(!0 item)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#IDictionary{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}#Add(`0,QuickGraph.Collections.IEdgeList{`0,`1})">
            <summary>Sets the stub of IDictionary`2.Add(!0 key, !1 value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#IDictionary{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}#ContainsKey(`0)">
            <summary>Sets the stub of IDictionary`2.ContainsKey(!0 key)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#IDictionary{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}#Remove(`0)">
            <summary>Sets the stub of IDictionary`2.Remove(!0 key)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#IDictionary{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}#TryGetValue(`0,QuickGraph.Collections.IEdgeList{`0,`1}@)">
            <summary>Sets the stub of IDictionary`2.TryGetValue(!0 key, !1&amp; value)</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}}#GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="M:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#IEnumerable#GetEnumerator">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.TryGetValueT0IEdgeListOfT0T1Out">
            <summary>Sets the stub of IDictionary`2.TryGetValue(!0 key, !1&amp; value)</summary>
        </member>
        <member name="F:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.ValuesGet">
            <summary>Sets the stub of IDictionary`2.get_Values()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}}#Count">
            <summary>Sets the stub of ICollection`1.get_Count()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}}#IsReadOnly">
            <summary>Sets the stub of ICollection`1.get_IsReadOnly()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.System#Collections#Generic#IDictionary{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}#Item(`0)">
            <summary>Sets the stub of IDictionary`2.get_Item(!0 key)</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#IDictionary{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}#Keys">
            <summary>Sets the stub of IDictionary`2.get_Keys()</summary>
        </member>
        <member name="P:QuickGraph.Collections.Fakes.StubIVertexEdgeDictionary`2.global::System#Collections#Generic#IDictionary{TVertex@QuickGraph#Collections#IEdgeList{TVertex@TEdge}}#Values">
            <summary>Sets the stub of IDictionary`2.get_Values()</summary>
        </member>
        <member name="T:QuickGraph.Contracts.Fakes.ShimGraphContract">
            <summary>Shim type of QuickGraph.Contracts.GraphContract</summary>
        </member>
        <member name="M:QuickGraph.Contracts.Fakes.ShimGraphContract.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Contracts.Fakes.ShimGraphContract.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Contracts.Fakes.ShimGraphContract.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Contracts.Fakes.ShimGraphContract.EdgeCountEqualOf2IEdgeListGraphOfM0M1IEdgeListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IEdgeListGraph{``0,``1},QuickGraph.IEdgeListGraph{``0,``1},System.Boolean})">
            <summary>Sets the shim of GraphContract.EdgeCountEqual(IEdgeListGraph`2&lt;!!0,!!1&gt; left, IEdgeListGraph`2&lt;!!0,!!1&gt; right)</summary>
        </member>
        <member name="M:QuickGraph.Contracts.Fakes.ShimGraphContract.InEdgeSetOf2IEdgeListGraphOfM0M1M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IEdgeListGraph{``0,``1},``1,System.Boolean})">
            <summary>Sets the shim of GraphContract.InEdgeSet(IEdgeListGraph`2&lt;!!0,!!1&gt; g, !!1 e)</summary>
        </member>
        <member name="M:QuickGraph.Contracts.Fakes.ShimGraphContract.InVertexSetOf1IVertexSetOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexSet{``0},``0,System.Boolean})">
            <summary>Sets the shim of GraphContract.InVertexSet(IVertexSet`1&lt;!!0&gt; g, !!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Contracts.Fakes.ShimGraphContract.InVertexSetOf2IEdgeListGraphOfM0M1M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IEdgeListGraph{``0,``1},``1,System.Boolean})">
            <summary>Sets the shim of GraphContract.InVertexSet(IEdgeListGraph`2&lt;!!0,!!1&gt; g, !!1 e)</summary>
        </member>
        <member name="M:QuickGraph.Contracts.Fakes.ShimGraphContract.VertexCountEqualOf1IVertexSetOfM0IVertexSetOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexSet{``0},QuickGraph.IVertexSet{``0},System.Boolean})">
            <summary>Sets the shim of GraphContract.VertexCountEqual(IVertexSet`1&lt;!!0&gt; left, IVertexSet`1&lt;!!0&gt; right)</summary>
        </member>
        <member name="P:QuickGraph.Contracts.Fakes.ShimGraphContract.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimAdjacencyGraph`2">
            <summary>Shim type of QuickGraph.AdjacencyGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.#ctor(QuickGraph.AdjacencyGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IMutableVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IEdgeListAndIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IMutableEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IMutableGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IMutableIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IMutableVertexAndEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IMutableVertexAndEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IMutableVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimAdjacencyGraph`2.Bind(QuickGraph.IVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of AdjacencyGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AddEdgeT1">
            <summary>Sets the shim of AdjacencyGraph`2.AddEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AddVertexT0">
            <summary>Sets the shim of AdjacencyGraph`2.AddVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of AdjacencyGraph`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AddVerticesAndEdgeT1">
            <summary>Sets the shim of AdjacencyGraph`2.AddVerticesAndEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.Clear">
            <summary>Sets the shim of AdjacencyGraph`2.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ClearOutEdgesT0">
            <summary>Sets the shim of AdjacencyGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ClearedAddEventHandler">
            <summary>Sets the shim of AdjacencyGraph`2.add_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ClearedRemoveEventHandler">
            <summary>Sets the shim of AdjacencyGraph`2.remove_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.Clone">
            <summary>Sets the shim of AdjacencyGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.Constructor">
            <summary>Sets the shim of AdjacencyGraph`2.AdjacencyGraph`2()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ConstructorBoolean">
            <summary>Sets the shim of AdjacencyGraph`2.AdjacencyGraph`2(Boolean allowParallelEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ConstructorBooleanInt32">
            <summary>Sets the shim of AdjacencyGraph`2.AdjacencyGraph`2(Boolean allowParallelEdges, Int32 vertexCapacity)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ConstructorBooleanInt32Int32">
            <summary>Sets the shim of AdjacencyGraph`2.AdjacencyGraph`2(Boolean allowParallelEdges, Int32 vertexCapacity, Int32 edgeCapacity)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ConstructorBooleanInt32Int32FuncOfInt32IVertexEdgeDictionaryOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.AdjacencyGraph`2(Boolean allowParallelEdges, Int32 capacity, Int32 edgeCapacity, Func`2&lt;Int32,IVertexEdgeDictionary`2&lt;!0,!1&gt;&gt; vertexEdgesDictionaryFactory)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ConstructorBooleanInt32Int32IEqualityComparerOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.AdjacencyGraph`2(Boolean allowParallelEdges, Int32 vertexCapacity, Int32 edgeCapacity, IEqualityComparer`1&lt;!0&gt; vertexComparer)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ConstructorIVertexEdgeDictionaryOfT0T1Int32Int32Boolean">
            <summary>Sets the shim of AdjacencyGraph`2.AdjacencyGraph`2(IVertexEdgeDictionary`2&lt;!0,!1&gt; vertexEdges, Int32 edgeCount, Int32 edgeCapacity, Boolean allowParallelEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of AdjacencyGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of AdjacencyGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ContainsVertexT0">
            <summary>Sets the shim of AdjacencyGraph`2.ContainsVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.EdgeCapacityGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_EdgeCapacity()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.EdgeCapacitySetInt32">
            <summary>Sets the shim of AdjacencyGraph`2.set_EdgeCapacity(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.EdgeCountGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.EdgeRemovedAddEdgeActionOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.add_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.EdgeRemovedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.remove_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.EdgeTypeGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_EdgeType()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.EdgesGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.IsDirectedGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the shim of AdjacencyGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.ObjectInvariant">
            <summary>Sets the shim of AdjacencyGraph`2.ObjectInvariant()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.OnClearedEventArgs">
            <summary>Sets the shim of AdjacencyGraph`2.OnCleared(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.OnEdgeAddedT1">
            <summary>Sets the shim of AdjacencyGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.OnEdgeRemovedT1">
            <summary>Sets the shim of AdjacencyGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.OnVertexAddedT0">
            <summary>Sets the shim of AdjacencyGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.OnVertexRemovedT0">
            <summary>Sets the shim of AdjacencyGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.OutDegreeT0">
            <summary>Sets the shim of AdjacencyGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.OutEdgeT0Int32">
            <summary>Sets the shim of AdjacencyGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.OutEdgesT0">
            <summary>Sets the shim of AdjacencyGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.RemoveEdgeT1">
            <summary>Sets the shim of AdjacencyGraph`2.RemoveEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.RemoveOutEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.RemoveVertexT0">
            <summary>Sets the shim of AdjacencyGraph`2.RemoveVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.TrimEdgeExcess">
            <summary>Sets the shim of AdjacencyGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of AdjacencyGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of AdjacencyGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of AdjacencyGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.VertexAddedAddVertexActionOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.add_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.VertexAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.remove_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.VertexCountGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.VertexRemovedAddVertexActionOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.add_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.VertexRemovedRemoveVertexActionOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.remove_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.VerticesGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of AdjacencyGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.AddEdgeT1">
            <summary>Sets the shim of AdjacencyGraph`2.AddEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.AddVertexT0">
            <summary>Sets the shim of AdjacencyGraph`2.AddVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of AdjacencyGraph`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.AddVerticesAndEdgeT1">
            <summary>Sets the shim of AdjacencyGraph`2.AddVerticesAndEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.Clear">
            <summary>Sets the shim of AdjacencyGraph`2.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.ClearOutEdgesT0">
            <summary>Sets the shim of AdjacencyGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.ClearedAddEventHandler">
            <summary>Sets the shim of AdjacencyGraph`2.add_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.ClearedRemoveEventHandler">
            <summary>Sets the shim of AdjacencyGraph`2.remove_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.Clone">
            <summary>Sets the shim of AdjacencyGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of AdjacencyGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of AdjacencyGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of AdjacencyGraph`2.ContainsVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.EdgeCapacityGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_EdgeCapacity()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.EdgeCapacitySetInt32">
            <summary>Sets the shim of AdjacencyGraph`2.set_EdgeCapacity(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.EdgeRemovedAddEdgeActionOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.add_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.EdgeRemovedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.remove_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.IsOutEdgesEmptyT0">
            <summary>Sets the shim of AdjacencyGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.ObjectInvariant">
            <summary>Sets the shim of AdjacencyGraph`2.ObjectInvariant()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.OnClearedEventArgs">
            <summary>Sets the shim of AdjacencyGraph`2.OnCleared(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.OnEdgeAddedT1">
            <summary>Sets the shim of AdjacencyGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.OnEdgeRemovedT1">
            <summary>Sets the shim of AdjacencyGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.OnVertexAddedT0">
            <summary>Sets the shim of AdjacencyGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.OnVertexRemovedT0">
            <summary>Sets the shim of AdjacencyGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.OutDegreeT0">
            <summary>Sets the shim of AdjacencyGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.OutEdgeT0Int32">
            <summary>Sets the shim of AdjacencyGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.OutEdgesT0">
            <summary>Sets the shim of AdjacencyGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.RemoveEdgeT1">
            <summary>Sets the shim of AdjacencyGraph`2.RemoveEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.RemoveOutEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of AdjacencyGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.RemoveVertexT0">
            <summary>Sets the shim of AdjacencyGraph`2.RemoveVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.TrimEdgeExcess">
            <summary>Sets the shim of AdjacencyGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of AdjacencyGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of AdjacencyGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of AdjacencyGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.VertexAddedAddVertexActionOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.add_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.VertexAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.remove_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.VertexRemovedAddVertexActionOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.add_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.VertexRemovedRemoveVertexActionOfT0">
            <summary>Sets the shim of AdjacencyGraph`2.remove_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimAdjacencyGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of AdjacencyGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2">
            <summary>Shim type of QuickGraph.ArrayAdjacencyGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.#ctor(QuickGraph.ArrayAdjacencyGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Bind(QuickGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Bind(QuickGraph.IVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.Clone">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.ConstructorDictionaryOfT0T1ArrayInt32">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.ArrayAdjacencyGraph`2(Dictionary`2&lt;!0,!1[]&gt; vertexOutEdges, Int32 edgeCount)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.ConstructorIVertexAndEdgeListGraphOfT0T1">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.ArrayAdjacencyGraph`2(IVertexAndEdgeListGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.ContainsVertexT0">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.EdgeCountGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.EdgesGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.IsDirectedGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.OutDegreeT0">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.OutEdgeT0Int32">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.OutEdgesT0">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.VertexCountGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.VerticesGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.Clone">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.IsOutEdgesEmptyT0">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.OutDegreeT0">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.OutEdgeT0Int32">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.OutEdgesT0">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayAdjacencyGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of ArrayAdjacencyGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2">
            <summary>Shim type of QuickGraph.ArrayBidirectionalGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.#ctor(QuickGraph.ArrayBidirectionalGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IBidirectionalGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IBidirectionalIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Bind(QuickGraph.IVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.Clone">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.ConstructorIBidirectionalGraphOfT0T1">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.ArrayBidirectionalGraph`2(IBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.ContainsVertexT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.DegreeT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.EdgeCountGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.EdgesGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.InDegreeT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.InEdgeT0Int32">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.InEdgesT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.IsDirectedGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.IsInEdgesEmptyT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.OutDegreeT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.OutEdgeT0Int32">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.OutEdgesT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.VertexCountGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.VerticesGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.Clone">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.DegreeT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.InDegreeT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.InEdgeT0Int32">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.InEdgesT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.IsInEdgesEmptyT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.IsOutEdgesEmptyT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.OutDegreeT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.OutEdgeT0Int32">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.OutEdgesT0">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayBidirectionalGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of ArrayBidirectionalGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimArrayUndirectedGraph`2">
            <summary>Shim type of QuickGraph.ArrayUndirectedGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.#ctor(QuickGraph.ArrayUndirectedGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.Bind(QuickGraph.IImplicitUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.Bind(QuickGraph.IUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AdjacentDegreeT0">
            <summary>Sets the shim of ArrayUndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AdjacentEdgeT0Int32">
            <summary>Sets the shim of ArrayUndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AdjacentEdgesT0">
            <summary>Sets the shim of ArrayUndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.Clone">
            <summary>Sets the shim of ArrayUndirectedGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.ConstructorIUndirectedGraphOfT0T1">
            <summary>Sets the shim of ArrayUndirectedGraph`2.ArrayUndirectedGraph`2(IUndirectedGraph`2&lt;!0,!1&gt; graph)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of ArrayUndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of ArrayUndirectedGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.ContainsVertexT0">
            <summary>Sets the shim of ArrayUndirectedGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.EdgeCountGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.EdgeEqualityComparerGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.EdgesGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.IsAdjacentEdgesEmptyT0">
            <summary>Sets the shim of ArrayUndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.IsDirectedGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of ArrayUndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.VertexCountGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.VerticesGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.AdjacentDegreeT0">
            <summary>Sets the shim of ArrayUndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.AdjacentEdgeT0Int32">
            <summary>Sets the shim of ArrayUndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.AdjacentEdgesT0">
            <summary>Sets the shim of ArrayUndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.Clone">
            <summary>Sets the shim of ArrayUndirectedGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of ArrayUndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of ArrayUndirectedGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of ArrayUndirectedGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.EdgeEqualityComparerGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.IsAdjacentEdgesEmptyT0">
            <summary>Sets the shim of ArrayUndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of ArrayUndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimArrayUndirectedGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of ArrayUndirectedGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2">
            <summary>Shim type of QuickGraph.BidirectionAdapterGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.#ctor(QuickGraph.BidirectionAdapterGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IBidirectionalGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IBidirectionalIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Bind(QuickGraph.IVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.ConstructorIVertexAndEdgeListGraphOfT0T1">
            <summary>Sets the shim of BidirectionAdapterGraph`2.BidirectionAdapterGraph`2(IVertexAndEdgeListGraph`2&lt;!0,!1&gt; baseGraph)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of BidirectionAdapterGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.ContainsVertexT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.DegreeT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.EdgeCountGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.EdgesGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.InDegreeT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.InEdgeT0Int32">
            <summary>Sets the shim of BidirectionAdapterGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.InEdgesT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.IsDirectedGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.IsInEdgesEmptyT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.OutDegreeT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.OutEdgeT0Int32">
            <summary>Sets the shim of BidirectionAdapterGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.OutEdgesT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.StaticConstructor">
            <summary>Sets the shim of BidirectionAdapterGraph`2.BidirectionAdapterGraph`2()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of BidirectionAdapterGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionAdapterGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionAdapterGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionAdapterGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.VertexCountGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.VerticesGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of BidirectionAdapterGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.DegreeT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.InDegreeT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.InEdgeT0Int32">
            <summary>Sets the shim of BidirectionAdapterGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.InEdgesT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.IsInEdgesEmptyT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.IsOutEdgesEmptyT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.OutDegreeT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.OutEdgeT0Int32">
            <summary>Sets the shim of BidirectionAdapterGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.OutEdgesT0">
            <summary>Sets the shim of BidirectionAdapterGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of BidirectionAdapterGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionAdapterGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionAdapterGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionAdapterGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionAdapterGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of BidirectionAdapterGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimBidirectionalGraph`2">
            <summary>Shim type of QuickGraph.BidirectionalGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.#ctor(QuickGraph.BidirectionalGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IMutableVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IBidirectionalGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IBidirectionalIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IEdgeListAndIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IMutableBidirectionalGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IMutableEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IMutableGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IMutableIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IMutableVertexAndEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IMutableVertexAndEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IMutableVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalGraph`2.Bind(QuickGraph.IVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of BidirectionalGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AddEdgeT1">
            <summary>Sets the shim of BidirectionalGraph`2.AddEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AddVertexT0">
            <summary>Sets the shim of BidirectionalGraph`2.AddVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of BidirectionalGraph`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AddVerticesAndEdgeT1">
            <summary>Sets the shim of BidirectionalGraph`2.AddVerticesAndEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.Clear">
            <summary>Sets the shim of BidirectionalGraph`2.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ClearEdgesT0">
            <summary>Sets the shim of BidirectionalGraph`2.ClearEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ClearInEdgesT0">
            <summary>Sets the shim of BidirectionalGraph`2.ClearInEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ClearOutEdgesT0">
            <summary>Sets the shim of BidirectionalGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ClearedAddEventHandler">
            <summary>Sets the shim of BidirectionalGraph`2.add_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ClearedRemoveEventHandler">
            <summary>Sets the shim of BidirectionalGraph`2.remove_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.Clone">
            <summary>Sets the shim of BidirectionalGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.Constructor">
            <summary>Sets the shim of BidirectionalGraph`2.BidirectionalGraph`2()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ConstructorBoolean">
            <summary>Sets the shim of BidirectionalGraph`2.BidirectionalGraph`2(Boolean allowParallelEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ConstructorBooleanInt32">
            <summary>Sets the shim of BidirectionalGraph`2.BidirectionalGraph`2(Boolean allowParallelEdges, Int32 vertexCapacity)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ConstructorBooleanInt32FuncOfInt32IVertexEdgeDictionaryOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.BidirectionalGraph`2(Boolean allowParallelEdges, Int32 capacity, Func`2&lt;Int32,IVertexEdgeDictionary`2&lt;!0,!1&gt;&gt; vertexEdgesDictionaryFactory)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ConstructorBooleanInt32Int32">
            <summary>Sets the shim of BidirectionalGraph`2.BidirectionalGraph`2(Boolean allowParallelEdges, Int32 vertexCapacity, Int32 edgeCapacity)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ConstructorBooleanInt32Int32IEqualityComparerOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.BidirectionalGraph`2(Boolean allowParallelEdges, Int32 vertexCapacity, Int32 edgeCapacity, IEqualityComparer`1&lt;!0&gt; vertexComparer)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ConstructorIVertexEdgeDictionaryOfT0T1IVertexEdgeDictionaryOfT0T1Int32Int32Boolean">
            <summary>Sets the shim of BidirectionalGraph`2.BidirectionalGraph`2(IVertexEdgeDictionary`2&lt;!0,!1&gt; vertexInEdges, IVertexEdgeDictionary`2&lt;!0,!1&gt; vertexOutEdges, Int32 edgeCount, Int32 edgeCapacity, Boolean allowParallelEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of BidirectionalGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of BidirectionalGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.ContainsVertexT0">
            <summary>Sets the shim of BidirectionalGraph`2.ContainsVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.DegreeT0">
            <summary>Sets the shim of BidirectionalGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.EdgeCapacityGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_EdgeCapacity()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.EdgeCapacitySetInt32">
            <summary>Sets the shim of BidirectionalGraph`2.set_EdgeCapacity(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.EdgeCountGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.EdgeRemovedAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.add_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.EdgeRemovedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.remove_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.EdgeTypeGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_EdgeType()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.EdgesGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.InDegreeT0">
            <summary>Sets the shim of BidirectionalGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.InEdgeT0Int32">
            <summary>Sets the shim of BidirectionalGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.InEdgesT0">
            <summary>Sets the shim of BidirectionalGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.IsDirectedGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.IsInEdgesEmptyT0">
            <summary>Sets the shim of BidirectionalGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the shim of BidirectionalGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.MergeVertexIfVertexPredicateOfT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.MergeVertexIf(VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.MergeVertexT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.MergeVertex(!0 v, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.OnClearedEventArgs">
            <summary>Sets the shim of BidirectionalGraph`2.OnCleared(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.OnEdgeAddedT1">
            <summary>Sets the shim of BidirectionalGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.OnEdgeRemovedT1">
            <summary>Sets the shim of BidirectionalGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.OnVertexAddedT0">
            <summary>Sets the shim of BidirectionalGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.OnVertexRemovedT0">
            <summary>Sets the shim of BidirectionalGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.OutDegreeT0">
            <summary>Sets the shim of BidirectionalGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.OutEdgeT0Int32">
            <summary>Sets the shim of BidirectionalGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.OutEdgesT0">
            <summary>Sets the shim of BidirectionalGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.RemoveEdgeT1">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.RemoveInEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveInEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.RemoveOutEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.RemoveVertexT0">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.TrimEdgeExcess">
            <summary>Sets the shim of BidirectionalGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of BidirectionalGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionalGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionalGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionalGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.VertexAddedAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.add_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.VertexAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.remove_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.VertexCountGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.VertexRemovedAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.add_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.VertexRemovedRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.remove_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.VerticesGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of BidirectionalGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.AddEdgeT1">
            <summary>Sets the shim of BidirectionalGraph`2.AddEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.AddVertexT0">
            <summary>Sets the shim of BidirectionalGraph`2.AddVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of BidirectionalGraph`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.AddVerticesAndEdgeT1">
            <summary>Sets the shim of BidirectionalGraph`2.AddVerticesAndEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.Clear">
            <summary>Sets the shim of BidirectionalGraph`2.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.ClearEdgesT0">
            <summary>Sets the shim of BidirectionalGraph`2.ClearEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.ClearInEdgesT0">
            <summary>Sets the shim of BidirectionalGraph`2.ClearInEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.ClearOutEdgesT0">
            <summary>Sets the shim of BidirectionalGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.ClearedAddEventHandler">
            <summary>Sets the shim of BidirectionalGraph`2.add_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.ClearedRemoveEventHandler">
            <summary>Sets the shim of BidirectionalGraph`2.remove_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.Clone">
            <summary>Sets the shim of BidirectionalGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of BidirectionalGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of BidirectionalGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of BidirectionalGraph`2.ContainsVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.DegreeT0">
            <summary>Sets the shim of BidirectionalGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.EdgeCapacityGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_EdgeCapacity()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.EdgeCapacitySetInt32">
            <summary>Sets the shim of BidirectionalGraph`2.set_EdgeCapacity(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.EdgeRemovedAddEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.add_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.EdgeRemovedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.remove_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.InDegreeT0">
            <summary>Sets the shim of BidirectionalGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.InEdgeT0Int32">
            <summary>Sets the shim of BidirectionalGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.InEdgesT0">
            <summary>Sets the shim of BidirectionalGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.IsInEdgesEmptyT0">
            <summary>Sets the shim of BidirectionalGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.IsOutEdgesEmptyT0">
            <summary>Sets the shim of BidirectionalGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.MergeVertexIfVertexPredicateOfT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.MergeVertexIf(VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.MergeVertexT0EdgeFactoryOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.MergeVertex(!0 v, EdgeFactory`2&lt;!0,!1&gt; edgeFactory)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.OnClearedEventArgs">
            <summary>Sets the shim of BidirectionalGraph`2.OnCleared(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.OnEdgeAddedT1">
            <summary>Sets the shim of BidirectionalGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.OnEdgeRemovedT1">
            <summary>Sets the shim of BidirectionalGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.OnVertexAddedT0">
            <summary>Sets the shim of BidirectionalGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.OnVertexRemovedT0">
            <summary>Sets the shim of BidirectionalGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.OutDegreeT0">
            <summary>Sets the shim of BidirectionalGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.OutEdgeT0Int32">
            <summary>Sets the shim of BidirectionalGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.OutEdgesT0">
            <summary>Sets the shim of BidirectionalGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.RemoveEdgeT1">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveEdge(!1 e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.RemoveInEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveInEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.RemoveOutEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.RemoveVertexT0">
            <summary>Sets the shim of BidirectionalGraph`2.RemoveVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.TrimEdgeExcess">
            <summary>Sets the shim of BidirectionalGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of BidirectionalGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionalGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionalGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of BidirectionalGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.VertexAddedAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.add_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.VertexAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.remove_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.VertexRemovedAddVertexActionOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.add_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.VertexRemovedRemoveVertexActionOfT0">
            <summary>Sets the shim of BidirectionalGraph`2.remove_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of BidirectionalGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1">
            <summary>Shim type of QuickGraph.BidirectionalMatrixGraph`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.#ctor(QuickGraph.BidirectionalMatrixGraph{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IImplicitVertexSet{System.Int32})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IVertexSet{System.Int32})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IBidirectionalGraph{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IBidirectionalIncidenceGraph{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IEdgeListGraph{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IEdgeSet{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IGraph{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IImplicitGraph{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IIncidenceGraph{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IMutableEdgeListGraph{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IMutableGraph{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IVertexAndEdgeListGraph{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Bind(QuickGraph.IVertexListGraph{System.Int32,`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AddEdgeRangeIEnumerableOfT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.AddEdgeRange(IEnumerable`1&lt;!0&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AddEdgeT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.AddEdge(!0 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllowParallelEdgesGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.Clear">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.ClearEdgesInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ClearEdges(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.ClearInEdgesInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ClearInEdges(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.ClearOutEdgesInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ClearOutEdges(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.ClearedAddEventHandler">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.add_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.ClearedRemoveEventHandler">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.remove_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.ConstructorInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.BidirectionalMatrixGraph`1(Int32 vertexCount)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.ConstructorInt32Int32T0MdArray2">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.BidirectionalMatrixGraph`1(Int32 vertexCount, Int32 edgeCount, !0[,] edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.ContainsEdgeInt32Int32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ContainsEdge(Int32 source, Int32 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.ContainsEdgeT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ContainsEdge(!0 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.ContainsVertexInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ContainsVertex(Int32 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.DegreeInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.Degree(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.EdgeAddedAddEdgeActionOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.add_EdgeAdded(EdgeAction`2&lt;Int32,!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.EdgeAddedRemoveEdgeActionOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.remove_EdgeAdded(EdgeAction`2&lt;Int32,!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.EdgeCountGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.EdgeRemovedAddEdgeActionOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.add_EdgeRemoved(EdgeAction`2&lt;Int32,!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.EdgeRemovedRemoveEdgeActionOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.remove_EdgeRemoved(EdgeAction`2&lt;Int32,!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.EdgesGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.InDegreeInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.InDegree(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.InEdgeInt32Int32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.InEdge(Int32 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.InEdgesInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.InEdges(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.IsDirectedGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.IsEdgesEmptyGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.IsInEdgesEmptyInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.IsInEdgesEmpty(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.IsOutEdgesEmptyInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.IsOutEdgesEmpty(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.IsVerticesEmptyGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.OnClearedEventArgs">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OnCleared(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.OnEdgeAddedT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OnEdgeAdded(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.OnEdgeRemovedT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OnEdgeRemoved(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.OutDegreeInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OutDegree(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.OutEdgeInt32Int32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OutEdge(Int32 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.OutEdgesInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OutEdges(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.RemoveEdgeIfEdgePredicateOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.RemoveEdgeIf(EdgePredicate`2&lt;Int32,!0&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.RemoveEdgeT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.RemoveEdge(!0 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.RemoveInEdgeIfInt32EdgePredicateOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.RemoveInEdgeIf(Int32 v, EdgePredicate`2&lt;Int32,!0&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.RemoveOutEdgeIfInt32EdgePredicateOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.RemoveOutEdgeIf(Int32 v, EdgePredicate`2&lt;Int32,!0&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.TryGetEdgeInt32Int32T0Out">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.TryGetEdge(Int32 source, Int32 target, !0&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.TryGetEdgesInt32Int32IEnumerableOfT0Out">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.TryGetEdges(Int32 source, Int32 target, IEnumerable`1&lt;!0&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.TryGetInEdgesInt32IEnumerableOfT0Out">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.TryGetInEdges(Int32 v, IEnumerable`1&lt;!0&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.TryGetOutEdgesInt32IEnumerableOfT0Out">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.TryGetOutEdges(Int32 v, IEnumerable`1&lt;!0&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.VertexCountGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.VerticesGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.AddEdgeRangeIEnumerableOfT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.AddEdgeRange(IEnumerable`1&lt;!0&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.AddEdgeT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.AddEdge(!0 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.Clear">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.ClearEdgesInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ClearEdges(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.ClearInEdgesInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ClearInEdges(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.ClearOutEdgesInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ClearOutEdges(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.ClearedAddEventHandler">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.add_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.ClearedRemoveEventHandler">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.remove_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.ContainsEdgeInt32Int32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ContainsEdge(Int32 source, Int32 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.ContainsEdgeT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ContainsEdge(!0 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.ContainsVertexInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.ContainsVertex(Int32 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.DegreeInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.Degree(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.EdgeAddedAddEdgeActionOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.add_EdgeAdded(EdgeAction`2&lt;Int32,!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.EdgeAddedRemoveEdgeActionOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.remove_EdgeAdded(EdgeAction`2&lt;Int32,!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.EdgeCountGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.EdgeRemovedAddEdgeActionOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.add_EdgeRemoved(EdgeAction`2&lt;Int32,!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.EdgeRemovedRemoveEdgeActionOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.remove_EdgeRemoved(EdgeAction`2&lt;Int32,!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.EdgesGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.InDegreeInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.InDegree(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.InEdgeInt32Int32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.InEdge(Int32 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.InEdgesInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.InEdges(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.IsDirectedGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.IsInEdgesEmptyInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.IsInEdgesEmpty(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.IsOutEdgesEmptyInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.IsOutEdgesEmpty(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.OnClearedEventArgs">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OnCleared(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.OnEdgeAddedT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OnEdgeAdded(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.OnEdgeRemovedT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OnEdgeRemoved(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.OutDegreeInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OutDegree(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.OutEdgeInt32Int32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OutEdge(Int32 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.OutEdgesInt32">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.OutEdges(Int32 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.RemoveEdgeIfEdgePredicateOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.RemoveEdgeIf(EdgePredicate`2&lt;Int32,!0&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.RemoveEdgeT0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.RemoveEdge(!0 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.RemoveInEdgeIfInt32EdgePredicateOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.RemoveInEdgeIf(Int32 v, EdgePredicate`2&lt;Int32,!0&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.RemoveOutEdgeIfInt32EdgePredicateOfInt32T0">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.RemoveOutEdgeIf(Int32 v, EdgePredicate`2&lt;Int32,!0&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.TryGetEdgeInt32Int32T0Out">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.TryGetEdge(Int32 source, Int32 target, !0&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.TryGetEdgesInt32Int32IEnumerableOfT0Out">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.TryGetEdges(Int32 source, Int32 target, IEnumerable`1&lt;!0&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.TryGetInEdgesInt32IEnumerableOfT0Out">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.TryGetInEdges(Int32 v, IEnumerable`1&lt;!0&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.TryGetOutEdgesInt32IEnumerableOfT0Out">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.TryGetOutEdges(Int32 v, IEnumerable`1&lt;!0&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.VertexCountGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimBidirectionalMatrixGraph`1.AllInstances.VerticesGet">
            <summary>Sets the shim of BidirectionalMatrixGraph`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1">
            <summary>Shim type of QuickGraph.CompressedSparseRowGraph`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.#ctor(QuickGraph.CompressedSparseRowGraph{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.Bind(QuickGraph.IEdgeSet{`0,QuickGraph.SEquatableEdge{`0}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.Bind(QuickGraph.IGraph{`0,QuickGraph.SEquatableEdge{`0}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.Bind(QuickGraph.IImplicitGraph{`0,QuickGraph.SEquatableEdge{`0}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.Bind(QuickGraph.IIncidenceGraph{`0,QuickGraph.SEquatableEdge{`0}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.Bind(QuickGraph.IVertexListGraph{`0,QuickGraph.SEquatableEdge{`0}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.FromGraphOf1IVertexAndEdgeListGraphOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{`0,``0},QuickGraph.CompressedSparseRowGraph{`0}})">
            <summary>Sets the shim of CompressedSparseRowGraph`1.FromGraph(IVertexAndEdgeListGraph`2&lt;!0,!!0&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllowParallelEdgesGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.ContainsEdgeSEquatableEdgeOfT0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.ContainsEdge(SEquatableEdge`1&lt;!0&gt; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.ContainsEdgeT0T0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.ContainsVertexT0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.EdgeCountGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.EdgesGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.IsDirectedGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.IsEdgesEmptyGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.IsOutEdgesEmptyT0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.IsVerticesEmptyGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.OutDegreeT0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.OutEdgeT0Int32">
            <summary>Sets the shim of CompressedSparseRowGraph`1.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.OutEdgesT0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.TryGetEdgeT0T0SEquatableEdgeOfT0Out">
            <summary>Sets the shim of CompressedSparseRowGraph`1.TryGetEdge(!0 source, !0 target, SEquatableEdge`1&lt;!0&gt;&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.TryGetEdgesT0T0IEnumerableOfSEquatableEdgeOfT0Out">
            <summary>Sets the shim of CompressedSparseRowGraph`1.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;SEquatableEdge`1&lt;!0&gt;&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.TryGetOutEdgesT0IEnumerableOfSEquatableEdgeOfT0Out">
            <summary>Sets the shim of CompressedSparseRowGraph`1.TryGetOutEdges(!0 v, IEnumerable`1&lt;SEquatableEdge`1&lt;!0&gt;&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.VertexCountGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.VerticesGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.ContainsEdgeSEquatableEdgeOfT0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.ContainsEdge(SEquatableEdge`1&lt;!0&gt; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.EdgeCountGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.EdgesGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.IsDirectedGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.IsOutEdgesEmptyT0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.OutDegreeT0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.OutEdgeT0Int32">
            <summary>Sets the shim of CompressedSparseRowGraph`1.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.OutEdgesT0">
            <summary>Sets the shim of CompressedSparseRowGraph`1.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.TryGetEdgeT0T0SEquatableEdgeOfT0Out">
            <summary>Sets the shim of CompressedSparseRowGraph`1.TryGetEdge(!0 source, !0 target, SEquatableEdge`1&lt;!0&gt;&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.TryGetEdgesT0T0IEnumerableOfSEquatableEdgeOfT0Out">
            <summary>Sets the shim of CompressedSparseRowGraph`1.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;SEquatableEdge`1&lt;!0&gt;&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.TryGetOutEdgesT0IEnumerableOfSEquatableEdgeOfT0Out">
            <summary>Sets the shim of CompressedSparseRowGraph`1.TryGetOutEdges(!0 v, IEnumerable`1&lt;SEquatableEdge`1&lt;!0&gt;&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.VertexCountGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimCompressedSparseRowGraph`1.AllInstances.VerticesGet">
            <summary>Sets the shim of CompressedSparseRowGraph`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2">
            <summary>Shim type of QuickGraph.DelegateBidirectionalIncidenceGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.#ctor(QuickGraph.DelegateBidirectionalIncidenceGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.Bind(QuickGraph.IBidirectionalIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.ConstructorTryFuncOfT0IEnumerableOfT1TryFuncOfT0IEnumerableOfT1">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.DelegateBidirectionalIncidenceGraph`2(TryFunc`2&lt;!0,IEnumerable`1&lt;!1&gt;&gt; tryGetOutEdges, TryFunc`2&lt;!0,IEnumerable`1&lt;!1&gt;&gt; tryGetInEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.DegreeT0">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.InDegreeT0">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.InEdgeT0Int32">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.InEdgesT0">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.IsInEdgesEmptyT0">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.TryGetInEdgesFuncGet">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.get_TryGetInEdgesFunc()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.AllInstances.DegreeT0">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.AllInstances.InDegreeT0">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.AllInstances.InEdgeT0Int32">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.AllInstances.InEdgesT0">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.AllInstances.IsInEdgesEmptyT0">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.AllInstances.TryGetInEdgesFuncGet">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.get_TryGetInEdgesFunc()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateBidirectionalIncidenceGraph`2.AllInstances.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of DelegateBidirectionalIncidenceGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateImplicitGraph`2">
            <summary>Shim type of QuickGraph.DelegateImplicitGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.#ctor(QuickGraph.DelegateImplicitGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of DelegateImplicitGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.ConstructorTryFuncOfT0IEnumerableOfT1">
            <summary>Sets the shim of DelegateImplicitGraph`2.DelegateImplicitGraph`2(TryFunc`2&lt;!0,IEnumerable`1&lt;!1&gt;&gt; tryGetOutEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.ContainsVertexT0">
            <summary>Sets the shim of DelegateImplicitGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.IsDirectedGet">
            <summary>Sets the shim of DelegateImplicitGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the shim of DelegateImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.OutDegreeT0">
            <summary>Sets the shim of DelegateImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.OutEdgeT0Int32">
            <summary>Sets the shim of DelegateImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.OutEdgesT0">
            <summary>Sets the shim of DelegateImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.TryGetOutEdgesFuncGet">
            <summary>Sets the shim of DelegateImplicitGraph`2.get_TryGetOutEdgesFunc()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of DelegateImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of DelegateImplicitGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of DelegateImplicitGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of DelegateImplicitGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllInstances.IsOutEdgesEmptyT0">
            <summary>Sets the shim of DelegateImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllInstances.OutDegreeT0">
            <summary>Sets the shim of DelegateImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllInstances.OutEdgeT0Int32">
            <summary>Sets the shim of DelegateImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllInstances.OutEdgesT0">
            <summary>Sets the shim of DelegateImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllInstances.TryGetOutEdgesFuncGet">
            <summary>Sets the shim of DelegateImplicitGraph`2.get_TryGetOutEdgesFunc()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitGraph`2.AllInstances.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of DelegateImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2">
            <summary>Shim type of QuickGraph.DelegateImplicitUndirectedGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.#ctor(QuickGraph.DelegateImplicitUndirectedGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.Bind(QuickGraph.IImplicitUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AdjacentDegreeT0">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AdjacentEdgeT0Int32">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AdjacentEdgesT0">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.ConstructorTryFuncOfT0IEnumerableOfT1Boolean">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.DelegateImplicitUndirectedGraph`2(TryFunc`2&lt;!0,IEnumerable`1&lt;!1&gt;&gt; tryGetAdjacenyEdges, Boolean allowParallelEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.ContainsVertexT0">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.EdgeEqualityComparerGet">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.IsAdjacentEdgesEmptyT0">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.IsDirectedGet">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.TryGetAdjacencyEdgesFuncGet">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.get_TryGetAdjacencyEdgesFunc()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.TryGetAdjacentEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.TryGetAdjacentEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.AdjacentDegreeT0">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.AdjacentEdgeT0Int32">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.AdjacentEdgesT0">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.EdgeEqualityComparerGet">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.IsAdjacentEdgesEmptyT0">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.TryGetAdjacencyEdgesFuncGet">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.get_TryGetAdjacencyEdgesFunc()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.TryGetAdjacentEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.TryGetAdjacentEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateImplicitUndirectedGraph`2.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of DelegateImplicitUndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2">
            <summary>Shim type of QuickGraph.DelegateIncidenceGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.#ctor(QuickGraph.DelegateIncidenceGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.ConstructorTryFuncOfT0IEnumerableOfT1">
            <summary>Sets the shim of DelegateIncidenceGraph`2.DelegateIncidenceGraph`2(TryFunc`2&lt;!0,IEnumerable`1&lt;!1&gt;&gt; tryGetOutEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of DelegateIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of DelegateIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of DelegateIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of DelegateIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of DelegateIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateIncidenceGraph`2.AllInstances.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of DelegateIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2">
            <summary>Shim type of QuickGraph.DelegateUndirectedGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.#ctor(QuickGraph.DelegateUndirectedGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.Bind(QuickGraph.IImplicitUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.Bind(QuickGraph.IUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.ConstructorIEnumerableOfT0TryFuncOfT0IEnumerableOfT1Boolean">
            <summary>Sets the shim of DelegateUndirectedGraph`2.DelegateUndirectedGraph`2(IEnumerable`1&lt;!0&gt; vertices, TryFunc`2&lt;!0,IEnumerable`1&lt;!1&gt;&gt; tryGetAdjacentEdges, Boolean allowParallelEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of DelegateUndirectedGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.EdgeCountGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.EdgesGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.VertexCountGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.VerticesGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of DelegateUndirectedGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateUndirectedGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of DelegateUndirectedGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2">
            <summary>Shim type of QuickGraph.DelegateVertexAndEdgeListGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.#ctor(QuickGraph.DelegateVertexAndEdgeListGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.Bind(QuickGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.Bind(QuickGraph.IVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.ConstructorIEnumerableOfT0TryFuncOfT0IEnumerableOfT1">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.DelegateVertexAndEdgeListGraph`2(IEnumerable`1&lt;!0&gt; vertices, TryFunc`2&lt;!0,IEnumerable`1&lt;!1&gt;&gt; tryGetOutEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.EdgeCountGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.EdgesGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.VertexCountGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.VerticesGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimDelegateVertexAndEdgeListGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of DelegateVertexAndEdgeListGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimEdge`1">
            <summary>Shim type of QuickGraph.Edge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdge`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdge`1.#ctor(QuickGraph.Edge{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdge`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdge`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdge`1.Bind(QuickGraph.IEdge{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdge`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdge`1.ConstructorT0T0">
            <summary>Sets the shim of Edge`1.Edge`1(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdge`1.SourceGet">
            <summary>Sets the shim of Edge`1.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdge`1.TargetGet">
            <summary>Sets the shim of Edge`1.get_Target()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdge`1.ToString">
            <summary>Sets the shim of Edge`1.ToString()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimEdge`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdge`1.AllInstances.SourceGet">
            <summary>Sets the shim of Edge`1.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdge`1.AllInstances.TargetGet">
            <summary>Sets the shim of Edge`1.get_Target()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdge`1.AllInstances.ToString01">
            <summary>Sets the shim of Edge`1.ToString()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimEdgeEventArgs`2">
            <summary>Shim type of QuickGraph.EdgeEventArgs`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeEventArgs`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeEventArgs`2.#ctor(QuickGraph.EdgeEventArgs{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeEventArgs`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeEventArgs`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeEventArgs`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeEventArgs`2.ConstructorT1">
            <summary>Sets the shim of EdgeEventArgs`2.EdgeEventArgs`2(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeEventArgs`2.EdgeGet">
            <summary>Sets the shim of EdgeEventArgs`2.get_Edge()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimEdgeEventArgs`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeEventArgs`2.AllInstances.EdgeGet">
            <summary>Sets the shim of EdgeEventArgs`2.get_Edge()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimEdgeExtensions">
            <summary>Shim type of QuickGraph.EdgeExtensions</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.GetOtherVertexOf2M1M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``0,``0})">
            <summary>Sets the shim of EdgeExtensions.GetOtherVertex(!!1 edge, !!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.GetUndirectedVertexEqualityOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.EdgeEqualityComparer{``0,``1}})">
            <summary>Sets the shim of EdgeExtensions.GetUndirectedVertexEquality()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.HasCyclesOf2IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},System.Boolean})">
            <summary>Sets the shim of EdgeExtensions.HasCycles(IEnumerable`1&lt;!!1&gt; path)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.IsAdjacentOf2M1M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``0,System.Boolean})">
            <summary>Sets the shim of EdgeExtensions.IsAdjacent(!!1 edge, !!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.IsPathOf2IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},System.Boolean})">
            <summary>Sets the shim of EdgeExtensions.IsPath(IEnumerable`1&lt;!!1&gt; path)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.IsPathWithoutCyclesOf2IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},System.Boolean})">
            <summary>Sets the shim of EdgeExtensions.IsPathWithoutCycles(IEnumerable`1&lt;!!1&gt; path)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.IsPredecessorOf2IDictionaryOfM0M1M0M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{``0,``1},``0,``0,System.Boolean})">
            <summary>Sets the shim of EdgeExtensions.IsPredecessor(IDictionary`2&lt;!!0,!!1&gt; predecessors, !!0 root, !!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.IsSelfEdgeOf2M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,System.Boolean})">
            <summary>Sets the shim of EdgeExtensions.IsSelfEdge(!!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.ReverseEdgesOf2IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{QuickGraph.SReversedEdge{``0,``1}}})">
            <summary>Sets the shim of EdgeExtensions.ReverseEdges(IEnumerable`1&lt;!!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.SortedVertexEqualityOf2M1M0M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``0,``0,System.Boolean})">
            <summary>Sets the shim of EdgeExtensions.SortedVertexEquality(!!1 edge, !!0 source, !!0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.ToVertexPairOf2M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,QuickGraph.SEquatableEdge{``0}})">
            <summary>Sets the shim of EdgeExtensions.ToVertexPair(!!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.TryGetPathOf2IDictionaryOfM0M1M0IEnumerableOfM1Out``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{System.Collections.Generic.IDictionary{``0,``1},``0,System.Collections.Generic.IEnumerable{``1},System.Boolean})">
            <summary>Sets the shim of EdgeExtensions.TryGetPath(IDictionary`2&lt;!!0,!!1&gt; predecessors, !!0 v, IEnumerable`1&lt;!!1&gt;&amp; result)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeExtensions.UndirectedVertexEqualityOf2M1M0M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``0,``0,System.Boolean})">
            <summary>Sets the shim of EdgeExtensions.UndirectedVertexEquality(!!1 edge, !!0 source, !!0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimEdgeListGraph`2">
            <summary>Shim type of QuickGraph.EdgeListGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.#ctor(QuickGraph.EdgeListGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.Bind(QuickGraph.IMutableEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEdgeListGraph`2.Bind(QuickGraph.IMutableGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of EdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AddEdgeT1">
            <summary>Sets the shim of EdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of EdgeListGraph`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AddVerticesAndEdgeT1">
            <summary>Sets the shim of EdgeListGraph`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of EdgeListGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.Clear">
            <summary>Sets the shim of EdgeListGraph`2.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.ClearedAddEventHandler">
            <summary>Sets the shim of EdgeListGraph`2.add_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.ClearedRemoveEventHandler">
            <summary>Sets the shim of EdgeListGraph`2.remove_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.Clone">
            <summary>Sets the shim of EdgeListGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.Constructor">
            <summary>Sets the shim of EdgeListGraph`2.EdgeListGraph`2()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.ConstructorBooleanBoolean">
            <summary>Sets the shim of EdgeListGraph`2.EdgeListGraph`2(Boolean isDirected, Boolean allowParralelEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.ConstructorBooleanBooleanEdgeEdgeDictionaryOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.EdgeListGraph`2(Boolean isDirected, Boolean allowParralelEdges, EdgeEdgeDictionary`2&lt;!0,!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of EdgeListGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.ContainsVertexT0">
            <summary>Sets the shim of EdgeListGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.EdgeCountGet">
            <summary>Sets the shim of EdgeListGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.EdgeRemovedAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.add_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.EdgeRemovedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.remove_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.EdgesGet">
            <summary>Sets the shim of EdgeListGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.GetVertexCounts">
            <summary>Sets the shim of EdgeListGraph`2.GetVertexCounts()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.IsDirectedGet">
            <summary>Sets the shim of EdgeListGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of EdgeListGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of EdgeListGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.OnClearedEventArgs">
            <summary>Sets the shim of EdgeListGraph`2.OnCleared(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.OnEdgeAddedT1">
            <summary>Sets the shim of EdgeListGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.OnEdgeRemovedT1">
            <summary>Sets the shim of EdgeListGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.RemoveEdgeT1">
            <summary>Sets the shim of EdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.VertexCountGet">
            <summary>Sets the shim of EdgeListGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.VerticesGet">
            <summary>Sets the shim of EdgeListGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of EdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.AddEdgeT1">
            <summary>Sets the shim of EdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of EdgeListGraph`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.AddVerticesAndEdgeT1">
            <summary>Sets the shim of EdgeListGraph`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of EdgeListGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.Clear">
            <summary>Sets the shim of EdgeListGraph`2.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.ClearedAddEventHandler">
            <summary>Sets the shim of EdgeListGraph`2.add_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.ClearedRemoveEventHandler">
            <summary>Sets the shim of EdgeListGraph`2.remove_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.Clone">
            <summary>Sets the shim of EdgeListGraph`2.Clone()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of EdgeListGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of EdgeListGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of EdgeListGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.EdgeRemovedAddEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.add_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.EdgeRemovedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.remove_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of EdgeListGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.GetVertexCounts">
            <summary>Sets the shim of EdgeListGraph`2.GetVertexCounts()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of EdgeListGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of EdgeListGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of EdgeListGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.OnClearedEventArgs">
            <summary>Sets the shim of EdgeListGraph`2.OnCleared(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.OnEdgeAddedT1">
            <summary>Sets the shim of EdgeListGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.OnEdgeRemovedT1">
            <summary>Sets the shim of EdgeListGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the shim of EdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.RemoveEdgeT1">
            <summary>Sets the shim of EdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of EdgeListGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEdgeListGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of EdgeListGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimEnumerableContract">
            <summary>Shim type of QuickGraph.EnumerableContract</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEnumerableContract.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEnumerableContract.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEnumerableContract.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEnumerableContract.ElementsNotNullOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Boolean})">
            <summary>Sets the shim of EnumerableContract.ElementsNotNull(IEnumerable`1&lt;!!0&gt; elements)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEnumerableContract.AllInt32Int32FuncOfInt32Boolean">
            <summary>Sets the shim of EnumerableContract.All(Int32 lowerBound, Int32 exclusiveUpperBound, Func`2&lt;Int32,Boolean&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEnumerableContract.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimEquatableEdge`1">
            <summary>Shim type of QuickGraph.EquatableEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEquatableEdge`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEquatableEdge`1.#ctor(QuickGraph.EquatableEdge{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEquatableEdge`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEquatableEdge`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEquatableEdge`1.Bind(QuickGraph.IEdge{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimEquatableEdge`1.Bind(System.IEquatable{QuickGraph.EquatableEdge{`0}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEquatableEdge`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEquatableEdge`1.ConstructorT0T0">
            <summary>Sets the shim of EquatableEdge`1.EquatableEdge`1(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEquatableEdge`1.EqualsEquatableEdgeOfT0">
            <summary>Sets the shim of EquatableEdge`1.Equals(EquatableEdge`1&lt;!0&gt; other)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEquatableEdge`1.EqualsObject">
            <summary>Sets the shim of EquatableEdge`1.Equals(Object obj)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEquatableEdge`1.GetHashCode">
            <summary>Sets the shim of EquatableEdge`1.GetHashCode()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimEquatableEdge`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEquatableEdge`1.AllInstances.EqualsEquatableEdgeOfT0">
            <summary>Sets the shim of EquatableEdge`1.Equals(EquatableEdge`1&lt;!0&gt; other)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEquatableEdge`1.AllInstances.EqualsObject">
            <summary>Sets the shim of EquatableEdge`1.Equals(Object obj)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimEquatableEdge`1.AllInstances.GetHashCode01">
            <summary>Sets the shim of EquatableEdge`1.GetHashCode()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimGraphExtensions">
            <summary>Shim type of QuickGraph.GraphExtensions</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToAdjacencyGraphOf1IEnumerableOfSEquatableEdgeOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{QuickGraph.SEquatableEdge{``0}},QuickGraph.AdjacencyGraph{``0,QuickGraph.SEquatableEdge{``0}}})">
            <summary>Sets the shim of GraphExtensions.ToAdjacencyGraph(IEnumerable`1&lt;SEquatableEdge`1&lt;!!0&gt;&gt; vertexPairs)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToAdjacencyGraphOf1M0ArrayArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[][],QuickGraph.AdjacencyGraph{``0,QuickGraph.SEquatableEdge{``0}}})">
            <summary>Sets the shim of GraphExtensions.ToAdjacencyGraph(!!0[][] edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToAdjacencyGraphOf2IEnumerableOfM0FuncOfM0IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},QuickGraph.AdjacencyGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToAdjacencyGraph(IEnumerable`1&lt;!!0&gt; vertices, Func`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; outEdgesFactory)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToAdjacencyGraphOf2IEnumerableOfM0FuncOfM0IEnumerableOfM1Boolean``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean,QuickGraph.AdjacencyGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToAdjacencyGraph(IEnumerable`1&lt;!!0&gt; vertices, Func`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; outEdgesFactory, Boolean allowParallelEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToAdjacencyGraphOf2IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},QuickGraph.AdjacencyGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToAdjacencyGraph(IEnumerable`1&lt;!!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToAdjacencyGraphOf2IEnumerableOfM1Boolean``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},System.Boolean,QuickGraph.AdjacencyGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToAdjacencyGraph(IEnumerable`1&lt;!!1&gt; edges, Boolean allowParallelEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToArrayAdjacencyGraphOf2IVertexAndEdgeListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},QuickGraph.ArrayAdjacencyGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToArrayAdjacencyGraph(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; graph)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToArrayBidirectionalGraphOf2IBidirectionalGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IBidirectionalGraph{``0,``1},QuickGraph.ArrayBidirectionalGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToArrayBidirectionalGraph(IBidirectionalGraph`2&lt;!!0,!!1&gt; graph)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToArrayUndirectedGraphOf2IUndirectedGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IUndirectedGraph{``0,``1},QuickGraph.ArrayUndirectedGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToArrayUndirectedGraph(IUndirectedGraph`2&lt;!!0,!!1&gt; graph)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToBidirectionalGraphOf1IEnumerableOfSEquatableEdgeOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{QuickGraph.SEquatableEdge{``0}},QuickGraph.BidirectionalGraph{``0,QuickGraph.SEquatableEdge{``0}}})">
            <summary>Sets the shim of GraphExtensions.ToBidirectionalGraph(IEnumerable`1&lt;SEquatableEdge`1&lt;!!0&gt;&gt; vertexPairs)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToBidirectionalGraphOf2IEnumerableOfM0FuncOfM0IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},QuickGraph.BidirectionalGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToBidirectionalGraph(IEnumerable`1&lt;!!0&gt; vertices, Func`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; outEdgesFactory)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToBidirectionalGraphOf2IEnumerableOfM0FuncOfM0IEnumerableOfM1Boolean``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean,QuickGraph.BidirectionalGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToBidirectionalGraph(IEnumerable`1&lt;!!0&gt; vertices, Func`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; outEdgesFactory, Boolean allowParallelEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToBidirectionalGraphOf2IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},QuickGraph.BidirectionalGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToBidirectionalGraph(IEnumerable`1&lt;!!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToBidirectionalGraphOf2IEnumerableOfM1Boolean``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},System.Boolean,QuickGraph.BidirectionalGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToBidirectionalGraph(IEnumerable`1&lt;!!1&gt; edges, Boolean allowParallelEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToBidirectionalGraphOf2IVertexAndEdgeListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},QuickGraph.IBidirectionalGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToBidirectionalGraph(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; graph)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToCompressedRowGraphOf2IVertexAndEdgeListGraphOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.IVertexAndEdgeListGraph{``0,``1},QuickGraph.CompressedSparseRowGraph{``0}})">
            <summary>Sets the shim of GraphExtensions.ToCompressedRowGraph(IVertexAndEdgeListGraph`2&lt;!!0,!!1&gt; visitedGraph)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToDelegateBidirectionalIncidenceGraphOf2TryFuncOfM0IEnumerableOfM1TryFuncOfM0IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}},QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}},QuickGraph.DelegateBidirectionalIncidenceGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToDelegateBidirectionalIncidenceGraph(TryFunc`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; tryGetOutEdges, TryFunc`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; tryGetInEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToDelegateIncidenceGraphOf2FuncOfM0IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Collections.Generic.IEnumerable{``1}},QuickGraph.DelegateIncidenceGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToDelegateIncidenceGraph(Func`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; getOutEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToDelegateIncidenceGraphOf2TryFuncOfM0IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}},QuickGraph.DelegateIncidenceGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToDelegateIncidenceGraph(TryFunc`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; tryGetOutEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToDelegateUndirectedGraphOf2IEnumerableOfM0FuncOfM0IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},QuickGraph.DelegateUndirectedGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToDelegateUndirectedGraph(IEnumerable`1&lt;!!0&gt; vertices, Func`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; getAdjacentEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToDelegateUndirectedGraphOf2IEnumerableOfM0TryFuncOfM0IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}},QuickGraph.DelegateUndirectedGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToDelegateUndirectedGraph(IEnumerable`1&lt;!!0&gt; vertices, TryFunc`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; tryGetAdjacentEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToDelegateUndirectedGraphOf3IDictionaryOfM0M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{``0,``2},QuickGraph.DelegateVertexAndEdgeListGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToDelegateUndirectedGraph(IDictionary`2&lt;!!0,!!2&gt; dictionary)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToDelegateUndirectedGraphOf3IDictionaryOfM0M2FuncOfKeyValuePairOfM0M2IEnumerableOfM1``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{``0,``2},System.Func{System.Collections.Generic.KeyValuePair{``0,``2},System.Collections.Generic.IEnumerable{``1}},QuickGraph.DelegateVertexAndEdgeListGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToDelegateUndirectedGraph(IDictionary`2&lt;!!0,!!2&gt; dictionary, Func`2&lt;KeyValuePair`2&lt;!!0,!!2&gt;,IEnumerable`1&lt;!!1&gt;&gt; keyValueToOutEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToDelegateVertexAndEdgeListGraphOf2IEnumerableOfM0FuncOfM0IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},QuickGraph.DelegateVertexAndEdgeListGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToDelegateVertexAndEdgeListGraph(IEnumerable`1&lt;!!0&gt; vertices, Func`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; getOutEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToDelegateVertexAndEdgeListGraphOf2IEnumerableOfM0TryFuncOfM0IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}},QuickGraph.DelegateVertexAndEdgeListGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToDelegateVertexAndEdgeListGraph(IEnumerable`1&lt;!!0&gt; vertices, TryFunc`2&lt;!!0,IEnumerable`1&lt;!!1&gt;&gt; tryGetOutEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToTryFuncOf2FuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,``1},QuickGraph.TryFunc{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToTryFunc(Func`2&lt;!!0,!!1&gt; func)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToUndirectedGraphOf1IEnumerableOfSEquatableEdgeOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{QuickGraph.SEquatableEdge{``0}},QuickGraph.UndirectedGraph{``0,QuickGraph.SEquatableEdge{``0}}})">
            <summary>Sets the shim of GraphExtensions.ToUndirectedGraph(IEnumerable`1&lt;SEquatableEdge`1&lt;!!0&gt;&gt; vertexPairs)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToUndirectedGraphOf2IEnumerableOfM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},QuickGraph.UndirectedGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToUndirectedGraph(IEnumerable`1&lt;!!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToUndirectedGraphOf2IEnumerableOfM1Boolean``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``1},System.Boolean,QuickGraph.UndirectedGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToUndirectedGraph(IEnumerable`1&lt;!!1&gt; edges, Boolean allowParralelEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToVertexAndEdgeListGraphOf3IDictionaryOfM0M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{``0,``2},QuickGraph.DelegateVertexAndEdgeListGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToVertexAndEdgeListGraph(IDictionary`2&lt;!!0,!!2&gt; dictionary)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions.ToVertexAndEdgeListGraphOf3IDictionaryOfM0M2FuncOfKeyValuePairOfM0M2IEnumerableOfM1``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{``0,``2},System.Func{System.Collections.Generic.KeyValuePair{``0,``2},System.Collections.Generic.IEnumerable{``1}},QuickGraph.DelegateVertexAndEdgeListGraph{``0,``1}})">
            <summary>Sets the shim of GraphExtensions.ToVertexAndEdgeListGraph(IDictionary`2&lt;!!0,!!2&gt; dictionary, Func`2&lt;KeyValuePair`2&lt;!!0,!!2&gt;,IEnumerable`1&lt;!!1&gt;&gt; keyValueToOutEdges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions._ToDelegateUndirectedGraphb__7Of3KeyValuePairOfM0M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.KeyValuePair{``0,``2},System.Collections.Generic.IEnumerable{``1}})">
            <summary>Sets the shim of GraphExtensions.&lt;ToDelegateUndirectedGraph&gt;b__7(KeyValuePair`2&lt;!!0,!!2&gt; kv)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimGraphExtensions._ToVertexAndEdgeListGraphb__0Of3KeyValuePairOfM0M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.KeyValuePair{``0,``2},System.Collections.Generic.IEnumerable{``1}})">
            <summary>Sets the shim of GraphExtensions.&lt;ToVertexAndEdgeListGraph&gt;b__0(KeyValuePair`2&lt;!!0,!!2&gt; kv)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimGraphExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimNegativeCycleGraphException">
            <summary>Shim type of QuickGraph.NegativeCycleGraphException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNegativeCycleGraphException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNegativeCycleGraphException.#ctor(QuickGraph.NegativeCycleGraphException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNegativeCycleGraphException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNegativeCycleGraphException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNegativeCycleGraphException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNegativeCycleGraphException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNegativeCycleGraphException.Constructor">
            <summary>Sets the shim of NegativeCycleGraphException.NegativeCycleGraphException()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNegativeCycleGraphException.ConstructorString">
            <summary>Sets the shim of NegativeCycleGraphException.NegativeCycleGraphException(String message)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNegativeCycleGraphException.ConstructorStringException">
            <summary>Sets the shim of NegativeCycleGraphException.NegativeCycleGraphException(String message, Exception inner)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimNegativeCycleGraphException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimNegativeWeightException">
            <summary>Shim type of QuickGraph.NegativeWeightException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNegativeWeightException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNegativeWeightException.#ctor(QuickGraph.NegativeWeightException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNegativeWeightException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNegativeWeightException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNegativeWeightException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNegativeWeightException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNegativeWeightException.Constructor">
            <summary>Sets the shim of NegativeWeightException.NegativeWeightException()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNegativeWeightException.ConstructorString">
            <summary>Sets the shim of NegativeWeightException.NegativeWeightException(String message)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNegativeWeightException.ConstructorStringException">
            <summary>Sets the shim of NegativeWeightException.NegativeWeightException(String message, Exception inner)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimNegativeWeightException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimNonAcyclicGraphException">
            <summary>Shim type of QuickGraph.NonAcyclicGraphException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNonAcyclicGraphException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNonAcyclicGraphException.#ctor(QuickGraph.NonAcyclicGraphException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNonAcyclicGraphException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNonAcyclicGraphException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNonAcyclicGraphException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNonAcyclicGraphException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNonAcyclicGraphException.Constructor">
            <summary>Sets the shim of NonAcyclicGraphException.NonAcyclicGraphException()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNonAcyclicGraphException.ConstructorString">
            <summary>Sets the shim of NonAcyclicGraphException.NonAcyclicGraphException(String message)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNonAcyclicGraphException.ConstructorStringException">
            <summary>Sets the shim of NonAcyclicGraphException.NonAcyclicGraphException(String message, Exception inner)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimNonAcyclicGraphException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException">
            <summary>Shim type of QuickGraph.NonStronglyConnectedGraphException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException.#ctor(QuickGraph.NonStronglyConnectedGraphException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException.Constructor">
            <summary>Sets the shim of NonStronglyConnectedGraphException.NonStronglyConnectedGraphException()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException.ConstructorString">
            <summary>Sets the shim of NonStronglyConnectedGraphException.NonStronglyConnectedGraphException(String message)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException.ConstructorStringException">
            <summary>Sets the shim of NonStronglyConnectedGraphException.NonStronglyConnectedGraphException(String message, Exception inner)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimNonStronglyConnectedGraphException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException">
            <summary>Shim type of QuickGraph.ParallelEdgeNotAllowedException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException.#ctor(QuickGraph.ParallelEdgeNotAllowedException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException.Constructor">
            <summary>Sets the shim of ParallelEdgeNotAllowedException.ParallelEdgeNotAllowedException()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException.ConstructorString">
            <summary>Sets the shim of ParallelEdgeNotAllowedException.ParallelEdgeNotAllowedException(String message)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException.ConstructorStringException">
            <summary>Sets the shim of ParallelEdgeNotAllowedException.ParallelEdgeNotAllowedException(String message, Exception inner)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimParallelEdgeNotAllowedException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimQuickGraphException">
            <summary>Shim type of QuickGraph.QuickGraphException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimQuickGraphException.#ctor(QuickGraph.QuickGraphException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimQuickGraphException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimQuickGraphException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimQuickGraphException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimQuickGraphException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimQuickGraphException.Constructor">
            <summary>Sets the shim of QuickGraphException.QuickGraphException()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimQuickGraphException.ConstructorString">
            <summary>Sets the shim of QuickGraphException.QuickGraphException(String message)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimQuickGraphException.ConstructorStringException">
            <summary>Sets the shim of QuickGraphException.QuickGraphException(String message, Exception inner)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimQuickGraphException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2">
            <summary>Shim type of QuickGraph.ReversedBidirectionalGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.#ctor(QuickGraph.ReversedBidirectionalGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IBidirectionalGraph{`0,QuickGraph.SReversedEdge{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IBidirectionalIncidenceGraph{`0,QuickGraph.SReversedEdge{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,QuickGraph.SReversedEdge{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IEdgeSet{`0,QuickGraph.SReversedEdge{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IGraph{`0,QuickGraph.SReversedEdge{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IImplicitGraph{`0,QuickGraph.SReversedEdge{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IIncidenceGraph{`0,QuickGraph.SReversedEdge{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IVertexAndEdgeListGraph{`0,QuickGraph.SReversedEdge{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Bind(QuickGraph.IVertexListGraph{`0,QuickGraph.SReversedEdge{`0,`1}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.ConstructorIBidirectionalGraphOfT0T1">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.ReversedBidirectionalGraph`2(IBidirectionalGraph`2&lt;!0,!1&gt; originalGraph)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.ContainsEdgeSReversedEdgeOfT0T1">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.ContainsEdge(SReversedEdge`2&lt;!0,!1&gt; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.ContainsVertexT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.DegreeT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.EdgeCountGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.EdgesGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.InDegreeT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.InEdgeT0Int32">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.InEdgesT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.IsDirectedGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.IsInEdgesEmptyT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.OriginalGraphGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_OriginalGraph()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.OutDegreeT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.OutEdgeT0Int32">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.OutEdgesT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.TryGetEdgeT0T0SReversedEdgeOfT0T1Out">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.TryGetEdge(!0 source, !0 target, SReversedEdge`2&lt;!0,!1&gt;&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.TryGetEdgesT0T0IEnumerableOfSReversedEdgeOfT0T1Out">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;SReversedEdge`2&lt;!0,!1&gt;&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.TryGetInEdgesT0IEnumerableOfSReversedEdgeOfT0T1Out">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;SReversedEdge`2&lt;!0,!1&gt;&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.TryGetOutEdgesT0IEnumerableOfSReversedEdgeOfT0T1Out">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;SReversedEdge`2&lt;!0,!1&gt;&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.VertexCountGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.VerticesGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.ContainsEdgeSReversedEdgeOfT0T1">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.ContainsEdge(SReversedEdge`2&lt;!0,!1&gt; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.DegreeT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.InDegreeT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.InEdgeT0Int32">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.InEdgesT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.IsInEdgesEmptyT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.IsOutEdgesEmptyT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.OriginalGraphGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_OriginalGraph()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.OutDegreeT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.OutEdgeT0Int32">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.OutEdgesT0">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.TryGetEdgeT0T0SReversedEdgeOfT0T1Out">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.TryGetEdge(!0 source, !0 target, SReversedEdge`2&lt;!0,!1&gt;&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.TryGetEdgesT0T0IEnumerableOfSReversedEdgeOfT0T1Out">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;SReversedEdge`2&lt;!0,!1&gt;&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.TryGetInEdgesT0IEnumerableOfSReversedEdgeOfT0T1Out">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;SReversedEdge`2&lt;!0,!1&gt;&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.TryGetOutEdgesT0IEnumerableOfSReversedEdgeOfT0T1Out">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;SReversedEdge`2&lt;!0,!1&gt;&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimReversedBidirectionalGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of ReversedBidirectionalGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSEdge`1">
            <summary>Shim type of QuickGraph.SEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSEdge`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSEdge`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSEdge`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimSEdge`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSEdge`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSEquatableEdge`1">
            <summary>Shim type of QuickGraph.SEquatableEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSEquatableEdge`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSEquatableEdge`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSEquatableEdge`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimSEquatableEdge`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSEquatableEdge`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSEquatableUndirectedEdge`1">
            <summary>Shim type of QuickGraph.SEquatableUndirectedEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSEquatableUndirectedEdge`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSEquatableUndirectedEdge`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSEquatableUndirectedEdge`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimSEquatableUndirectedEdge`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSEquatableUndirectedEdge`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSReversedEdge`2">
            <summary>Shim type of QuickGraph.SReversedEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSReversedEdge`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSReversedEdge`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSReversedEdge`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimSReversedEdge`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSReversedEdge`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSTaggedEdge`2">
            <summary>Shim type of QuickGraph.STaggedEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSTaggedEdge`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSTaggedEdge`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSTaggedEdge`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimSTaggedEdge`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSTaggedEdge`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSTaggedEquatableEdge`2">
            <summary>Shim type of QuickGraph.STaggedEquatableEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSTaggedEquatableEdge`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSTaggedEquatableEdge`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSTaggedEquatableEdge`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimSTaggedEquatableEdge`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSTaggedEquatableEdge`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSUndirectedEdge`1">
            <summary>Shim type of QuickGraph.SUndirectedEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSUndirectedEdge`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSUndirectedEdge`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSUndirectedEdge`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimSUndirectedEdge`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSUndirectedEdge`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSUndirectedTaggedEdge`2">
            <summary>Shim type of QuickGraph.SUndirectedTaggedEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSUndirectedTaggedEdge`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSUndirectedTaggedEdge`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimSUndirectedTaggedEdge`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimSUndirectedTaggedEdge`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimSUndirectedTaggedEdge`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimTaggedEdge`2">
            <summary>Shim type of QuickGraph.TaggedEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEdge`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEdge`2.#ctor(QuickGraph.TaggedEdge{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEdge`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEdge`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEdge`2.Bind(QuickGraph.IEdge{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEdge`2.Bind(QuickGraph.ITagged{`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.ConstructorT0T0T1">
            <summary>Sets the shim of TaggedEdge`2.TaggedEdge`2(!0 source, !0 target, !1 tag)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.OnTagChangedEventArgs">
            <summary>Sets the shim of TaggedEdge`2.OnTagChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.TagChangedAddEventHandler">
            <summary>Sets the shim of TaggedEdge`2.add_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.TagChangedRemoveEventHandler">
            <summary>Sets the shim of TaggedEdge`2.remove_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.TagGet">
            <summary>Sets the shim of TaggedEdge`2.get_Tag()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.TagSetT1">
            <summary>Sets the shim of TaggedEdge`2.set_Tag(!1 value)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimTaggedEdge`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.AllInstances.OnTagChangedEventArgs">
            <summary>Sets the shim of TaggedEdge`2.OnTagChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.AllInstances.TagChangedAddEventHandler">
            <summary>Sets the shim of TaggedEdge`2.add_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.AllInstances.TagChangedRemoveEventHandler">
            <summary>Sets the shim of TaggedEdge`2.remove_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.AllInstances.TagGet">
            <summary>Sets the shim of TaggedEdge`2.get_Tag()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEdge`2.AllInstances.TagSetT1">
            <summary>Sets the shim of TaggedEdge`2.set_Tag(!1 value)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimTaggedEquatableEdge`2">
            <summary>Shim type of QuickGraph.TaggedEquatableEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.#ctor(QuickGraph.TaggedEquatableEdge{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.Bind(QuickGraph.IEdge{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.Bind(QuickGraph.ITagged{`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.Bind(System.IEquatable{QuickGraph.EquatableEdge{`0}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.ConstructorT0T0T1">
            <summary>Sets the shim of TaggedEquatableEdge`2.TaggedEquatableEdge`2(!0 source, !0 target, !1 tag)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.OnTagChangedEventArgs">
            <summary>Sets the shim of TaggedEquatableEdge`2.OnTagChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.TagChangedAddEventHandler">
            <summary>Sets the shim of TaggedEquatableEdge`2.add_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.TagChangedRemoveEventHandler">
            <summary>Sets the shim of TaggedEquatableEdge`2.remove_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.TagGet">
            <summary>Sets the shim of TaggedEquatableEdge`2.get_Tag()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.TagSetT1">
            <summary>Sets the shim of TaggedEquatableEdge`2.set_Tag(!1 value)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.AllInstances.OnTagChangedEventArgs">
            <summary>Sets the shim of TaggedEquatableEdge`2.OnTagChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.AllInstances.TagChangedAddEventHandler">
            <summary>Sets the shim of TaggedEquatableEdge`2.add_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.AllInstances.TagChangedRemoveEventHandler">
            <summary>Sets the shim of TaggedEquatableEdge`2.remove_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.AllInstances.TagGet">
            <summary>Sets the shim of TaggedEquatableEdge`2.get_Tag()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedEquatableEdge`2.AllInstances.TagSetT1">
            <summary>Sets the shim of TaggedEquatableEdge`2.set_Tag(!1 value)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2">
            <summary>Shim type of QuickGraph.TaggedUndirectedEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.#ctor(QuickGraph.TaggedUndirectedEdge{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.Bind(QuickGraph.IEdge{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.Bind(QuickGraph.ITagged{`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.Bind(QuickGraph.IUndirectedEdge{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.ConstructorT0T0T1">
            <summary>Sets the shim of TaggedUndirectedEdge`2.TaggedUndirectedEdge`2(!0 source, !0 target, !1 tag)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.OnTagChangedEventArgs">
            <summary>Sets the shim of TaggedUndirectedEdge`2.OnTagChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.TagChangedAddEventHandler">
            <summary>Sets the shim of TaggedUndirectedEdge`2.add_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.TagChangedRemoveEventHandler">
            <summary>Sets the shim of TaggedUndirectedEdge`2.remove_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.TagGet">
            <summary>Sets the shim of TaggedUndirectedEdge`2.get_Tag()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.TagSetT1">
            <summary>Sets the shim of TaggedUndirectedEdge`2.set_Tag(!1 value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.ToString">
            <summary>Sets the shim of TaggedUndirectedEdge`2.ToString()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.AllInstances.OnTagChangedEventArgs">
            <summary>Sets the shim of TaggedUndirectedEdge`2.OnTagChanged(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.AllInstances.TagChangedAddEventHandler">
            <summary>Sets the shim of TaggedUndirectedEdge`2.add_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.AllInstances.TagChangedRemoveEventHandler">
            <summary>Sets the shim of TaggedUndirectedEdge`2.remove_TagChanged(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.AllInstances.TagGet">
            <summary>Sets the shim of TaggedUndirectedEdge`2.get_Tag()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.AllInstances.TagSetT1">
            <summary>Sets the shim of TaggedUndirectedEdge`2.set_Tag(!1 value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimTaggedUndirectedEdge`2.AllInstances.ToString01">
            <summary>Sets the shim of TaggedUndirectedEdge`2.ToString()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2">
            <summary>Shim type of QuickGraph.UndirectedBidirectionalGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.#ctor(QuickGraph.UndirectedBidirectionalGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.Bind(QuickGraph.IImplicitUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.Bind(QuickGraph.IUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AdjacentDegreeT0">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AdjacentEdgeT0Int32">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AdjacentEdgesT0">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.ConstructorIBidirectionalGraphOfT0T1">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.UndirectedBidirectionalGraph`2(IBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.ContainsVertexT0">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.EdgeCountGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.EdgeEqualityComparerGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.EdgesGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.IsAdjacentEdgesEmptyT0">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.IsDirectedGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.VertexCountGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.VerticesGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.VisitedGraphGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.AdjacentDegreeT0">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.AdjacentEdgeT0Int32">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.AdjacentEdgesT0">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.EdgeEqualityComparerGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.IsAdjacentEdgesEmptyT0">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedBidirectionalGraph`2.AllInstances.VisitedGraphGet">
            <summary>Sets the shim of UndirectedBidirectionalGraph`2.get_VisitedGraph()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimUndirectedEdge`1">
            <summary>Shim type of QuickGraph.UndirectedEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedEdge`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedEdge`1.#ctor(QuickGraph.UndirectedEdge{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedEdge`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedEdge`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedEdge`1.Bind(QuickGraph.IEdge{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedEdge`1.Bind(QuickGraph.IUndirectedEdge{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdge`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdge`1.ConstructorT0T0">
            <summary>Sets the shim of UndirectedEdge`1.UndirectedEdge`1(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdge`1.SourceGet">
            <summary>Sets the shim of UndirectedEdge`1.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdge`1.TargetGet">
            <summary>Sets the shim of UndirectedEdge`1.get_Target()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdge`1.ToString">
            <summary>Sets the shim of UndirectedEdge`1.ToString()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimUndirectedEdge`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdge`1.AllInstances.SourceGet">
            <summary>Sets the shim of UndirectedEdge`1.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdge`1.AllInstances.TargetGet">
            <summary>Sets the shim of UndirectedEdge`1.get_Target()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdge`1.AllInstances.ToString01">
            <summary>Sets the shim of UndirectedEdge`1.ToString()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2">
            <summary>Shim type of QuickGraph.UndirectedEdgeEventArgs`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.#ctor(QuickGraph.UndirectedEdgeEventArgs{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.ConstructorT1Boolean">
            <summary>Sets the shim of UndirectedEdgeEventArgs`2.UndirectedEdgeEventArgs`2(!1 edge, Boolean reversed)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.ReversedGet">
            <summary>Sets the shim of UndirectedEdgeEventArgs`2.get_Reversed()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.SourceGet">
            <summary>Sets the shim of UndirectedEdgeEventArgs`2.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.TargetGet">
            <summary>Sets the shim of UndirectedEdgeEventArgs`2.get_Target()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.AllInstances.ReversedGet">
            <summary>Sets the shim of UndirectedEdgeEventArgs`2.get_Reversed()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.AllInstances.SourceGet">
            <summary>Sets the shim of UndirectedEdgeEventArgs`2.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedEdgeEventArgs`2.AllInstances.TargetGet">
            <summary>Sets the shim of UndirectedEdgeEventArgs`2.get_Target()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimUndirectedGraph`2">
            <summary>Shim type of QuickGraph.UndirectedGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.#ctor(QuickGraph.UndirectedGraph{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IMutableVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IImplicitUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IMutableEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IMutableGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IMutableUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IMutableVertexAndEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimUndirectedGraph`2.Bind(QuickGraph.IUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AddAndReturnEdgesT0">
            <summary>Sets the shim of UndirectedGraph`2.AddAndReturnEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of UndirectedGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AddEdgeT1">
            <summary>Sets the shim of UndirectedGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the shim of UndirectedGraph`2.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AddVertexT0">
            <summary>Sets the shim of UndirectedGraph`2.AddVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of UndirectedGraph`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AddVerticesAndEdgeT1">
            <summary>Sets the shim of UndirectedGraph`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AdjacentDegreeT0">
            <summary>Sets the shim of UndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AdjacentEdgeT0Int32">
            <summary>Sets the shim of UndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AdjacentEdgesT0">
            <summary>Sets the shim of UndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllowParallelEdgesGet">
            <summary>Sets the shim of UndirectedGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.Clear">
            <summary>Sets the shim of UndirectedGraph`2.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ClearAdjacentEdgesT0">
            <summary>Sets the shim of UndirectedGraph`2.ClearAdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ClearedAddEventHandler">
            <summary>Sets the shim of UndirectedGraph`2.add_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ClearedRemoveEventHandler">
            <summary>Sets the shim of UndirectedGraph`2.remove_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.Constructor">
            <summary>Sets the shim of UndirectedGraph`2.UndirectedGraph`2()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ConstructorBoolean">
            <summary>Sets the shim of UndirectedGraph`2.UndirectedGraph`2(Boolean allowParallelEdges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ConstructorBooleanEdgeEqualityComparerOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.UndirectedGraph`2(Boolean allowParallelEdges, EdgeEqualityComparer`2&lt;!0,!1&gt; edgeEqualityComparer)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ConstructorBooleanEdgeEqualityComparerOfT0T1Int32">
            <summary>Sets the shim of UndirectedGraph`2.UndirectedGraph`2(Boolean allowParallelEdges, EdgeEqualityComparer`2&lt;!0,!1&gt; edgeEqualityComparer, Int32 vertexCapacity)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ConstructorBooleanEdgeEqualityComparerOfT0T1Int32IEqualityComparerOfT0">
            <summary>Sets the shim of UndirectedGraph`2.UndirectedGraph`2(Boolean allowParallelEdges, EdgeEqualityComparer`2&lt;!0,!1&gt; edgeEqualityComparer, Int32 vertexCapacity, IEqualityComparer`1&lt;!0&gt; vertexComparer)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ContainsEdgeBetweenVerticesIEnumerableOfT1T1">
            <summary>Sets the shim of UndirectedGraph`2.ContainsEdgeBetweenVertices(IEnumerable`1&lt;!1&gt; edges, !1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ContainsEdgeT0T0">
            <summary>Sets the shim of UndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ContainsEdgeT1">
            <summary>Sets the shim of UndirectedGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ContainsVertexT0">
            <summary>Sets the shim of UndirectedGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.EdgeCapacityGet">
            <summary>Sets the shim of UndirectedGraph`2.get_EdgeCapacity()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.EdgeCapacitySetInt32">
            <summary>Sets the shim of UndirectedGraph`2.set_EdgeCapacity(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.EdgeCountGet">
            <summary>Sets the shim of UndirectedGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.EdgeEqualityComparerGet">
            <summary>Sets the shim of UndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.EdgeRemovedAddEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.add_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.EdgeRemovedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.remove_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.EdgesGet">
            <summary>Sets the shim of UndirectedGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.IsAdjacentEdgesEmptyT0">
            <summary>Sets the shim of UndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.IsDirectedGet">
            <summary>Sets the shim of UndirectedGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.IsEdgesEmptyGet">
            <summary>Sets the shim of UndirectedGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.IsVerticesEmptyGet">
            <summary>Sets the shim of UndirectedGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.ObjectInvariant">
            <summary>Sets the shim of UndirectedGraph`2.ObjectInvariant()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.OnClearedEventArgs">
            <summary>Sets the shim of UndirectedGraph`2.OnCleared(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.OnEdgeAddedT1">
            <summary>Sets the shim of UndirectedGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.OnEdgeRemovedT1">
            <summary>Sets the shim of UndirectedGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.OnVertexAddedT0">
            <summary>Sets the shim of UndirectedGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.OnVertexRemovedT0">
            <summary>Sets the shim of UndirectedGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.RemoveAdjacentEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.RemoveAdjacentEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.RemoveEdgeT1">
            <summary>Sets the shim of UndirectedGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.RemoveEdgesIEnumerableOfT1">
            <summary>Sets the shim of UndirectedGraph`2.RemoveEdges(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the shim of UndirectedGraph`2.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.RemoveVertexT0">
            <summary>Sets the shim of UndirectedGraph`2.RemoveVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.TrimEdgeExcess">
            <summary>Sets the shim of UndirectedGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of UndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.VertexAddedAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedGraph`2.add_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.VertexAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedGraph`2.remove_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.VertexCountGet">
            <summary>Sets the shim of UndirectedGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.VertexRemovedAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedGraph`2.add_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.VertexRemovedRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedGraph`2.remove_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.VerticesGet">
            <summary>Sets the shim of UndirectedGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AddAndReturnEdgesT0">
            <summary>Sets the shim of UndirectedGraph`2.AddAndReturnEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of UndirectedGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AddEdgeT1">
            <summary>Sets the shim of UndirectedGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the shim of UndirectedGraph`2.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AddVertexT0">
            <summary>Sets the shim of UndirectedGraph`2.AddVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the shim of UndirectedGraph`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AddVerticesAndEdgeT1">
            <summary>Sets the shim of UndirectedGraph`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AdjacentDegreeT0">
            <summary>Sets the shim of UndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AdjacentEdgeT0Int32">
            <summary>Sets the shim of UndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AdjacentEdgesT0">
            <summary>Sets the shim of UndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of UndirectedGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.Clear">
            <summary>Sets the shim of UndirectedGraph`2.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.ClearAdjacentEdgesT0">
            <summary>Sets the shim of UndirectedGraph`2.ClearAdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.ClearedAddEventHandler">
            <summary>Sets the shim of UndirectedGraph`2.add_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.ClearedRemoveEventHandler">
            <summary>Sets the shim of UndirectedGraph`2.remove_Cleared(EventHandler value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.ContainsEdgeBetweenVerticesIEnumerableOfT1T1">
            <summary>Sets the shim of UndirectedGraph`2.ContainsEdgeBetweenVertices(IEnumerable`1&lt;!1&gt; edges, !1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of UndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of UndirectedGraph`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of UndirectedGraph`2.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.EdgeAddedAddEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.add_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.EdgeAddedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.remove_EdgeAdded(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.EdgeCapacityGet">
            <summary>Sets the shim of UndirectedGraph`2.get_EdgeCapacity()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.EdgeCapacitySetInt32">
            <summary>Sets the shim of UndirectedGraph`2.set_EdgeCapacity(Int32 value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.EdgeCountGet">
            <summary>Sets the shim of UndirectedGraph`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.EdgeEqualityComparerGet">
            <summary>Sets the shim of UndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.EdgeRemovedAddEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.add_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.EdgeRemovedRemoveEdgeActionOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.remove_EdgeRemoved(EdgeAction`2&lt;!0,!1&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.EdgesGet">
            <summary>Sets the shim of UndirectedGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.IsAdjacentEdgesEmptyT0">
            <summary>Sets the shim of UndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.IsDirectedGet">
            <summary>Sets the shim of UndirectedGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of UndirectedGraph`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of UndirectedGraph`2.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.ObjectInvariant">
            <summary>Sets the shim of UndirectedGraph`2.ObjectInvariant()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.OnClearedEventArgs">
            <summary>Sets the shim of UndirectedGraph`2.OnCleared(EventArgs e)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.OnEdgeAddedT1">
            <summary>Sets the shim of UndirectedGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.OnEdgeRemovedT1">
            <summary>Sets the shim of UndirectedGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.OnVertexAddedT0">
            <summary>Sets the shim of UndirectedGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.OnVertexRemovedT0">
            <summary>Sets the shim of UndirectedGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.RemoveAdjacentEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.RemoveAdjacentEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the shim of UndirectedGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.RemoveEdgeT1">
            <summary>Sets the shim of UndirectedGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.RemoveEdgesIEnumerableOfT1">
            <summary>Sets the shim of UndirectedGraph`2.RemoveEdges(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the shim of UndirectedGraph`2.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.RemoveVertexT0">
            <summary>Sets the shim of UndirectedGraph`2.RemoveVertex(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.TrimEdgeExcess">
            <summary>Sets the shim of UndirectedGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of UndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.VertexAddedAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedGraph`2.add_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.VertexAddedRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedGraph`2.remove_VertexAdded(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.VertexCountGet">
            <summary>Sets the shim of UndirectedGraph`2.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.VertexRemovedAddVertexActionOfT0">
            <summary>Sets the shim of UndirectedGraph`2.add_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.VertexRemovedRemoveVertexActionOfT0">
            <summary>Sets the shim of UndirectedGraph`2.remove_VertexRemoved(VertexAction`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimUndirectedGraph`2.AllInstances.VerticesGet">
            <summary>Sets the shim of UndirectedGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimVertexEventArgs`1">
            <summary>Shim type of QuickGraph.VertexEventArgs`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimVertexEventArgs`1.#ctor(QuickGraph.VertexEventArgs{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimVertexEventArgs`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Fakes.ShimVertexEventArgs`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimVertexEventArgs`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimVertexEventArgs`1.ConstructorT0">
            <summary>Sets the shim of VertexEventArgs`1.VertexEventArgs`1(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimVertexEventArgs`1.VertexGet">
            <summary>Sets the shim of VertexEventArgs`1.get_Vertex()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.ShimVertexEventArgs`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Fakes.ShimVertexEventArgs`1.AllInstances.VertexGet">
            <summary>Sets the shim of VertexEventArgs`1.get_Vertex()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubAdjacencyGraph`2">
            <summary>Stub type of QuickGraph.AdjacencyGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.#ctor(System.Boolean,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.#ctor(System.Boolean,System.Int32,System.Int32,System.Func{System.Int32,QuickGraph.Collections.IVertexEdgeDictionary{`0,`1}})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.#ctor(System.Boolean,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.AddEdge(`1)">
            <summary>Sets the stub of AdjacencyGraph`2.AddEdge(!1 e)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.AddEdgeT1">
            <summary>Sets the stub of AdjacencyGraph`2.AddEdge(!1 e)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.AddVertex(`0)">
            <summary>Sets the stub of AdjacencyGraph`2.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of AdjacencyGraph`2.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the stub of AdjacencyGraph`2.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.AddVertexT0">
            <summary>Sets the stub of AdjacencyGraph`2.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.AddVerticesAndEdge(`1)">
            <summary>Sets the stub of AdjacencyGraph`2.AddVerticesAndEdge(!1 e)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.AddVerticesAndEdgeT1">
            <summary>Sets the stub of AdjacencyGraph`2.AddVerticesAndEdge(!1 e)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.EdgesGet">
            <summary>Sets the stub of AdjacencyGraph`2.get_Edges()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubAdjacencyGraph</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.OnEdgeAdded(`1)">
            <summary>Sets the stub of AdjacencyGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.OnEdgeAddedT1">
            <summary>Sets the stub of AdjacencyGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.OnEdgeRemoved(`1)">
            <summary>Sets the stub of AdjacencyGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.OnEdgeRemovedT1">
            <summary>Sets the stub of AdjacencyGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.OnVertexAdded(`0)">
            <summary>Sets the stub of AdjacencyGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.OnVertexAddedT0">
            <summary>Sets the stub of AdjacencyGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.OnVertexRemoved(`0)">
            <summary>Sets the stub of AdjacencyGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.OnVertexRemovedT0">
            <summary>Sets the stub of AdjacencyGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.OutEdges(`0)">
            <summary>Sets the stub of AdjacencyGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.OutEdgesT0">
            <summary>Sets the stub of AdjacencyGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.RemoveEdge(`1)">
            <summary>Sets the stub of AdjacencyGraph`2.RemoveEdge(!1 e)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.RemoveEdgeT1">
            <summary>Sets the stub of AdjacencyGraph`2.RemoveEdge(!1 e)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.RemoveVertex(`0)">
            <summary>Sets the stub of AdjacencyGraph`2.RemoveVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.RemoveVertexT0">
            <summary>Sets the stub of AdjacencyGraph`2.RemoveVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of AdjacencyGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of AdjacencyGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubAdjacencyGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of AdjacencyGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of AdjacencyGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubAdjacencyGraph`2.VerticesGet">
            <summary>Sets the stub of AdjacencyGraph`2.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubAdjacencyGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubAdjacencyGraph`2.Edges">
            <summary>Sets the stub of AdjacencyGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubAdjacencyGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubAdjacencyGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubAdjacencyGraph`2.Vertices">
            <summary>Sets the stub of AdjacencyGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubBidirectionAdapterGraph`2">
            <summary>Stub type of QuickGraph.BidirectionAdapterGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionAdapterGraph`2.#ctor(QuickGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionAdapterGraph`2.EdgesGet">
            <summary>Sets the stub of BidirectionAdapterGraph`2.get_Edges()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionAdapterGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubBidirectionAdapterGraph</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionAdapterGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionAdapterGraph`2.Edges">
            <summary>Sets the stub of BidirectionAdapterGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionAdapterGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionAdapterGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubBidirectionalGraph`2">
            <summary>Stub type of QuickGraph.BidirectionalGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.#ctor(System.Boolean,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.#ctor(System.Boolean,System.Int32,System.Func{System.Int32,QuickGraph.Collections.IVertexEdgeDictionary{`0,`1}})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.#ctor(System.Boolean,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.AddEdge(`1)">
            <summary>Sets the stub of BidirectionalGraph`2.AddEdge(!1 e)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.AddEdgeT1">
            <summary>Sets the stub of BidirectionalGraph`2.AddEdge(!1 e)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.AddVertex(`0)">
            <summary>Sets the stub of BidirectionalGraph`2.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of BidirectionalGraph`2.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the stub of BidirectionalGraph`2.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.AddVertexT0">
            <summary>Sets the stub of BidirectionalGraph`2.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.AddVerticesAndEdge(`1)">
            <summary>Sets the stub of BidirectionalGraph`2.AddVerticesAndEdge(!1 e)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.AddVerticesAndEdgeT1">
            <summary>Sets the stub of BidirectionalGraph`2.AddVerticesAndEdge(!1 e)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.EdgesGet">
            <summary>Sets the stub of BidirectionalGraph`2.get_Edges()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubBidirectionalGraph</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.OnEdgeAdded(`1)">
            <summary>Sets the stub of BidirectionalGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.OnEdgeAddedT1">
            <summary>Sets the stub of BidirectionalGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.OnEdgeRemoved(`1)">
            <summary>Sets the stub of BidirectionalGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.OnEdgeRemovedT1">
            <summary>Sets the stub of BidirectionalGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.OnVertexAdded(`0)">
            <summary>Sets the stub of BidirectionalGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.OnVertexAddedT0">
            <summary>Sets the stub of BidirectionalGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.OnVertexRemoved(`0)">
            <summary>Sets the stub of BidirectionalGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.OnVertexRemovedT0">
            <summary>Sets the stub of BidirectionalGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.RemoveEdge(`1)">
            <summary>Sets the stub of BidirectionalGraph`2.RemoveEdge(!1 e)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.RemoveEdgeT1">
            <summary>Sets the stub of BidirectionalGraph`2.RemoveEdge(!1 e)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalGraph`2.RemoveVertex(`0)">
            <summary>Sets the stub of BidirectionalGraph`2.RemoveVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.RemoveVertexT0">
            <summary>Sets the stub of BidirectionalGraph`2.RemoveVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalGraph`2.VerticesGet">
            <summary>Sets the stub of BidirectionalGraph`2.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionalGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionalGraph`2.Edges">
            <summary>Sets the stub of BidirectionalGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionalGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionalGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionalGraph`2.Vertices">
            <summary>Sets the stub of BidirectionalGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubBidirectionalMatrixGraph`1">
            <summary>Stub type of QuickGraph.BidirectionalMatrixGraph`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalMatrixGraph`1.#ctor(System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalMatrixGraph`1.InitializeStub">
            <summary>Initializes a new instance of type StubBidirectionalMatrixGraph</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalMatrixGraph`1.OnEdgeAdded(`0)">
            <summary>Sets the stub of BidirectionalMatrixGraph`1.OnEdgeAdded(!0 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalMatrixGraph`1.OnEdgeAddedT0">
            <summary>Sets the stub of BidirectionalMatrixGraph`1.OnEdgeAdded(!0 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubBidirectionalMatrixGraph`1.OnEdgeRemoved(`0)">
            <summary>Sets the stub of BidirectionalMatrixGraph`1.OnEdgeRemoved(!0 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubBidirectionalMatrixGraph`1.OnEdgeRemovedT0">
            <summary>Sets the stub of BidirectionalMatrixGraph`1.OnEdgeRemoved(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionalMatrixGraph`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionalMatrixGraph`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubBidirectionalMatrixGraph`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubDelegateBidirectionalIncidenceGraph`2">
            <summary>Stub type of QuickGraph.DelegateBidirectionalIncidenceGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateBidirectionalIncidenceGraph`2.#ctor(QuickGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}},QuickGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateBidirectionalIncidenceGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateBidirectionalIncidenceGraph</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateBidirectionalIncidenceGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateBidirectionalIncidenceGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateBidirectionalIncidenceGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubDelegateImplicitGraph`2">
            <summary>Stub type of QuickGraph.DelegateImplicitGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateImplicitGraph`2.#ctor(QuickGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateImplicitGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateImplicitGraph</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateImplicitGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateImplicitGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateImplicitGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubDelegateImplicitUndirectedGraph`2">
            <summary>Stub type of QuickGraph.DelegateImplicitUndirectedGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateImplicitUndirectedGraph`2.#ctor(QuickGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateImplicitUndirectedGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateImplicitUndirectedGraph</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateImplicitUndirectedGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateImplicitUndirectedGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateImplicitUndirectedGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubDelegateIncidenceGraph`2">
            <summary>Stub type of QuickGraph.DelegateIncidenceGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateIncidenceGraph`2.#ctor(QuickGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateIncidenceGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateIncidenceGraph</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateIncidenceGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateIncidenceGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateIncidenceGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubDelegateUndirectedGraph`2">
            <summary>Stub type of QuickGraph.DelegateUndirectedGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateUndirectedGraph`2.#ctor(System.Collections.Generic.IEnumerable{`0},QuickGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubDelegateUndirectedGraph`2.EdgesGet">
            <summary>Sets the stub of DelegateUndirectedGraph`2.get_Edges()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateUndirectedGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateUndirectedGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubDelegateUndirectedGraph`2.VerticesGet">
            <summary>Sets the stub of DelegateUndirectedGraph`2.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateUndirectedGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateUndirectedGraph`2.Edges">
            <summary>Sets the stub of DelegateUndirectedGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateUndirectedGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateUndirectedGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateUndirectedGraph`2.Vertices">
            <summary>Sets the stub of DelegateUndirectedGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubDelegateVertexAndEdgeListGraph`2">
            <summary>Stub type of QuickGraph.DelegateVertexAndEdgeListGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateVertexAndEdgeListGraph`2.#ctor(System.Collections.Generic.IEnumerable{`0},QuickGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubDelegateVertexAndEdgeListGraph`2.EdgesGet">
            <summary>Sets the stub of DelegateVertexAndEdgeListGraph`2.get_Edges()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubDelegateVertexAndEdgeListGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateVertexAndEdgeListGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubDelegateVertexAndEdgeListGraph`2.VerticesGet">
            <summary>Sets the stub of DelegateVertexAndEdgeListGraph`2.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateVertexAndEdgeListGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateVertexAndEdgeListGraph`2.Edges">
            <summary>Sets the stub of DelegateVertexAndEdgeListGraph`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateVertexAndEdgeListGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateVertexAndEdgeListGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubDelegateVertexAndEdgeListGraph`2.Vertices">
            <summary>Sets the stub of DelegateVertexAndEdgeListGraph`2.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubEdge`1">
            <summary>Stub type of QuickGraph.Edge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEdge`1.#ctor(`0,`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEdge`1.InitializeStub">
            <summary>Initializes a new instance of type StubEdge</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEdge`1.ToString">
            <summary>Sets the stub of Edge`1.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubEdge`1.ToString01">
            <summary>Sets the stub of Edge`1.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEdge`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEdge`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEdge`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubEdgeEventArgs`2">
            <summary>Stub type of QuickGraph.EdgeEventArgs`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEdgeEventArgs`2.#ctor(`1)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEdgeEventArgs`2.InitializeStub">
            <summary>Initializes a new instance of type StubEdgeEventArgs</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEdgeEventArgs`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEdgeEventArgs`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEdgeEventArgs`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubEdgeListGraph`2">
            <summary>Stub type of QuickGraph.EdgeListGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEdgeListGraph`2.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEdgeListGraph`2.#ctor(System.Boolean,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEdgeListGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubEdgeListGraph</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEdgeListGraph`2.OnEdgeAdded(`1)">
            <summary>Sets the stub of EdgeListGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubEdgeListGraph`2.OnEdgeAddedT1">
            <summary>Sets the stub of EdgeListGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEdgeListGraph`2.OnEdgeRemoved(`1)">
            <summary>Sets the stub of EdgeListGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubEdgeListGraph`2.OnEdgeRemovedT1">
            <summary>Sets the stub of EdgeListGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEdgeListGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEdgeListGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEdgeListGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubEquatableEdge`1">
            <summary>Stub type of QuickGraph.EquatableEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEquatableEdge`1.#ctor(`0,`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEquatableEdge`1.Equals(System.Object)">
            <summary>Sets the stub of EquatableEdge`1.Equals(Object obj)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubEquatableEdge`1.EqualsObject">
            <summary>Sets the stub of EquatableEdge`1.Equals(Object obj)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEquatableEdge`1.GetHashCode">
            <summary>Sets the stub of EquatableEdge`1.GetHashCode()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubEquatableEdge`1.GetHashCode01">
            <summary>Sets the stub of EquatableEdge`1.GetHashCode()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEquatableEdge`1.InitializeStub">
            <summary>Initializes a new instance of type StubEquatableEdge</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubEquatableEdge`1.ToString">
            <summary>Sets the stub of Edge`1.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubEquatableEdge`1.ToString01">
            <summary>Sets the stub of Edge`1.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEquatableEdge`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEquatableEdge`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubEquatableEdge`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIBidirectionalGraph`2">
            <summary>Stub type of QuickGraph.IBidirectionalGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIBidirectionalGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.DegreeT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.InDegreeT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.InEdgeT0Int32">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.InEdgesT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.IsInEdgesEmptyT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#Degree(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#InDegree(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#InEdge(`0,System.Int32)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#InEdges(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#IsInEdgesEmpty(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIBidirectionalGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2">
            <summary>Stub type of QuickGraph.IBidirectionalIncidenceGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIBidirectionalIncidenceGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.DegreeT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.InDegreeT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.InEdgeT0Int32">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.InEdgesT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.IsInEdgesEmptyT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#Degree(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#InDegree(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#InEdge(`0,System.Int32)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#InEdges(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#IsInEdgesEmpty(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIBidirectionalIncidenceGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubICloneableEdge`2">
            <summary>Stub type of QuickGraph.ICloneableEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubICloneableEdge`2.#ctor">
            <summary>Initializes a new instance of type StubICloneableEdge</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubICloneableEdge`2.CloneT0T0">
            <summary>Sets the stub of ICloneableEdge`2.Clone(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubICloneableEdge`2.qg::QuickGraph#ICloneableEdge{TVertex@TEdge}#Clone(`0,`0)">
            <summary>Sets the stub of ICloneableEdge`2.Clone(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubICloneableEdge`2.SourceGet">
            <summary>Sets the stub of IEdge`1.get_Source()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubICloneableEdge`2.TargetGet">
            <summary>Sets the stub of IEdge`1.get_Target()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubICloneableEdge`2.qg::QuickGraph#IEdge{TVertex}#Source">
            <summary>Sets the stub of IEdge`1.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubICloneableEdge`2.qg::QuickGraph#IEdge{TVertex}#Target">
            <summary>Sets the stub of IEdge`1.get_Target()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIEdge`1">
            <summary>Stub type of QuickGraph.IEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdge`1.#ctor">
            <summary>Initializes a new instance of type StubIEdge</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdge`1.SourceGet">
            <summary>Sets the stub of IEdge`1.get_Source()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdge`1.TargetGet">
            <summary>Sets the stub of IEdge`1.get_Target()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdge`1.qg::QuickGraph#IEdge{TVertex}#Source">
            <summary>Sets the stub of IEdge`1.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdge`1.qg::QuickGraph#IEdge{TVertex}#Target">
            <summary>Sets the stub of IEdge`1.get_Target()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2">
            <summary>Stub type of QuickGraph.IEdgeListAndIncidenceGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIEdgeListAndIncidenceGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListAndIncidenceGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIEdgeListGraph`2">
            <summary>Stub type of QuickGraph.IEdgeListGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIEdgeListGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListGraph`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListGraph`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListGraph`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListGraph`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeListGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeListGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIEdgeSet`2">
            <summary>Stub type of QuickGraph.IEdgeSet`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeSet`2.#ctor">
            <summary>Initializes a new instance of type StubIEdgeSet</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeSet`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeSet`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeSet`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIEdgeSet`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIEdgeSet`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeSet`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeSet`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIEdgeSet`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIGraph`2">
            <summary>Stub type of QuickGraph.IGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIHierarchy`2">
            <summary>Stub type of QuickGraph.IHierarchy`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.#ctor">
            <summary>Initializes a new instance of type StubIHierarchy</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.AddEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.AddVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.AddVerticesAndEdgeT1">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.ChildrenEdgesT0">
            <summary>Sets the stub of IHierarchy`2.ChildrenEdges(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.ChildrenVerticesT0">
            <summary>Sets the stub of IHierarchy`2.ChildrenVertices(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.ClearOutEdgesT0">
            <summary>Sets the stub of IMutableIncidenceGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.GetParentEdgeT0">
            <summary>Sets the stub of IHierarchy`2.GetParentEdge(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.GetParentT0">
            <summary>Sets the stub of IHierarchy`2.GetParent(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.InducedEdgeCountT0T0">
            <summary>Sets the stub of IHierarchy`2.InducedEdgeCount(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.IsCrossEdgeT1">
            <summary>Sets the stub of IHierarchy`2.IsCrossEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.IsInnerNodeT0">
            <summary>Sets the stub of IHierarchy`2.IsInnerNode(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.IsPredecessorOfT0T0">
            <summary>Sets the stub of IHierarchy`2.IsPredecessorOf(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.IsRealEdgeT1">
            <summary>Sets the stub of IHierarchy`2.IsRealEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IHierarchy{TVertex@TEdge}#ChildrenEdges(`0)">
            <summary>Sets the stub of IHierarchy`2.ChildrenEdges(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IHierarchy{TVertex@TEdge}#ChildrenVertices(`0)">
            <summary>Sets the stub of IHierarchy`2.ChildrenVertices(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IHierarchy{TVertex@TEdge}#GetParent(`0)">
            <summary>Sets the stub of IHierarchy`2.GetParent(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IHierarchy{TVertex@TEdge}#GetParentEdge(`0)">
            <summary>Sets the stub of IHierarchy`2.GetParentEdge(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IHierarchy{TVertex@TEdge}#InducedEdgeCount(`0,`0)">
            <summary>Sets the stub of IHierarchy`2.InducedEdgeCount(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IHierarchy{TVertex@TEdge}#IsCrossEdge(`1)">
            <summary>Sets the stub of IHierarchy`2.IsCrossEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IHierarchy{TVertex@TEdge}#IsInnerNode(`0)">
            <summary>Sets the stub of IHierarchy`2.IsInnerNode(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IHierarchy{TVertex@TEdge}#IsPredecessorOf(`0,`0)">
            <summary>Sets the stub of IHierarchy`2.IsPredecessorOf(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IHierarchy{TVertex@TEdge}#IsRealEdge(`1)">
            <summary>Sets the stub of IHierarchy`2.IsRealEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdgeIf(QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableGraph{TVertex@TEdge}#Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#ClearOutEdges(`0)">
            <summary>Sets the stub of IMutableIncidenceGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#RemoveOutEdgeIf(`0,QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableIncidenceGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#TrimEdgeExcess">
            <summary>Sets the stub of IMutableIncidenceGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableVertexAndEdgeSet{TVertex@TEdge}#AddVerticesAndEdge(`1)">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableVertexAndEdgeSet{TVertex@TEdge}#AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertexIf(QuickGraph.VertexPredicate{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.RemoveEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.RemoveOutEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableIncidenceGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.RemoveVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.RootGet">
            <summary>Sets the stub of IHierarchy`2.get_Root()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.TrimEdgeExcess">
            <summary>Sets the stub of IMutableIncidenceGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHierarchy`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IHierarchy{TVertex@TEdge}#Root">
            <summary>Sets the stub of IHierarchy`2.get_Root()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHierarchy`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIHyperEdge`1">
            <summary>Stub type of QuickGraph.IHyperEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIHyperEdge`1.#ctor">
            <summary>Initializes a new instance of type StubIHyperEdge</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHyperEdge`1.EndPointCountGet">
            <summary>Sets the stub of IHyperEdge`1.get_EndPointCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIHyperEdge`1.EndPointsGet">
            <summary>Sets the stub of IHyperEdge`1.get_EndPoints()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHyperEdge`1.qg::QuickGraph#IHyperEdge{TVertex}#EndPointCount">
            <summary>Sets the stub of IHyperEdge`1.get_EndPointCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIHyperEdge`1.qg::QuickGraph#IHyperEdge{TVertex}#EndPoints">
            <summary>Sets the stub of IHyperEdge`1.get_EndPoints()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIImplicitGraph`2">
            <summary>Stub type of QuickGraph.IImplicitGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIImplicitGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIImplicitGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIImplicitGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2">
            <summary>Stub type of QuickGraph.IImplicitUndirectedGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIImplicitUndirectedGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.AdjacentDegreeT0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.AdjacentEdgeT0Int32">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.AdjacentEdgesT0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.EdgeEqualityComparerGet">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.IsAdjacentEdgesEmptyT0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#AdjacentDegree(`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#AdjacentEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#AdjacentEdges(`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#IsAdjacentEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#EdgeEqualityComparer">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIImplicitUndirectedGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIImplicitVertexSet`1">
            <summary>Stub type of QuickGraph.IImplicitVertexSet`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitVertexSet`1.#ctor">
            <summary>Initializes a new instance of type StubIImplicitVertexSet</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIImplicitVertexSet`1.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIImplicitVertexSet`1.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIIncidenceGraph`2">
            <summary>Stub type of QuickGraph.IIncidenceGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIIncidenceGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIIncidenceGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIIncidenceGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIIncidenceGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2">
            <summary>Stub type of QuickGraph.IMutableBidirectionalGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIMutableBidirectionalGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.AddEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.AddVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.AddVerticesAndEdgeT1">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.ClearEdgesT0">
            <summary>Sets the stub of IMutableBidirectionalGraph`2.ClearEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.ClearInEdgesT0">
            <summary>Sets the stub of IMutableBidirectionalGraph`2.ClearInEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.ClearOutEdgesT0">
            <summary>Sets the stub of IMutableIncidenceGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.DegreeT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.InDegreeT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.InEdgeT0Int32">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.InEdgesT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.IsInEdgesEmptyT0">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#Degree(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.Degree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#InDegree(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#InEdge(`0,System.Int32)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#InEdges(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.InEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#IsInEdgesEmpty(`0)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IBidirectionalIncidenceGraph{TVertex@TEdge}#TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableBidirectionalGraph{TVertex@TEdge}#ClearEdges(`0)">
            <summary>Sets the stub of IMutableBidirectionalGraph`2.ClearEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableBidirectionalGraph{TVertex@TEdge}#ClearInEdges(`0)">
            <summary>Sets the stub of IMutableBidirectionalGraph`2.ClearInEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableBidirectionalGraph{TVertex@TEdge}#RemoveInEdgeIf(`0,QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableBidirectionalGraph`2.RemoveInEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdgeIf(QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableGraph{TVertex@TEdge}#Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#ClearOutEdges(`0)">
            <summary>Sets the stub of IMutableIncidenceGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#RemoveOutEdgeIf(`0,QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableIncidenceGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#TrimEdgeExcess">
            <summary>Sets the stub of IMutableIncidenceGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableVertexAndEdgeSet{TVertex@TEdge}#AddVerticesAndEdge(`1)">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableVertexAndEdgeSet{TVertex@TEdge}#AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertexIf(QuickGraph.VertexPredicate{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.RemoveEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.RemoveInEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableBidirectionalGraph`2.RemoveInEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.RemoveOutEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableIncidenceGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.RemoveVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.TrimEdgeExcess">
            <summary>Sets the stub of IMutableIncidenceGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IBidirectionalIncidenceGraph`2.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableBidirectionalGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIMutableEdgeListGraph`2">
            <summary>Stub type of QuickGraph.IMutableEdgeListGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIMutableEdgeListGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.AddEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdgeIf(QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IMutableGraph{TVertex@TEdge}#Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.RemoveEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIMutableGraph`2">
            <summary>Stub type of QuickGraph.IMutableGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIMutableGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableGraph`2.Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableGraph`2.qg::QuickGraph#IMutableGraph{TVertex@TEdge}#Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIMutableIncidenceGraph`2">
            <summary>Stub type of QuickGraph.IMutableIncidenceGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIMutableIncidenceGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.ClearOutEdgesT0">
            <summary>Sets the stub of IMutableIncidenceGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IMutableGraph{TVertex@TEdge}#Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#ClearOutEdges(`0)">
            <summary>Sets the stub of IMutableIncidenceGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#RemoveOutEdgeIf(`0,QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableIncidenceGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#TrimEdgeExcess">
            <summary>Sets the stub of IMutableIncidenceGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.RemoveOutEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableIncidenceGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.TrimEdgeExcess">
            <summary>Sets the stub of IMutableIncidenceGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableIncidenceGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIMutableUndirectedGraph`2">
            <summary>Stub type of QuickGraph.IMutableUndirectedGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIMutableUndirectedGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.AddEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.AddVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.AddVerticesAndEdgeT1">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.AdjacentDegreeT0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.AdjacentEdgeT0Int32">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.AdjacentEdgesT0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.ClearAdjacentEdgesT0">
            <summary>Sets the stub of IMutableUndirectedGraph`2.ClearAdjacentEdges(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.EdgeEqualityComparerGet">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.IsAdjacentEdgesEmptyT0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#AdjacentDegree(`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#AdjacentEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#AdjacentEdges(`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#IsAdjacentEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdgeIf(QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableGraph{TVertex@TEdge}#Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableUndirectedGraph{TVertex@TEdge}#ClearAdjacentEdges(`0)">
            <summary>Sets the stub of IMutableUndirectedGraph`2.ClearAdjacentEdges(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableUndirectedGraph{TVertex@TEdge}#RemoveAdjacentEdgeIf(`0,QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableUndirectedGraph`2.RemoveAdjacentEdgeIf(!0 vertex, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableVertexAndEdgeSet{TVertex@TEdge}#AddVerticesAndEdge(`1)">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableVertexAndEdgeSet{TVertex@TEdge}#AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertexIf(QuickGraph.VertexPredicate{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.RemoveAdjacentEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableUndirectedGraph`2.RemoveAdjacentEdgeIf(!0 vertex, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.RemoveEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.RemoveVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#EdgeEqualityComparer">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableUndirectedGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2">
            <summary>Stub type of QuickGraph.IMutableVertexAndEdgeListGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIMutableVertexAndEdgeListGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.AddEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.AddVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.AddVerticesAndEdgeT1">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.ClearOutEdgesT0">
            <summary>Sets the stub of IMutableIncidenceGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdgeIf(QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableGraph{TVertex@TEdge}#Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#ClearOutEdges(`0)">
            <summary>Sets the stub of IMutableIncidenceGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#RemoveOutEdgeIf(`0,QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableIncidenceGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#TrimEdgeExcess">
            <summary>Sets the stub of IMutableIncidenceGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableVertexAndEdgeSet{TVertex@TEdge}#AddVerticesAndEdge(`1)">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableVertexAndEdgeSet{TVertex@TEdge}#AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertexIf(QuickGraph.VertexPredicate{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.RemoveEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.RemoveOutEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableIncidenceGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.RemoveVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.TrimEdgeExcess">
            <summary>Sets the stub of IMutableIncidenceGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2">
            <summary>Stub type of QuickGraph.IMutableVertexAndEdgeSet`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.#ctor">
            <summary>Initializes a new instance of type StubIMutableVertexAndEdgeSet</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.AddEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.AddEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.AddVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRangeIEnumerableOfT1">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.AddVerticesAndEdgeT1">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.AddEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdge(`1)">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableEdgeListGraph{TVertex@TEdge}#RemoveEdgeIf(QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableGraph{TVertex@TEdge}#Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableVertexAndEdgeSet{TVertex@TEdge}#AddVerticesAndEdge(`1)">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableVertexAndEdgeSet{TVertex@TEdge}#AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>Sets the stub of IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(IEnumerable`1&lt;!1&gt; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertexIf(QuickGraph.VertexPredicate{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.RemoveEdgeIfEdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdgeIf(EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.RemoveEdgeT1">
            <summary>Sets the stub of IMutableEdgeListGraph`2.RemoveEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.RemoveVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexAndEdgeSet`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIMutableVertexListGraph`2">
            <summary>Stub type of QuickGraph.IMutableVertexListGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIMutableVertexListGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.AddVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.ClearOutEdgesT0">
            <summary>Sets the stub of IMutableIncidenceGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IMutableGraph{TVertex@TEdge}#Clear">
            <summary>Sets the stub of IMutableGraph`2.Clear()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#ClearOutEdges(`0)">
            <summary>Sets the stub of IMutableIncidenceGraph`2.ClearOutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#RemoveOutEdgeIf(`0,QuickGraph.EdgePredicate{`0,`1})">
            <summary>Sets the stub of IMutableIncidenceGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IMutableIncidenceGraph{TVertex@TEdge}#TrimEdgeExcess">
            <summary>Sets the stub of IMutableIncidenceGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertexIf(QuickGraph.VertexPredicate{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.RemoveOutEdgeIfT0EdgePredicateOfT0T1">
            <summary>Sets the stub of IMutableIncidenceGraph`2.RemoveOutEdgeIf(!0 v, EdgePredicate`2&lt;!0,!1&gt; predicate)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.RemoveVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.TrimEdgeExcess">
            <summary>Sets the stub of IMutableIncidenceGraph`2.TrimEdgeExcess()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexListGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIMutableVertexSet`1">
            <summary>Stub type of QuickGraph.IMutableVertexSet`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexSet`1.#ctor">
            <summary>Initializes a new instance of type StubIMutableVertexSet</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexSet`1.AddVertexRangeIEnumerableOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexSet`1.AddVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexSet`1.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexSet`1.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexSet`1.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexSet`1.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexSet`1.qg::QuickGraph#IMutableVertexSet{TVertex}#AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.AddVertexRange(IEnumerable`1&lt;!0&gt; vertices)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexSet`1.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertex(`0)">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIMutableVertexSet`1.qg::QuickGraph#IMutableVertexSet{TVertex}#RemoveVertexIf(QuickGraph.VertexPredicate{`0})">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexSet`1.RemoveVertexIfVertexPredicateOfT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertexIf(VertexPredicate`1&lt;!0&gt; pred)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexSet`1.RemoveVertexT0">
            <summary>Sets the stub of IMutableVertexSet`1.RemoveVertex(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexSet`1.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIMutableVertexSet`1.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexSet`1.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexSet`1.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIMutableVertexSet`1.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubITagged`1">
            <summary>Stub type of QuickGraph.ITagged`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubITagged`1.#ctor">
            <summary>Initializes a new instance of type StubITagged</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubITagged`1.AttachBackingFieldToTag">
            <summary>Attaches delegates to emulate StubITagged.Tag as a property with a backing field.</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubITagged`1.TagGet">
            <summary>Sets the stub of ITagged`1.get_Tag()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubITagged`1.TagSetT0">
            <summary>Sets the stub of ITagged`1.set_Tag(!0 value)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubITagged`1.qg::QuickGraph#ITagged{TTag}#Tag">
            <summary>Sets the stub of ITagged`1.get_Tag()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIUndirectedEdge`1">
            <summary>Stub type of QuickGraph.IUndirectedEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIUndirectedEdge`1.#ctor">
            <summary>Initializes a new instance of type StubIUndirectedEdge</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedEdge`1.SourceGet">
            <summary>Sets the stub of IEdge`1.get_Source()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedEdge`1.TargetGet">
            <summary>Sets the stub of IEdge`1.get_Target()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedEdge`1.qg::QuickGraph#IEdge{TVertex}#Source">
            <summary>Sets the stub of IEdge`1.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedEdge`1.qg::QuickGraph#IEdge{TVertex}#Target">
            <summary>Sets the stub of IEdge`1.get_Target()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIUndirectedGraph`2">
            <summary>Stub type of QuickGraph.IUndirectedGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIUndirectedGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIUndirectedGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.AdjacentDegreeT0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.AdjacentEdgeT0Int32">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.AdjacentEdgesT0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.EdgeEqualityComparerGet">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.IsAdjacentEdgesEmptyT0">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#AdjacentDegree(`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#AdjacentEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#AdjacentEdges(`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#IsAdjacentEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIUndirectedGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IImplicitUndirectedGraph{TVertex@TEdge}#EdgeEqualityComparer">
            <summary>Sets the stub of IImplicitUndirectedGraph`2.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIUndirectedGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2">
            <summary>Stub type of QuickGraph.IVertexAndEdgeListGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIVertexAndEdgeListGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.ContainsEdgeT1">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.EdgeCountGet">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.EdgesGet">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.IsEdgesEmptyGet">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#ContainsEdge(`1)">
            <summary>Sets the stub of IEdgeSet`2.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#EdgeCount">
            <summary>Sets the stub of IEdgeSet`2.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#Edges">
            <summary>Sets the stub of IEdgeSet`2.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IEdgeSet{TVertex@TEdge}#IsEdgesEmpty">
            <summary>Sets the stub of IEdgeSet`2.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexAndEdgeListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIVertexListGraph`2">
            <summary>Stub type of QuickGraph.IVertexListGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexListGraph`2.#ctor">
            <summary>Initializes a new instance of type StubIVertexListGraph</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.AllowParallelEdgesGet">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.ContainsEdgeT0T0">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.IsDirectedGet">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.IsOutEdgesEmptyT0">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.OutDegreeT0">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.OutEdgeT0Int32">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.OutEdgesT0">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#IsOutEdgesEmpty(`0)">
            <summary>Sets the stub of IImplicitGraph`2.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutDegree(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutDegree(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdge(`0,System.Int32)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#OutEdges(`0)">
            <summary>Sets the stub of IImplicitGraph`2.OutEdges(!0 v)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IImplicitGraph{TVertex@TEdge}#TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#ContainsEdge(`0,`0)">
            <summary>Sets the stub of IIncidenceGraph`2.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdge(`0,`0,`1@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IIncidenceGraph{TVertex@TEdge}#TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.TryGetEdgeT0T0T1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the stub of IIncidenceGraph`2.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the stub of IImplicitGraph`2.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexListGraph`2.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#AllowParallelEdges">
            <summary>Sets the stub of IGraph`2.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IGraph{TVertex@TEdge}#IsDirected">
            <summary>Sets the stub of IGraph`2.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexListGraph`2.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubIVertexSet`1">
            <summary>Stub type of QuickGraph.IVertexSet`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexSet`1.#ctor">
            <summary>Initializes a new instance of type StubIVertexSet</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexSet`1.ContainsVertexT0">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexSet`1.IsVerticesEmptyGet">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubIVertexSet`1.qg::QuickGraph#IImplicitVertexSet{TVertex}#ContainsVertex(`0)">
            <summary>Sets the stub of IImplicitVertexSet`1.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexSet`1.VertexCountGet">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubIVertexSet`1.VerticesGet">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexSet`1.qg::QuickGraph#IVertexSet{TVertex}#IsVerticesEmpty">
            <summary>Sets the stub of IVertexSet`1.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexSet`1.qg::QuickGraph#IVertexSet{TVertex}#VertexCount">
            <summary>Sets the stub of IVertexSet`1.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubIVertexSet`1.qg::QuickGraph#IVertexSet{TVertex}#Vertices">
            <summary>Sets the stub of IVertexSet`1.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubNegativeCycleGraphException">
            <summary>Stub type of QuickGraph.NegativeCycleGraphException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeCycleGraphException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeCycleGraphException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeCycleGraphException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeCycleGraphException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubNegativeCycleGraphException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeCycleGraphException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubNegativeCycleGraphException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeCycleGraphException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeCycleGraphException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeCycleGraphException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeCycleGraphException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeCycleGraphException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeCycleGraphException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeCycleGraphException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeCycleGraphException.InitializeStub">
            <summary>Initializes a new instance of type StubNegativeCycleGraphException</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeCycleGraphException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeCycleGraphException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeCycleGraphException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeCycleGraphException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeCycleGraphException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeCycleGraphException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeCycleGraphException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeCycleGraphException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeCycleGraphException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeCycleGraphException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeCycleGraphException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeCycleGraphException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeCycleGraphException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeCycleGraphException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubNegativeWeightException">
            <summary>Stub type of QuickGraph.NegativeWeightException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeWeightException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeWeightException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeWeightException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeWeightException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubNegativeWeightException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeWeightException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubNegativeWeightException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeWeightException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeWeightException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeWeightException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeWeightException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeWeightException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeWeightException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeWeightException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeWeightException.InitializeStub">
            <summary>Initializes a new instance of type StubNegativeWeightException</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeWeightException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeWeightException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeWeightException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeWeightException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNegativeWeightException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNegativeWeightException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeWeightException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeWeightException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeWeightException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeWeightException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeWeightException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeWeightException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeWeightException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNegativeWeightException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubNonAcyclicGraphException">
            <summary>Stub type of QuickGraph.NonAcyclicGraphException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonAcyclicGraphException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonAcyclicGraphException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonAcyclicGraphException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonAcyclicGraphException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubNonAcyclicGraphException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonAcyclicGraphException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubNonAcyclicGraphException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonAcyclicGraphException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonAcyclicGraphException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonAcyclicGraphException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonAcyclicGraphException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonAcyclicGraphException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonAcyclicGraphException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonAcyclicGraphException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonAcyclicGraphException.InitializeStub">
            <summary>Initializes a new instance of type StubNonAcyclicGraphException</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonAcyclicGraphException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonAcyclicGraphException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonAcyclicGraphException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonAcyclicGraphException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonAcyclicGraphException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonAcyclicGraphException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonAcyclicGraphException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonAcyclicGraphException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonAcyclicGraphException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonAcyclicGraphException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonAcyclicGraphException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonAcyclicGraphException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonAcyclicGraphException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonAcyclicGraphException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubNonStronglyConnectedGraphException">
            <summary>Stub type of QuickGraph.NonStronglyConnectedGraphException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubNonStronglyConnectedGraphException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubNonStronglyConnectedGraphException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.InitializeStub">
            <summary>Initializes a new instance of type StubNonStronglyConnectedGraphException</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubNonStronglyConnectedGraphException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubParallelEdgeNotAllowedException">
            <summary>Stub type of QuickGraph.ParallelEdgeNotAllowedException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubParallelEdgeNotAllowedException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubParallelEdgeNotAllowedException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.InitializeStub">
            <summary>Initializes a new instance of type StubParallelEdgeNotAllowedException</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubParallelEdgeNotAllowedException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubQuickGraphException">
            <summary>Stub type of QuickGraph.QuickGraphException</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubQuickGraphException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubQuickGraphException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubQuickGraphException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubQuickGraphException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubQuickGraphException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubQuickGraphException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubQuickGraphException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubQuickGraphException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubQuickGraphException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubQuickGraphException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubQuickGraphException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubQuickGraphException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubQuickGraphException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubQuickGraphException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubQuickGraphException.InitializeStub">
            <summary>Initializes a new instance of type StubQuickGraphException</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubQuickGraphException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubQuickGraphException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubQuickGraphException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubQuickGraphException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubQuickGraphException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubQuickGraphException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubQuickGraphException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubQuickGraphException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubQuickGraphException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubQuickGraphException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubQuickGraphException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubQuickGraphException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubQuickGraphException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubQuickGraphException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubTaggedEdge`2">
            <summary>Stub type of QuickGraph.TaggedEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedEdge`2.#ctor(`0,`0,`1)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedEdge`2.InitializeStub">
            <summary>Initializes a new instance of type StubTaggedEdge</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedEdge`2.OnTagChanged(System.EventArgs)">
            <summary>Sets the stub of TaggedEdge`2.OnTagChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubTaggedEdge`2.OnTagChangedEventArgs">
            <summary>Sets the stub of TaggedEdge`2.OnTagChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedEdge`2.ToString">
            <summary>Sets the stub of Edge`1.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubTaggedEdge`2.ToString01">
            <summary>Sets the stub of Edge`1.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubTaggedEdge`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubTaggedEdge`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubTaggedEdge`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubTaggedEquatableEdge`2">
            <summary>Stub type of QuickGraph.TaggedEquatableEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedEquatableEdge`2.#ctor(`0,`0,`1)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedEquatableEdge`2.Equals(System.Object)">
            <summary>Sets the stub of EquatableEdge`1.Equals(Object obj)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubTaggedEquatableEdge`2.EqualsObject">
            <summary>Sets the stub of EquatableEdge`1.Equals(Object obj)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedEquatableEdge`2.GetHashCode">
            <summary>Sets the stub of EquatableEdge`1.GetHashCode()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubTaggedEquatableEdge`2.GetHashCode01">
            <summary>Sets the stub of EquatableEdge`1.GetHashCode()</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedEquatableEdge`2.InitializeStub">
            <summary>Initializes a new instance of type StubTaggedEquatableEdge</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedEquatableEdge`2.OnTagChanged(System.EventArgs)">
            <summary>Sets the stub of TaggedEquatableEdge`2.OnTagChanged(EventArgs e)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubTaggedEquatableEdge`2.OnTagChangedEventArgs">
            <summary>Sets the stub of TaggedEquatableEdge`2.OnTagChanged(EventArgs e)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedEquatableEdge`2.ToString">
            <summary>Sets the stub of Edge`1.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubTaggedEquatableEdge`2.ToString01">
            <summary>Sets the stub of Edge`1.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubTaggedEquatableEdge`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubTaggedEquatableEdge`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubTaggedEquatableEdge`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubTaggedUndirectedEdge`2">
            <summary>Stub type of QuickGraph.TaggedUndirectedEdge`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedUndirectedEdge`2.#ctor(`0,`0,`1)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedUndirectedEdge`2.InitializeStub">
            <summary>Initializes a new instance of type StubTaggedUndirectedEdge</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubTaggedUndirectedEdge`2.ToString">
            <summary>Sets the stub of TaggedUndirectedEdge`2.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubTaggedUndirectedEdge`2.ToString01">
            <summary>Sets the stub of TaggedUndirectedEdge`2.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubTaggedUndirectedEdge`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubTaggedUndirectedEdge`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubTaggedUndirectedEdge`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubUndirectedEdge`1">
            <summary>Stub type of QuickGraph.UndirectedEdge`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedEdge`1.#ctor(`0,`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedEdge`1.InitializeStub">
            <summary>Initializes a new instance of type StubUndirectedEdge</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedEdge`1.ToString">
            <summary>Sets the stub of UndirectedEdge`1.ToString()</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubUndirectedEdge`1.ToString01">
            <summary>Sets the stub of UndirectedEdge`1.ToString()</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubUndirectedEdge`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubUndirectedEdge`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubUndirectedEdge`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubUndirectedEdgeEventArgs`2">
            <summary>Stub type of QuickGraph.UndirectedEdgeEventArgs`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedEdgeEventArgs`2.#ctor(`1,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedEdgeEventArgs`2.InitializeStub">
            <summary>Initializes a new instance of type StubUndirectedEdgeEventArgs</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubUndirectedEdgeEventArgs`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubUndirectedEdgeEventArgs`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubUndirectedEdgeEventArgs`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubUndirectedGraph`2">
            <summary>Stub type of QuickGraph.UndirectedGraph`2</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedGraph`2.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedGraph`2.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedGraph`2.#ctor(System.Boolean,QuickGraph.EdgeEqualityComparer{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedGraph`2.#ctor(System.Boolean,QuickGraph.EdgeEqualityComparer{`0,`1},System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedGraph`2.#ctor(System.Boolean,QuickGraph.EdgeEqualityComparer{`0,`1},System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedGraph`2.InitializeStub">
            <summary>Initializes a new instance of type StubUndirectedGraph</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedGraph`2.OnEdgeAdded(`1)">
            <summary>Sets the stub of UndirectedGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubUndirectedGraph`2.OnEdgeAddedT1">
            <summary>Sets the stub of UndirectedGraph`2.OnEdgeAdded(!1 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedGraph`2.OnEdgeRemoved(`1)">
            <summary>Sets the stub of UndirectedGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubUndirectedGraph`2.OnEdgeRemovedT1">
            <summary>Sets the stub of UndirectedGraph`2.OnEdgeRemoved(!1 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedGraph`2.OnVertexAdded(`0)">
            <summary>Sets the stub of UndirectedGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubUndirectedGraph`2.OnVertexAddedT0">
            <summary>Sets the stub of UndirectedGraph`2.OnVertexAdded(!0 args)</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubUndirectedGraph`2.OnVertexRemoved(`0)">
            <summary>Sets the stub of UndirectedGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="F:QuickGraph.Fakes.StubUndirectedGraph`2.OnVertexRemovedT0">
            <summary>Sets the stub of UndirectedGraph`2.OnVertexRemoved(!0 args)</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubUndirectedGraph`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubUndirectedGraph`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubUndirectedGraph`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Fakes.StubVertexEventArgs`1">
            <summary>Stub type of QuickGraph.VertexEventArgs`1</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubVertexEventArgs`1.#ctor(`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Fakes.StubVertexEventArgs`1.InitializeStub">
            <summary>Initializes a new instance of type StubVertexEventArgs</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubVertexEventArgs`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubVertexEventArgs`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Fakes.StubVertexEventArgs`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3">
            <summary>Shim type of QuickGraph.Predicates.FilteredBidirectionalGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.#ctor(QuickGraph.Predicates.FilteredBidirectionalGraph{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IBidirectionalGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IBidirectionalIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Bind(QuickGraph.IVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.ConstructorT2VertexPredicateOfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.FilteredBidirectionalGraph`3(!2 baseGraph, VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.ContainsEdgeT1">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.DegreeT0">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.EdgeCountGet">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.EdgesGet">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.InDegreeT0">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.InEdgeT0Int32">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.InEdgesT0">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.IsEdgesEmptyGet">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.IsInEdgesEmptyT0">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances.DegreeT0">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.Degree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances.EdgeCountGet">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances.EdgesGet">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances.InDegreeT0">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.InDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances.InEdgeT0Int32">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.InEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances.InEdgesT0">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.InEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances.IsInEdgesEmptyT0">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.IsInEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredBidirectionalGraph`3.AllInstances.TryGetInEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of FilteredBidirectionalGraph`3.TryGetInEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3">
            <summary>Shim type of QuickGraph.Predicates.FilteredEdgeListGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.#ctor(QuickGraph.Predicates.FilteredEdgeListGraph{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.ConstructorT2VertexPredicateOfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of FilteredEdgeListGraph`3.FilteredEdgeListGraph`3(!2 baseGraph, VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.ContainsEdgeT1">
            <summary>Sets the shim of FilteredEdgeListGraph`3.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.EdgeCountGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.EdgesGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.FilterEdgeT1">
            <summary>Sets the shim of FilteredEdgeListGraph`3.FilterEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.IsEdgesEmptyGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.IsVerticesEmptyGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.VertexCountGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.VerticesGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of FilteredEdgeListGraph`3.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.AllInstances.EdgeCountGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.AllInstances.EdgesGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.AllInstances.FilterEdgeT1">
            <summary>Sets the shim of FilteredEdgeListGraph`3.FilterEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.AllInstances.VertexCountGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredEdgeListGraph`3.AllInstances.VerticesGet">
            <summary>Sets the shim of FilteredEdgeListGraph`3.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3">
            <summary>Shim type of QuickGraph.Predicates.FilteredGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.#ctor(QuickGraph.Predicates.FilteredGraph{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.AllowParallelEdgesGet">
            <summary>Sets the shim of FilteredGraph`3.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.BaseGraphGet">
            <summary>Sets the shim of FilteredGraph`3.get_BaseGraph()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.ConstructorT2VertexPredicateOfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of FilteredGraph`3.FilteredGraph`3(!2 baseGraph, VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.EdgePredicateGet">
            <summary>Sets the shim of FilteredGraph`3.get_EdgePredicate()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.IsDirectedGet">
            <summary>Sets the shim of FilteredGraph`3.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.TestEdgeT1">
            <summary>Sets the shim of FilteredGraph`3.TestEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.VertexPredicateGet">
            <summary>Sets the shim of FilteredGraph`3.get_VertexPredicate()</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.AllInstances.AllowParallelEdgesGet">
            <summary>Sets the shim of FilteredGraph`3.get_AllowParallelEdges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.AllInstances.BaseGraphGet">
            <summary>Sets the shim of FilteredGraph`3.get_BaseGraph()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.AllInstances.EdgePredicateGet">
            <summary>Sets the shim of FilteredGraph`3.get_EdgePredicate()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.AllInstances.IsDirectedGet">
            <summary>Sets the shim of FilteredGraph`3.get_IsDirected()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.AllInstances.TestEdgeT1">
            <summary>Sets the shim of FilteredGraph`3.TestEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredGraph`3.AllInstances.VertexPredicateGet">
            <summary>Sets the shim of FilteredGraph`3.get_VertexPredicate()</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3">
            <summary>Shim type of QuickGraph.Predicates.FilteredImplicitGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.#ctor(QuickGraph.Predicates.FilteredImplicitGraph{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.ConstructorT2VertexPredicateOfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of FilteredImplicitGraph`3.FilteredImplicitGraph`3(!2 baseGraph, VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.IsOutEdgesEmptyT0">
            <summary>Sets the shim of FilteredImplicitGraph`3.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.OutDegreeT0">
            <summary>Sets the shim of FilteredImplicitGraph`3.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.OutEdgeT0Int32">
            <summary>Sets the shim of FilteredImplicitGraph`3.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.OutEdgesT0">
            <summary>Sets the shim of FilteredImplicitGraph`3.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of FilteredImplicitGraph`3.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.AllInstances.IsOutEdgesEmptyT0">
            <summary>Sets the shim of FilteredImplicitGraph`3.IsOutEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.AllInstances.OutDegreeT0">
            <summary>Sets the shim of FilteredImplicitGraph`3.OutDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.AllInstances.OutEdgeT0Int32">
            <summary>Sets the shim of FilteredImplicitGraph`3.OutEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.AllInstances.OutEdgesT0">
            <summary>Sets the shim of FilteredImplicitGraph`3.OutEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitGraph`3.AllInstances.TryGetOutEdgesT0IEnumerableOfT1Out">
            <summary>Sets the shim of FilteredImplicitGraph`3.TryGetOutEdges(!0 v, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3">
            <summary>Shim type of QuickGraph.Predicates.FilteredImplicitVertexSet`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.#ctor(QuickGraph.Predicates.FilteredImplicitVertexSet{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.ConstructorT2VertexPredicateOfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of FilteredImplicitVertexSet`3.FilteredImplicitVertexSet`3(!2 baseGraph, VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.ContainsVertexT0">
            <summary>Sets the shim of FilteredImplicitVertexSet`3.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredImplicitVertexSet`3.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of FilteredImplicitVertexSet`3.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3">
            <summary>Shim type of QuickGraph.Predicates.FilteredIncidenceGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.#ctor(QuickGraph.Predicates.FilteredIncidenceGraph{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.ConstructorT2VertexPredicateOfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of FilteredIncidenceGraph`3.FilteredIncidenceGraph`3(!2 baseGraph, VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.ContainsEdgeT0T0">
            <summary>Sets the shim of FilteredIncidenceGraph`3.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of FilteredIncidenceGraph`3.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of FilteredIncidenceGraph`3.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of FilteredIncidenceGraph`3.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of FilteredIncidenceGraph`3.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredIncidenceGraph`3.AllInstances.TryGetEdgesT0T0IEnumerableOfT1Out">
            <summary>Sets the shim of FilteredIncidenceGraph`3.TryGetEdges(!0 source, !0 target, IEnumerable`1&lt;!1&gt;&amp; edges)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3">
            <summary>Shim type of QuickGraph.Predicates.FilteredUndirectedGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.#ctor(QuickGraph.Predicates.FilteredUndirectedGraph{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.Bind(QuickGraph.IImplicitUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.Bind(QuickGraph.IUndirectedGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AdjacentDegreeT0">
            <summary>Sets the shim of FilteredUndirectedGraph`3.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AdjacentEdgeT0Int32">
            <summary>Sets the shim of FilteredUndirectedGraph`3.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AdjacentEdgesT0">
            <summary>Sets the shim of FilteredUndirectedGraph`3.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.ConstructorT2VertexPredicateOfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of FilteredUndirectedGraph`3.FilteredUndirectedGraph`3(!2 baseGraph, VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.ContainsEdgeT0T0">
            <summary>Sets the shim of FilteredUndirectedGraph`3.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.ContainsEdgeT1">
            <summary>Sets the shim of FilteredUndirectedGraph`3.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.ContainsVertexT0">
            <summary>Sets the shim of FilteredUndirectedGraph`3.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.EdgeCountGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.EdgeEqualityComparerGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.EdgesGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.IsAdjacentEdgesEmptyT0">
            <summary>Sets the shim of FilteredUndirectedGraph`3.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.IsEdgesEmptyGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.IsVerticesEmptyGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of FilteredUndirectedGraph`3.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.VertexCountGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.VerticesGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.AdjacentDegreeT0">
            <summary>Sets the shim of FilteredUndirectedGraph`3.AdjacentDegree(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.AdjacentEdgeT0Int32">
            <summary>Sets the shim of FilteredUndirectedGraph`3.AdjacentEdge(!0 v, Int32 index)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.AdjacentEdgesT0">
            <summary>Sets the shim of FilteredUndirectedGraph`3.AdjacentEdges(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.ContainsEdgeT0T0">
            <summary>Sets the shim of FilteredUndirectedGraph`3.ContainsEdge(!0 source, !0 target)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of FilteredUndirectedGraph`3.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.ContainsVertexT0">
            <summary>Sets the shim of FilteredUndirectedGraph`3.ContainsVertex(!0 vertex)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.EdgeCountGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.EdgeEqualityComparerGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_EdgeEqualityComparer()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.EdgesGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.IsAdjacentEdgesEmptyT0">
            <summary>Sets the shim of FilteredUndirectedGraph`3.IsAdjacentEdgesEmpty(!0 v)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_IsEdgesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.TryGetEdgeT0T0T1Out">
            <summary>Sets the shim of FilteredUndirectedGraph`3.TryGetEdge(!0 source, !0 target, !1&amp; edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.VertexCountGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredUndirectedGraph`3.AllInstances.VerticesGet">
            <summary>Sets the shim of FilteredUndirectedGraph`3.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3">
            <summary>Shim type of QuickGraph.Predicates.FilteredVertexAndEdgeListGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.#ctor(QuickGraph.Predicates.FilteredVertexAndEdgeListGraph{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.Bind(QuickGraph.IEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.Bind(QuickGraph.IEdgeSet{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.Bind(QuickGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.Bind(QuickGraph.IVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.ConstructorT2VertexPredicateOfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of FilteredVertexAndEdgeListGraph`3.FilteredVertexAndEdgeListGraph`3(!2 baseGraph, VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.ContainsEdgeT1">
            <summary>Sets the shim of FilteredVertexAndEdgeListGraph`3.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.EdgeCountGet">
            <summary>Sets the shim of FilteredVertexAndEdgeListGraph`3.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.EdgesGet">
            <summary>Sets the shim of FilteredVertexAndEdgeListGraph`3.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.IsEdgesEmptyGet">
            <summary>Sets the shim of FilteredVertexAndEdgeListGraph`3.get_IsEdgesEmpty()</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.AllInstances.ContainsEdgeT1">
            <summary>Sets the shim of FilteredVertexAndEdgeListGraph`3.ContainsEdge(!1 edge)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.AllInstances.EdgeCountGet">
            <summary>Sets the shim of FilteredVertexAndEdgeListGraph`3.get_EdgeCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.AllInstances.EdgesGet">
            <summary>Sets the shim of FilteredVertexAndEdgeListGraph`3.get_Edges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexAndEdgeListGraph`3.AllInstances.IsEdgesEmptyGet">
            <summary>Sets the shim of FilteredVertexAndEdgeListGraph`3.get_IsEdgesEmpty()</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3">
            <summary>Shim type of QuickGraph.Predicates.FilteredVertexListGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.#ctor(QuickGraph.Predicates.FilteredVertexListGraph{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.Bind(QuickGraph.IImplicitVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.Bind(QuickGraph.IVertexSet{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.Bind(QuickGraph.IGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.Bind(QuickGraph.IImplicitGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.Bind(QuickGraph.IIncidenceGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.Bind(QuickGraph.IVertexListGraph{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.ConstructorT2VertexPredicateOfT0EdgePredicateOfT0T1">
            <summary>Sets the shim of FilteredVertexListGraph`3.FilteredVertexListGraph`3(!2 baseGraph, VertexPredicate`1&lt;!0&gt; vertexPredicate, EdgePredicate`2&lt;!0,!1&gt; edgePredicate)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.IsVerticesEmptyGet">
            <summary>Sets the shim of FilteredVertexListGraph`3.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.VertexCountGet">
            <summary>Sets the shim of FilteredVertexListGraph`3.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.VerticesGet">
            <summary>Sets the shim of FilteredVertexListGraph`3.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.AllInstances.IsVerticesEmptyGet">
            <summary>Sets the shim of FilteredVertexListGraph`3.get_IsVerticesEmpty()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.AllInstances.VertexCountGet">
            <summary>Sets the shim of FilteredVertexListGraph`3.get_VertexCount()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimFilteredVertexListGraph`3.AllInstances.VerticesGet">
            <summary>Sets the shim of FilteredVertexListGraph`3.get_Vertices()</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimInDictionaryVertexPredicate`2">
            <summary>Shim type of QuickGraph.Predicates.InDictionaryVertexPredicate`2</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimInDictionaryVertexPredicate`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimInDictionaryVertexPredicate`2.#ctor(QuickGraph.Predicates.InDictionaryVertexPredicate{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimInDictionaryVertexPredicate`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimInDictionaryVertexPredicate`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimInDictionaryVertexPredicate`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimInDictionaryVertexPredicate`2.ConstructorIDictionaryOfT0T1">
            <summary>Sets the shim of InDictionaryVertexPredicate`2.InDictionaryVertexPredicate`2(IDictionary`2&lt;!0,!1&gt; dictionary)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimInDictionaryVertexPredicate`2.TestT0">
            <summary>Sets the shim of InDictionaryVertexPredicate`2.Test(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimInDictionaryVertexPredicate`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimInDictionaryVertexPredicate`2.AllInstances.TestT0">
            <summary>Sets the shim of InDictionaryVertexPredicate`2.Test(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimIsolatedVertexPredicate`2">
            <summary>Shim type of QuickGraph.Predicates.IsolatedVertexPredicate`2</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimIsolatedVertexPredicate`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimIsolatedVertexPredicate`2.#ctor(QuickGraph.Predicates.IsolatedVertexPredicate{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimIsolatedVertexPredicate`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimIsolatedVertexPredicate`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimIsolatedVertexPredicate`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimIsolatedVertexPredicate`2.ConstructorIBidirectionalGraphOfT0T1">
            <summary>Sets the shim of IsolatedVertexPredicate`2.IsolatedVertexPredicate`2(IBidirectionalGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimIsolatedVertexPredicate`2.TestT0">
            <summary>Sets the shim of IsolatedVertexPredicate`2.Test(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimIsolatedVertexPredicate`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimIsolatedVertexPredicate`2.AllInstances.TestT0">
            <summary>Sets the shim of IsolatedVertexPredicate`2.Test(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2">
            <summary>Shim type of QuickGraph.Predicates.ResidualEdgePredicate`2</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.#ctor(QuickGraph.Predicates.ResidualEdgePredicate{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.ConstructorIDictionaryOfT1Double">
            <summary>Sets the shim of ResidualEdgePredicate`2.ResidualEdgePredicate`2(IDictionary`2&lt;!1,Double&gt; residualCapacities)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.ResidualCapacitiesGet">
            <summary>Sets the shim of ResidualEdgePredicate`2.get_ResidualCapacities()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.TestT1">
            <summary>Sets the shim of ResidualEdgePredicate`2.Test(!1 e)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.AllInstances.ResidualCapacitiesGet">
            <summary>Sets the shim of ResidualEdgePredicate`2.get_ResidualCapacities()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimResidualEdgePredicate`2.AllInstances.TestT1">
            <summary>Sets the shim of ResidualEdgePredicate`2.Test(!1 e)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2">
            <summary>Shim type of QuickGraph.Predicates.ReversedResidualEdgePredicate`2</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.#ctor(QuickGraph.Predicates.ReversedResidualEdgePredicate{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.ConstructorIDictionaryOfT1DoubleIDictionaryOfT1T1">
            <summary>Sets the shim of ReversedResidualEdgePredicate`2.ReversedResidualEdgePredicate`2(IDictionary`2&lt;!1,Double&gt; residualCapacities, IDictionary`2&lt;!1,!1&gt; reversedEdges)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.ResidualCapacitiesGet">
            <summary>Sets the shim of ReversedResidualEdgePredicate`2.get_ResidualCapacities()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.ReversedEdgesGet">
            <summary>Sets the shim of ReversedResidualEdgePredicate`2.get_ReversedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.TestT1">
            <summary>Sets the shim of ReversedResidualEdgePredicate`2.Test(!1 e)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.AllInstances.ResidualCapacitiesGet">
            <summary>Sets the shim of ReversedResidualEdgePredicate`2.get_ResidualCapacities()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.AllInstances.ReversedEdgesGet">
            <summary>Sets the shim of ReversedResidualEdgePredicate`2.get_ReversedEdges()</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimReversedResidualEdgePredicate`2.AllInstances.TestT1">
            <summary>Sets the shim of ReversedResidualEdgePredicate`2.Test(!1 e)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimSinkVertexPredicate`2">
            <summary>Shim type of QuickGraph.Predicates.SinkVertexPredicate`2</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimSinkVertexPredicate`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimSinkVertexPredicate`2.#ctor(QuickGraph.Predicates.SinkVertexPredicate{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimSinkVertexPredicate`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.ShimSinkVertexPredicate`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimSinkVertexPredicate`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimSinkVertexPredicate`2.ConstructorIIncidenceGraphOfT0T1">
            <summary>Sets the shim of SinkVertexPredicate`2.SinkVertexPredicate`2(IIncidenceGraph`2&lt;!0,!1&gt; visitedGraph)</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimSinkVertexPredicate`2.TestT0">
            <summary>Sets the shim of SinkVertexPredicate`2.Test(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.ShimSinkVertexPredicate`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.ShimSinkVertexPredicate`2.AllInstances.TestT0">
            <summary>Sets the shim of SinkVertexPredicate`2.Test(!0 v)</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.StubFilteredBidirectionalGraph`3">
            <summary>Stub type of QuickGraph.Predicates.FilteredBidirectionalGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredBidirectionalGraph`3.#ctor(`2,QuickGraph.VertexPredicate{`0},QuickGraph.EdgePredicate{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredBidirectionalGraph`3.InitializeStub">
            <summary>Initializes a new instance of type StubFilteredBidirectionalGraph</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredBidirectionalGraph`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredBidirectionalGraph`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredBidirectionalGraph`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.StubFilteredGraph`3">
            <summary>Stub type of QuickGraph.Predicates.FilteredGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredGraph`3.#ctor(`2,QuickGraph.VertexPredicate{`0},QuickGraph.EdgePredicate{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredGraph`3.InitializeStub">
            <summary>Initializes a new instance of type StubFilteredGraph</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredGraph`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredGraph`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredGraph`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.StubFilteredImplicitGraph`3">
            <summary>Stub type of QuickGraph.Predicates.FilteredImplicitGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredImplicitGraph`3.#ctor(`2,QuickGraph.VertexPredicate{`0},QuickGraph.EdgePredicate{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredImplicitGraph`3.InitializeStub">
            <summary>Initializes a new instance of type StubFilteredImplicitGraph</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredImplicitGraph`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredImplicitGraph`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredImplicitGraph`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.StubFilteredImplicitVertexSet`3">
            <summary>Stub type of QuickGraph.Predicates.FilteredImplicitVertexSet`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredImplicitVertexSet`3.#ctor(`2,QuickGraph.VertexPredicate{`0},QuickGraph.EdgePredicate{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredImplicitVertexSet`3.InitializeStub">
            <summary>Initializes a new instance of type StubFilteredImplicitVertexSet</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredImplicitVertexSet`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredImplicitVertexSet`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredImplicitVertexSet`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.StubFilteredIncidenceGraph`3">
            <summary>Stub type of QuickGraph.Predicates.FilteredIncidenceGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredIncidenceGraph`3.#ctor(`2,QuickGraph.VertexPredicate{`0},QuickGraph.EdgePredicate{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredIncidenceGraph`3.InitializeStub">
            <summary>Initializes a new instance of type StubFilteredIncidenceGraph</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredIncidenceGraph`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredIncidenceGraph`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredIncidenceGraph`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.StubFilteredVertexAndEdgeListGraph`3">
            <summary>Stub type of QuickGraph.Predicates.FilteredVertexAndEdgeListGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredVertexAndEdgeListGraph`3.#ctor(`2,QuickGraph.VertexPredicate{`0},QuickGraph.EdgePredicate{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredVertexAndEdgeListGraph`3.InitializeStub">
            <summary>Initializes a new instance of type StubFilteredVertexAndEdgeListGraph</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredVertexAndEdgeListGraph`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredVertexAndEdgeListGraph`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredVertexAndEdgeListGraph`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:QuickGraph.Predicates.Fakes.StubFilteredVertexListGraph`3">
            <summary>Stub type of QuickGraph.Predicates.FilteredVertexListGraph`3</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredVertexListGraph`3.#ctor(`2,QuickGraph.VertexPredicate{`0},QuickGraph.EdgePredicate{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:QuickGraph.Predicates.Fakes.StubFilteredVertexListGraph`3.InitializeStub">
            <summary>Initializes a new instance of type StubFilteredVertexListGraph</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredVertexListGraph`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredVertexListGraph`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:QuickGraph.Predicates.Fakes.StubFilteredVertexListGraph`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
    </members>
</doc>
