<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphX.PCL.Common</name>
    </assembly>
    <members>
        <member name="F:GraphX.EdgesType.In">
            <summary>
            In edges
            </summary>
        </member>
        <member name="F:GraphX.EdgesType.Out">
            <summary>
            Out edges
            </summary>
        </member>
        <member name="F:GraphX.EdgesType.All">
            <summary>
            Both In and Out edges
            </summary>
        </member>
        <member name="F:GraphX.HighlightStrategy.UseExistingControls">
            <summary>
            Use existing vertex and edge controls
            No additional control manipulation needed
            </summary>
        </member>
        <member name="F:GraphX.HighlightStrategy.CreateControls">
            <summary>
            NOT IMPLEMENTED Create new vertex and edge controls
            Useful when edges is not created by default
            </summary>
        </member>
        <member name="T:GraphX.LayoutAlgorithmTypeEnum">
            <summary>
            Built-in layout algorithm types
            </summary>
        </member>
        <member name="F:GraphX.LayoutAlgorithmTypeEnum.SimpleRandom">
            <summary>
            Simple random vertices layout
            </summary>
        </member>
        <member name="F:GraphX.LayoutAlgorithmTypeEnum.Custom">
            <summary>
            Do not perform any layout. Layout will be manualy managed by end-user.
            </summary>
        </member>
        <member name="T:GraphX.PCL.Common.Enums.ProcessingOptionEnum">
            <summary>
            Specifies how object will be treated in calculations and visualization
            </summary>
        </member>
        <member name="F:GraphX.PCL.Common.Enums.ProcessingOptionEnum.Default">
            <summary>
            Process object as intended
            </summary>
        </member>
        <member name="F:GraphX.PCL.Common.Enums.ProcessingOptionEnum.Freeze">
            <summary>
            Freeze object so its position will remain intact for all subsequent calculations.
            </summary>
        </member>
        <member name="F:GraphX.PCL.Common.Enums.ProcessingOptionEnum.Exclude">
            <summary>
            Exclude object from all consequent calulations
            </summary>
        </member>
        <member name="T:GraphX.ICloneable">
            <summary>
            Cloning interface
            </summary>
        </member>
        <member name="M:GraphX.ICloneable.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:GraphX.GraphSharp.Algorithms.EdgeRouting.IEdgeRoutingAlgorithm`2">
            <summary>
            obsolete?
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="M:GraphX.GraphSharp.Algorithms.EdgeRouting.IExternalEdgeRouting`2.Compute">
            <summary>
            Run algorithm calculation
            </summary>
        </member>
        <member name="M:GraphX.GraphSharp.Algorithms.EdgeRouting.IExternalEdgeRouting`2.ComputeSingle(`1)">
            <summary>
            Compute edge routing for single edge
            </summary>
            <param name="edge">Supplied edge data</param>
        </member>
        <member name="M:GraphX.GraphSharp.Algorithms.EdgeRouting.IExternalEdgeRouting`2.UpdateVertexData(`0,GraphX.Measure.Point,GraphX.Measure.Rect)">
            <summary>
            Update data stored in algorithm for specified vertex
            </summary>
            <param name="vertex">Data vertex</param>
            <param name="position">Vertex position</param>
            <param name="size">Vertex size</param>
        </member>
        <member name="P:GraphX.GraphSharp.Algorithms.EdgeRouting.IExternalEdgeRouting`2.VertexSizes">
            <summary>
            Get visual vertex sizes (autofilled before Compute() call)
            </summary>
        </member>
        <member name="P:GraphX.GraphSharp.Algorithms.EdgeRouting.IExternalEdgeRouting`2.VertexPositions">
            <summary>
            Get visual vertex positions (autofilled before Compute() call)
            </summary>
        </member>
        <member name="P:GraphX.GraphSharp.Algorithms.EdgeRouting.IExternalEdgeRouting`2.EdgeRoutes">
            <summary>
            Get resulting edge routes collection 
            </summary>
        </member>
        <member name="P:GraphX.GraphSharp.Algorithms.EdgeRouting.IExternalEdgeRouting`2.AreaRectangle">
            <summary>
            GraphArea rendering size
            </summary>
        </member>
        <member name="M:GraphX.GraphSharp.Algorithms.Layout.IExternalLayout`1.Compute">
            <summary>
            Run algorithm calculation
            </summary>
        </member>
        <member name="P:GraphX.GraphSharp.Algorithms.Layout.IExternalLayout`1.VertexPositions">
            <summary>
            Vertex positions: initial and resulting (after Compute)
            </summary>
        </member>
        <member name="P:GraphX.GraphSharp.Algorithms.Layout.IExternalLayout`1.VertexSizes">
            <summary>
            Stores visual vertex sizes (autofilled if NeedVertexSizes property is set to true)
            </summary>
        </member>
        <member name="P:GraphX.GraphSharp.Algorithms.Layout.IExternalLayout`1.NeedVertexSizes">
            <summary>
            If algorithm needs to know visual vertex control sizes they will be set into VertexSizes property before calculation
            </summary>
        </member>
        <member name="P:GraphX.GraphSharp.Algorithms.Layout.IExternalLayout`1.SupportsObjectFreeze">
            <summary>
            Gets if algorithm supports vertex/edge freeze feature
            </summary>
        </member>
        <member name="M:GraphX.GraphSharp.Algorithms.OverlapRemoval.IExternalOverlapRemoval`1.Compute">
            <summary>
            Implements algorithm computation
            </summary>
        </member>
        <member name="P:GraphX.GraphSharp.Algorithms.OverlapRemoval.IExternalOverlapRemoval`1.Rectangles">
            <summary>
            Stores vertex rectangle sizes (filled automaticaly before calculation)
            </summary>
        </member>
        <member name="M:GraphX.IFileServiceProvider.SerializeDataToFile(System.String,System.Collections.Generic.List{GraphX.Models.GraphSerializationData})">
            <summary>
            Serializes specified list of data classes into file
            </summary>
            <param name="filename">File name</param>
            <param name="modelsList">Data classes list</param>
        </member>
        <member name="M:GraphX.IFileServiceProvider.DeserializeDataFromFile(System.String)">
            <summary>
            Deserializes specified file data into data classes list
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:GraphX.IGraphXEdge`1">
            <summary>
            Core vertex data interface
            </summary>
            <typeparam name="TVertex">Vertex data type</typeparam>
        </member>
        <member name="P:GraphX.IIdentifiableGraphDataObject.ID">
            <summary>
            Unique object identifier
            </summary>
        </member>
        <member name="P:GraphX.IIdentifiableGraphDataObject.SkipProcessing">
            <summary>
            Skip edge in algorithm calc and visual control generation
            </summary>
        </member>
        <member name="P:GraphX.IRoutingInfo.RoutingPoints">
            <summary>
            Routing points collection used to make Path visual object
            </summary>
        </member>
        <member name="P:GraphX.IGraphXEdge`1.Source">
            <summary>
            Source vertex
            </summary>
        </member>
        <member name="P:GraphX.IGraphXEdge`1.Target">
            <summary>
            Target vertex
            </summary>
        </member>
        <member name="P:GraphX.IGraphXEdge`1.IsSelfLoop">
            <summary>
            If edge is self-looped
            </summary>
        </member>
        <member name="P:GraphX.IGXLogicCore`3.FileServiceProvider">
            <summary>
            File service provider for graph serialization
            </summary>
        </member>
        <member name="T:GraphX.EdgeBase`1">
            <summary>
            Base class for graph edge
            </summary>
            <typeparam name="TVertex">Vertex class</typeparam>
        </member>
        <member name="P:GraphX.EdgeBase`1.SkipProcessing">
            <summary>
            Skip edge in algo calc and visualization
            </summary>
        </member>
        <member name="P:GraphX.EdgeBase`1.ID">
            <summary>
            Unique edge ID
            </summary>
        </member>
        <member name="P:GraphX.EdgeBase`1.IsSelfLoop">
            <summary>
            Returns true if Source vertex equals Target vertex
            </summary>
        </member>
        <member name="P:GraphX.EdgeBase`1.RoutingPoints">
            <summary>
            Routing points collection used to make Path visual object
            </summary>
        </member>
        <member name="P:GraphX.GraphState`3.ID">
            <summary>
            Graph state unique identificator
            </summary>
        </member>
        <member name="P:GraphX.GraphState`3.Description">
            <summary>
            State description
            </summary>
        </member>
        <member name="P:GraphX.GraphState`3.Graph">
            <summary>
            Saved data graph
            </summary>
        </member>
        <member name="P:GraphX.GraphState`3.VertexPositions">
            <summary>
            Saved vertex positions
            </summary>
        </member>
        <member name="P:GraphX.GraphState`3.VisibleEdges">
            <summary>
            Saved visible edges with route points
            </summary>
        </member>
        <member name="P:GraphX.VertexBase.SkipProcessing">
            <summary>
            Skip vertex in algo calc and visualization
            </summary>
        </member>
        <member name="P:GraphX.VertexBase.ID">
            <summary>
            Unique vertex ID
            </summary>
        </member>
        <member name="M:GraphX.WeightedEdge`1.UpdateVertices(`0,`0)">
            <summary>
            Update vertices (probably needed for serialization TODO)
            </summary>
            <param name="source">Source vertex data</param>
            <param name="Target">Target vertex data</param>
        </member>
        <member name="P:GraphX.WeightedEdge`1.Source">
            <summary>
            Source vertex data
            </summary>
        </member>
        <member name="P:GraphX.WeightedEdge`1.Target">
            <summary>
            Target vertex data
            </summary>
        </member>
        <member name="T:GraphX.Measure.Point">
            <summary>
            Custom PCL implementation of Point class
            </summary>
        </member>
        <member name="M:GraphX.Measure.Point.op_Equality(GraphX.Measure.Point,GraphX.Measure.Point)">
            <summary>
            Compares two Point instances for exact equality.
            Note that double values can acquire error when operated upon, such that
            an exact comparison between two values which are logically equal may fail.
            Furthermore, using this equality operator, Double.NaN is not equal to itself.
            </summary>
            <returns>
            bool - true if the two Point instances are exactly equal, false otherwise
            </returns>
            <param name='point1'>The first Point to compare</param>
            <param name='point2'>The second Point to compare</param>
        </member>
        <member name="M:GraphX.Measure.Point.op_Inequality(GraphX.Measure.Point,GraphX.Measure.Point)">
            <summary>
            Compares two Point instances for exact inequality.
            Note that double values can acquire error when operated upon, such that
            an exact comparison between two values which are logically equal may fail.
            Furthermore, using this equality operator, Double.NaN is not equal to itself.
            </summary>
            <returns>
            bool - true if the two Point instances are exactly unequal, false otherwise
            </returns>
            <param name='point1'>The first Point to compare</param>
            <param name='point2'>The second Point to compare</param>
        </member>
        <member name="M:GraphX.Measure.Point.Equals(GraphX.Measure.Point,GraphX.Measure.Point)">
            <summary>
            Compares two Point instances for object equality.  In this equality
            Double.NaN is equal to itself, unlike in numeric equality.
            Note that double values can acquire error when operated upon, such that
            an exact comparison between two values which
            are logically equal may fail.
            </summary>
            <returns>
            bool - true if the two Point instances are exactly equal, false otherwise
            </returns>
            <param name='point1'>The first Point to compare</param>
            <param name='point2'>The second Point to compare</param>
        </member>
        <member name="M:GraphX.Measure.Point.Equals(System.Object)">
            <summary>
            Equals - compares this Point with the passed in object.  In this equality
            Double.NaN is equal to itself, unlike in numeric equality.
            Note that double values can acquire error when operated upon, such that
            an exact comparison between two values which
            are logically equal may fail.
            </summary>
            <returns>
            bool - true if the object is an instance of Point and if it's equal to "this".
            </returns>
            <param name='o'>The object to compare to "this"</param>
        </member>
        <member name="M:GraphX.Measure.Point.Equals(GraphX.Measure.Point)">
            <summary>
            Equals - compares this Point with the passed in object.  In this equality
            Double.NaN is equal to itself, unlike in numeric equality.
            Note that double values can acquire error when operated upon, such that
            an exact comparison between two values which
            are logically equal may fail.
            </summary>
            <returns>
            bool - true if "value" is equal to "this".
            </returns>
            <param name='value'>The Point to compare to "this"</param>
        </member>
        <member name="M:GraphX.Measure.Point.GetHashCode">
            <summary>
            Returns the HashCode for this Point
            </summary>
            <returns>
            int - the HashCode for this Point
            </returns>
        </member>
        <member name="M:GraphX.Measure.Point.op_Subtraction(GraphX.Measure.Point,GraphX.Measure.Point)">
            ARITHMETIC
        </member>
        <member name="T:GraphX.Measure.Rect">
            <summary>
            Custom PCL implementation of Rect class
            </summary>
        </member>
    </members>
</doc>
