<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphX.WPF.Controls</name>
    </assembly>
    <members>
        <member name="M:GraphX.Models.Interfaces.IOneWayControlAnimation.AnimateVertex(GraphX.VertexControl)">
            <summary>
            Run vertex animation
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:GraphX.Models.Interfaces.IOneWayControlAnimation.AnimateEdge(GraphX.EdgeControl)">
            <summary>
            Run edge animation
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:GraphX.Models.Interfaces.IOneWayControlAnimation.Duration">
            <summary>
            Animation duration
            </summary>
        </member>
        <member name="E:GraphX.Models.Interfaces.IOneWayControlAnimation.Completed">
            <summary>
            Completed event that fires when animation is complete. Must be fired for correct object removal when animation ends.
            </summary>
        </member>
        <member name="E:GraphX.Models.Animations.DeleteShrinkAnimation.Completed">
            <summary>
            Completed event that fires when animation is complete. Must be fired for correct object removal when animation ends.
            </summary>
        </member>
        <member name="P:GraphX.Models.Animations.MouseOverScaleAnimation.ScaleTo">
            <summary>
            Scale to this value. Default size is 1. For ex. 2 will double the size of the object.
            </summary>
        </member>
        <member name="P:GraphX.Models.Animations.MouseOverScaleAnimation.CenterScale">
            <summary>
            Scale from the center of the object or from the left top corner
            </summary>
        </member>
        <member name="P:GraphX.Models.Animations.MouseOverScaleAnimation.Duration">
            <summary>
            Animation duration
            </summary>
        </member>
        <member name="T:GraphX.Animations.MoveAnimationBase">
            <summary>
            Base class for move animation.
            Logic:
            1. Load all vertex and edge data using AddVertexData and AddEdgeData
            2. Use RunVertexAnimation and RunEdgeAnimation to create and batch-execute all animations
            3. You need to manually trace and execute OnCompleted() method to fire completion event
            </summary>
        </member>
        <member name="M:GraphX.Animations.MoveAnimationBase.Cleanup">
            <summary>
            Optional cleanup that needs to be performed before or after class usage
            </summary>
        </member>
        <member name="M:GraphX.Animations.MoveAnimationBase.CleanupBaseData">
            <summary>
            Executed before each class usage to clean all existing data left from previous calls
            </summary>
        </member>
        <member name="M:GraphX.Animations.MoveAnimationBase.AddVertexData(GraphX.IGraphControl,GraphX.Measure.Point)">
            <summary>
            Animates the control of a vertex to a given position.
            </summary>
            <param name="control">Vertex control which should be animated to its new position</param>
            <param name="coord">New vertex position coordinates</param>
        </member>
        <member name="M:GraphX.Animations.MoveAnimationBase.AddEdgeData(GraphX.IGraphControl)">
            <summary>
            Additional edge animation performed along with vertex animation
            </summary>
            <param name="control">Edge control</param>
        </member>
        <member name="M:GraphX.Animations.MoveAnimationBase.RunVertexAnimation">
            <summary>
            Run vertex animations using VertexStorage data
            </summary>
        </member>
        <member name="M:GraphX.Animations.MoveAnimationBase.RunEdgeAnimation">
            <summary>
            Run edge animations using EdgeStorage data
            </summary>
        </member>
        <member name="M:GraphX.Animations.MoveAnimationBase.OnCompleted">
            <summary>
            Raise on animation completion event
            </summary>
        </member>
        <member name="P:GraphX.Animations.MoveAnimationBase.VertexStorage">
            <summary>
            Stores initial vertex data
            </summary>
        </member>
        <member name="P:GraphX.Animations.MoveAnimationBase.EdgeStorage">
            <summary>
            Stores initial edges data
            </summary>
        </member>
        <member name="P:GraphX.Animations.MoveAnimationBase.Duration">
            <summary>
            The duration of the animation. Default value is 2.
            </summary>
        </member>
        <member name="E:GraphX.Animations.MoveAnimationBase.Completed">
            <summary>
            Event raised on animation completion
            </summary>
        </member>
        <member name="M:GraphX.Animations.MoveFadeAnimation.CreateStory(GraphX.IGraphControl,System.Double,System.Double,System.EventHandler)">
            <summary>
            Storyboard creation
            </summary>
            <param name="control">Control</param>
            <param name="start">Start param value</param>
            <param name="end">End Param value</param>
            <returns></returns>
        </member>
        <member name="T:GraphX.ITrackableContent">
            <summary>
            Interface that represents trackable content object
            </summary>
        </member>
        <member name="E:GraphX.ITrackableContent.ContentSizeChanged">
            <summary>
            Rises when content size changed
            </summary>
        </member>
        <member name="P:GraphX.ITrackableContent.ContentSize">
            <summary>
            Gets actual content rectangle size
            </summary>
        </member>
        <member name="P:GraphX.VertexLabelControl.Angle">
            <summary>
            Gets or sets label drawing angle in degrees
            </summary>
        </member>
        <member name="P:GraphX.VertexLabelControl.LabelPosition">
            <summary>
            Gets or sets label position if LabelPositionMode is set to Coordinates
            Position is always measured from top left VERTEX corner.
            </summary>
        </member>
        <member name="P:GraphX.VertexLabelControl.LabelPositionMode">
            <summary>
            Gets or set label positioning mode
            </summary>
        </member>
        <member name="P:GraphX.VertexLabelControl.LabelPositionSide">
            <summary>
            Gets or sets label position side if LabelPositionMode is set to Sides
            </summary>
        </member>
        <member name="F:GraphX.VertexLabelPositionMode.Sides">
            <summary>
            Vertex label is positioned on one of the sides
            </summary>
        </member>
        <member name="F:GraphX.VertexLabelPositionMode.Coordinates">
            <summary>
            Vertex label is positioned using custom coordinates
            </summary>
        </member>
        <member name="P:GraphX.Controls.AreaSelectedEventArgs.Rectangle">
            <summary>
            Rectangle data in coordinates of content object
            </summary>
        </member>
        <member name="T:GraphX.EdgeControl">
            <summary>
            Visual edge control
            </summary>
        </member>
        <member name="F:GraphX.EdgeControl._linegeometry">
            <summary>
            Geometry object that represents visual edge path. Applied in OnApplyTemplate and OnRender.
            </summary>
        </member>
        <member name="F:GraphX.EdgeControl._arrowgeometry">
            <summary>
            Geometry object that represents visual edge arrow. Applied in OnApplyTemplate and OnRender.
            </summary>
        </member>
        <member name="F:GraphX.EdgeControl._linePathObject">
            <summary>
            Templated Path object to operate with routed path
            </summary>
        </member>
        <member name="F:GraphX.EdgeControl._arrowPathObject">
            <summary>
            Templated Path object to operate with routed path arrow head
            </summary>
        </member>
        <member name="F:GraphX.EdgeControl._edgeLabelControl">
            <summary>
            Templated label control to display labels
            </summary>
        </member>
        <member name="M:GraphX.EdgeControl.SetPosition(System.Windows.Point,System.Boolean)">
            <summary>
            Set attached coordinates X and Y
            </summary>
            <param name="pt"></param>
            <param name="alsoFinal"></param>
        </member>
        <member name="M:GraphX.EdgeControl.GetPosition(System.Boolean,System.Boolean)">
            <summary>
            Get control position on the GraphArea panel in attached coords X and Y
            </summary>
            <param name="final"></param>
            <param name="round"></param>
        </member>
        <member name="M:GraphX.EdgeControl.GetPositionGraphX(System.Boolean,System.Boolean)">
            <summary>
            Get control position on the GraphArea panel in attached coords X and Y
            </summary>
            <param name="final"></param>
            <param name="round"></param>
        </member>
        <member name="M:GraphX.EdgeControl.GetEdgePathManually">
            <summary>
            Gets current edge path geometry object
            </summary>
        </member>
        <member name="M:GraphX.EdgeControl.SetEdgePathManually(System.Windows.Media.PathGeometry)">
            <summary>
            Sets current edge path geometry object
            </summary>
        </member>
        <member name="M:GraphX.EdgeControl.GetParallelOffset(GraphX.VertexControl,GraphX.VertexControl,System.Int32)">
            <summary>
            Gets the offset point for edge parallelization
            </summary>
            <param name="source">Source vertex</param>
            <param name="target">Target vertex</param>
            <param name="sideDistance">Distance between edges</param>
        </member>
        <member name="F:GraphX.EdgeControl.SourceConnectionPoint">
            <summary>
            Internal value to store last calculated Source vertex connection point
            </summary>
        </member>
        <member name="F:GraphX.EdgeControl.TargetConnectionPoint">
            <summary>
            Internal value to store last calculated Target vertex connection point
            </summary>
        </member>
        <member name="M:GraphX.EdgeControl.PrepareEdgePath(System.Boolean,GraphX.Measure.Point[],System.Boolean)">
            <summary>
            Create and apply edge path using calculated ER parameters stored in edge
            </summary>
            <param name="useCurrentCoords">Use current vertices coordinates or final coorfinates (for.ex if move animation is active final coords will be its destination)</param>
            <param name="externalRoutingPoints">Provided custom routing points will be used instead of stored ones.</param>
            <param name="updateLabel">Should edge label be updated in this pass</param>
        </member>
        <member name="P:GraphX.EdgeControl.RootArea">
            <summary>
            Gets or sets parent GraphArea visual
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.IsSelfLooped">
            <summary>
            Gets if this edge is self looped (have same Source and Target)
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.LabelAngle">
            <summary>
            Gets or sets vertex label angle
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.DashStyle">
            <summary>
            Gets or sets edge dash style
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.CanBeParallel">
            <summary>
            Gets or sets if this edge can be paralellized if GraphArea.EnableParallelEdges is true.
            If not it will be drawn by default.
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.UpdateLabelPosition">
            <summary>
            Gets or sets if label position should be updated on edge update
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.IsHiddenEdgesUpdated">
            <summary>
            Gets or set if hidden edges should be updated when connected vertices positions are changed. Default value is True.
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.ShowArrows">
            <summary>
            Show arrows on the edge ends. Default value is true.
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.ShowLabel">
            <summary>
            Show edge label.Default value is False.
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.AlignLabelsToEdges">
            <summary>
            Gets or sets if lables should be aligned to edges and be displayed under the same angle
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.LabelVerticalOffset">
            <summary>
            Offset for labels Y axis to display it above/below the edge
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.ManualDrawing">
            <summary>
             Gets or Sets that user controls the path geometry object or it is generated automatically
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.Source">
            <summary>
            Source visual vertex object
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.Target">
            <summary>
            Target visual vertex object
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.Edge">
            <summary>
            Data edge object
            </summary>
        </member>
        <member name="P:GraphX.EdgeControl.StrokeThickness">
            <summary>
            Custom edge thickness
            </summary>
        </member>
        <member name="P:GraphX.EdgeLabelControl.Angle">
            <summary>
            Gets or sets label drawing angle in degrees
            </summary>
        </member>
        <member name="T:GraphX.DeleteAnimation">
            <summary>
            Controls delete animation types
            </summary>
        </member>
        <member name="T:GraphX.MouseOverAnimation">
            <summary>
            Controls mouse over animation types
            </summary>
        </member>
        <member name="T:GraphX.MoveAnimation">
            <summary>
            Vertex move animation types
            </summary>
        </member>
        <member name="F:GraphX.GraphAreaBase.COUNT_ROUTE_PATHS">
            <summary>
            Gets or sets if edge route paths must be taken into consideration while determining area size
            </summary>
        </member>
        <member name="M:GraphX.GraphAreaBase.ComputeEdgeRoutesByVertex(GraphX.VertexControl,System.Boolean)">
            <summary>
            Compute new edge routes for all edges of the vertex
            </summary>
            <param name="vc">Vertex visual control</param>
            <param name="vertexDataNeedUpdate">If vertex data inside edge routing algorthm needs to be updated</param>
        </member>
        <member name="M:GraphX.GraphAreaBase.GetAllVertexControls">
            <summary>
            Returns all existing VertexControls addded into the layout
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphX.GraphAreaBase.GetRelatedControls(GraphX.IGraphControl,GraphX.GraphControlType,GraphX.EdgesType)">
            <summary>
            Get controls related to specified control 
            </summary>
            <param name="ctrl">Original control</param>
            <param name="resultType">Type of resulting related controls</param>
            <param name="edgesType">Optional edge controls type</param>
        </member>
        <member name="M:GraphX.GraphAreaBase.GenerateEdgesForVertex(GraphX.VertexControl,GraphX.EdgesType,System.Windows.Visibility)">
            <summary>
            Generates and displays edges for specified vertex
            </summary>
            <param name="vc">Vertex control</param>
            <param name="edgeType">Type of edges to display</param>
            <param name="defaultVisibility">Default edge visibility on layout</param>
        </member>
        <member name="F:GraphX.GraphAreaBase.ExternalSettingsProperty">
            <summary>
            Use native object measure and arrange algorithm. This results in the odd zoom control operability but differently handles object coordinates.
            </summary>
        </member>
        <member name="F:GraphX.GraphAreaBase._topLeft">
            <summary>
            The position of the topLeft corner of the most top-left or top left object if UseNativeObjectArrange == false
            vertex.
            </summary>
        </member>
        <member name="F:GraphX.GraphAreaBase._bottomRight">
            <summary>
            The position of the bottom right corner of the most or bottom right object if UseNativeObjectArrange == false
            bottom-right vertex.
            </summary>
        </member>
        <member name="M:GraphX.GraphAreaBase.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the size of the control.
            </summary>
            <param name="arrangeSize">The arranged size of the control.</param>
            <returns>The size of the control.</returns>
        </member>
        <member name="M:GraphX.GraphAreaBase.MeasureOverride(System.Windows.Size)">
            <summary>
            Overridden measure. It calculates a size where all of 
            of the vertices are visible.
            </summary>
            <param name="constraint">The size constraint.</param>
            <returns>The calculated size.</returns>
        </member>
        <member name="P:GraphX.GraphAreaBase.EnableWinFormsHostingMode">
            <summary>
            Gets or sets special mode for WinForms interoperability
            </summary>
        </member>
        <member name="P:GraphX.GraphAreaBase.AutoAssignMissingDataId">
            <summary>
            Automaticaly assign unique Id (if missing) for vertex and edge data classes provided as Graph in GenerateGraph() method or by Addvertex() or AddEdge() methods
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.ContentSizeChanged">
            <summary>
            Fires when ContentSize property is changed
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.EdgeSelected">
            <summary>
            Fires when edge is selected
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.VertexDoubleClick">
            <summary>
            Fires when vertex is double clicked
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.VertexSelected">
            <summary>
            Fires when vertex is selected
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.VertexMouseUp">
            <summary>
            Fires when mouse up on vertex
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.VertexMouseEnter">
            <summary>
            Fires when mouse is over the vertex control
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.VertexMouseMove">
            <summary>
            Fires when mouse is moved over the vertex control
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.VertexMouseLeave">
            <summary>
            Fires when mouse leaves vertex control
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.LayoutCalculationFinished">
            <summary>
            Fires when layout algorithm calculation is finished
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.OverlapRemovalCalculationFinished">
            <summary>
            Fires when overlap removal algorithm calculation is finished
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.EdgeRoutingCalculationFinished">
            <summary>
            Fires when edge routing algorithm calculation is finished
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.RelayoutFinished">
            <summary>
            Fires when relayout operation is finished
            </summary>
        </member>
        <member name="E:GraphX.GraphAreaBase.GenerateGraphFinished">
            <summary>
            Fires when graph generation operation is finished
            </summary>
        </member>
        <member name="P:GraphX.GraphAreaBase.ExternalSettings">
             <summary>
            User-defined settings storage for using in templates and converters
             </summary>
        </member>
        <member name="P:GraphX.GraphAreaBase.MoveAnimation">
            <summary>
            Gets or sets vertex and edge controls animation
            </summary>
        </member>
        <member name="P:GraphX.GraphAreaBase.DeleteAnimation">
            <summary>
            Gets or sets vertex and edge controls delete animation
            </summary>
        </member>
        <member name="P:GraphX.GraphAreaBase.MouseOverAnimation">
            <summary>
            Gets or sets vertex and edge controls mouse over animation
            </summary>
        </member>
        <member name="P:GraphX.GraphAreaBase.ContentSize">
            <summary>
            Gets the size of the GraphArea taking into account positions of the children
            This is the main size pointer. Don't use DesiredSize or ActualWidth props as they are simulated.
            </summary>
        </member>
        <member name="P:GraphX.GraphAreaBase.SideExpansionSize">
            <summary>
            Gets or sets additional area space for each side of GraphArea. Useful for zoom adjustments.
            0 by default.
            </summary>
        </member>
        <member name="M:GraphX.GraphArea`3.GetLogicCore``1">
            <summary>
            Gets logic core unsafely converted to specified type
            </summary>
            <typeparam name="T">Logic core type</typeparam>
        </member>
        <member name="M:GraphX.GraphArea`3.AddCustomChildControl(System.Windows.UIElement)">
            <summary>
            Add custom control for 
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:GraphX.GraphArea`3.InsertCustomChildControl(System.Int32,System.Windows.UIElement)">
            <summary>
            Inserts custom control into GraphArea
            </summary>
            <param name="index">Insertion index</param>
            <param name="control">Custom control</param>
        </member>
        <member name="M:GraphX.GraphArea`3.RemoveCustomChildControl(System.Windows.UIElement)">
            <summary>
            Remove custom control from GraphArea children.
            </summary>
            <param name="control">Custom control</param>
        </member>
        <member name="M:GraphX.GraphArea`3.GetAllVertexControls">
            <summary>
            Returns all existing VertexControls added into the layout as new Array
            </summary>
        </member>
        <member name="M:GraphX.GraphArea`3.RemoveAllVertices">
            <summary>
            Remove all visual vertices
            </summary>
        </member>
        <member name="M:GraphX.GraphArea`3.RemoveAllEdges">
            <summary>
            Remove all visual edges
            </summary>
        </member>
        <member name="M:GraphX.GraphArea`3.RemoveVertex(`0)">
            <summary>
            Remove vertex from layout
            </summary>
            <param name="vertexData">Vertex data object</param>
        </member>
        <member name="M:GraphX.GraphArea`3.RemoveEdge(`1)">
            <summary>
            Remove edge from layout
            </summary>
            <param name="edgeData">Edge data object</param>
        </member>
        <member name="M:GraphX.GraphArea`3.AddVertex(`0,GraphX.VertexControl)">
            <summary>
            Add vertex to layout
            </summary>
            <param name="vertexData">Vertex data object</param>
            <param name="vertexControl">Vertex visual control object</param>
        </member>
        <member name="M:GraphX.GraphArea`3.AddEdge(`1,GraphX.EdgeControl)">
            <summary>
            Add an edge to layout. Edge is added into the end of the visual tree causing it to be rendered above all vertices.
            </summary>
            <param name="edgeData">Edge data object</param>
            <param name="edgeControl">Edge visual control</param>
        </member>
        <member name="M:GraphX.GraphArea`3.InsertEdge(`1,GraphX.EdgeControl,System.Int32)">
            <summary>
            Insert an edge to layout at specified position. By default, edge is inserted into the begining of the visual tree causing it to be rendered below all of the vertices.
            </summary>
            <param name="edgeData">Edge data object</param>
            <param name="edgeControl">Edge visual control</param>
            <param name="num">Insert position</param>
        </member>
        <member name="M:GraphX.GraphArea`3.GetVertexSizes">
            <summary>
            Get vertex control sizes
            </summary>
        </member>
        <member name="M:GraphX.GraphArea`3.GetVertexSizeRectangles(System.Collections.Generic.IDictionary{`0,GraphX.Measure.Point},System.Collections.Generic.Dictionary{`0,GraphX.Measure.Size},System.Boolean)">
            <summary>
            Get visual vertex size rectangles (can be used by some algorithms)
            </summary>
            <param name="positions">Vertex positions collection (auto filled if null)</param>
            <param name="vertexSizes">Vertex sizes collection (auto filled if null)</param>
            <param name="getCenterPoints">True if you want center points returned instead of top-left (needed by overlap removal algo)</param>
        </member>
        <member name="M:GraphX.GraphArea`3.GetVertexPositions">
            <summary>
            Returns all vertices positions list
            </summary>
        </member>
        <member name="M:GraphX.GraphArea`3.PreloadVertexes(`2,System.Boolean,System.Boolean)">
            <summary>
            Preloads vertex controls from specified graph. All vertices are created hidden by default.
            This method can be used for custom external algorithm implementations or manual visual graph population.
            </summary>
            <param name="graph">Data graph</param>
            <param name="dataContextToDataItem">Sets DataContext property to vertex data item of the control</param>
            <param name="forceVisPropRecovery"></param>
        </member>
        <member name="M:GraphX.GraphArea`3.RelayoutGraph(System.Boolean)">
            <summary>
            Relayout graph using the same vertexes
            </summary>
            <param name="generateAllEdges">Generate all available edges for graph</param>
        </member>
        <member name="M:GraphX.GraphArea`3.CancelRelayout">
            <summary>
            Cancel all undergoing async calculations
            </summary>
        </member>
        <member name="M:GraphX.GraphArea`3.GenerateGraph(`2,System.Boolean,System.Boolean)">
            <summary>
            Generate visual graph
            </summary>
            <param name="graph">Data graph</param>
            <param name="generateAllEdges">Generate all available edges for graph</param>
            <param name="dataContextToDataItem">Sets visual edge and vertex controls DataContext property to vertex data item of the control (Allows prop binding in xaml templates)</param>
        </member>
        <member name="M:GraphX.GraphArea`3.GenerateGraph(System.Boolean,System.Boolean)">
            <summary>
            Generate visual graph using Graph property (it must be set before this method is called)
            </summary>
            <param name="generateAllEdges">Generate all available edges for graph</param>
            <param name="dataContextToDataItem">Sets visual edge and vertex controls DataContext property to vertex data item of the control (Allows prop binding in xaml templates)</param>
        </member>
        <member name="M:GraphX.GraphArea`3.SetEdgesDashStyle(GraphX.EdgeDashStyle)">
            <summary>
            Sets all edges dash style
            </summary>
            <param name="style">Selected style</param>
        </member>
        <member name="M:GraphX.GraphArea`3.ShowAllEdgesArrows(System.Boolean)">
            <summary>
            Show or hide all edges arrows. Default value is True.
            </summary>
            <param name="isEnabled">Boolean value</param>
        </member>
        <member name="M:GraphX.GraphArea`3.ShowAllEdgesLabels(System.Boolean)">
            <summary>
            Show or hide all edges labels
            </summary>
            <param name="isEnabled">Boolean value</param>
        </member>
        <member name="M:GraphX.GraphArea`3.ShowAllVerticesLabels(System.Boolean)">
            <summary>
            Show or hide all vertex labels
            </summary>
            <param name="isEnabled">Boolean value</param>
        </member>
        <member name="M:GraphX.GraphArea`3.AlignAllEdgesLabels(System.Boolean)">
            <summary>
            Aligns all labels with edges or displays them horizontaly
            </summary>
            <param name="isEnabled">Boolean value</param>
        </member>
        <member name="M:GraphX.GraphArea`3.SetVerticesDrag(System.Boolean,System.Boolean)">
            <summary>
            Sets drag mode for all vertices
            </summary>
            <param name="isEnabled">Is drag mode enabled</param>
            <param name="updateEdgesOnMove">Is edges update enabled while dragging (use this if you have edge routing algorithms enabled)</param>
        </member>
        <member name="M:GraphX.GraphArea`3.SetVerticesMathShape(GraphX.VertexShape)">
            <summary>
            Sets math shape for all vertices
            </summary>
            <param name="shape">Selected math shape</param>
        </member>
        <member name="M:GraphX.GraphArea`3.SetVerticesHighlight(System.Boolean,GraphX.GraphControlType,GraphX.EdgesType)">
            <summary>
            Sets vertices highlight logic
            </summary>
            <param name="isEnabled">Is highlight enabled</param>
            <param name="hlObjectsOfType">Highlight connected objects if specified type</param>
            <param name="hlEdgesOfType">Highlight edges of specified type (according to previous property set)</param>
        </member>
        <member name="M:GraphX.GraphArea`3.SetEdgesHighlight(System.Boolean,GraphX.GraphControlType)">
            <summary>
            Sets edges highlight logic
            </summary>
            <param name="isEnabled">Is highlight enabled</param>
            <param name="hlObjectsOfType">Highlight connected objects if specified type</param>
        </member>
        <member name="M:GraphX.GraphArea`3.ComputeEdgeRoutesByVertex(GraphX.VertexControl,System.Boolean)">
            <summary>
            Compute new edge routes for all edges of the vertex
            </summary>
            <param name="vc">Vertex visual control</param>
            <param name="vertexDataNeedUpdate">If vertex data inside edge routing algorthm needs to be updated</param>
        </member>
        <member name="M:GraphX.GraphArea`3.GenerateAllEdges(System.Windows.Visibility,System.Boolean)">
            <summary>
            Generates all possible valid edges for Graph vertexes
            </summary>
            <param name="defaultVisibility">Default edge visibility on layout</param>
            <param name="updateLayout">Ensures that layout is properly updated before edges calculation. If you are sure that it is already updated you can set this param to False to increase performance. </param>
        </member>
        <member name="M:GraphX.GraphArea`3.GenerateEdgesForVertex(GraphX.VertexControl,GraphX.EdgesType,System.Windows.Visibility)">
            <summary>
            Generates and displays edges for specified vertex
            </summary>
            <param name="vc">Vertex control</param>
            <param name="edgeType">Type of edges to display</param>
            <param name="defaultVisibility">Default edge visibility on layout</param>
        </member>
        <member name="M:GraphX.GraphArea`3.UpdateAllEdges">
            <summary>
            Update visual appearance for all possible visual edges
            </summary>
        </member>
        <member name="M:GraphX.GraphArea`3.GetRelatedControls(GraphX.IGraphControl,GraphX.GraphControlType,GraphX.EdgesType)">
            <summary>
            Get controls related to specified control 
            </summary>
            <param name="ctrl">Original control</param>
            <param name="resultType">Type of resulting related controls</param>
            <param name="edgesType">Optional edge controls type</param>
        </member>
        <member name="M:GraphX.GraphArea`3.SerializeToFile(System.String)">
            <summary>
            Serialize graph layout to file using custom FileServiceProvider
            </summary>
            <param name="filename">Output filename</param>
            <exception cref="T:GraphX.GX_InvalidDataException">Occures when LogicCore or object Id isn't set</exception>
            <exception cref="T:GraphX.GX_ObjectNotFoundException">Occures when FileServiceProvider not set</exception>
        </member>
        <member name="M:GraphX.GraphArea`3.DeserializeFromFile(System.String)">
            <summary>
            Deserializes previously serialized graph layout from file
            </summary>
            <param name="filename">Input filename</param>
            <exception cref="T:GraphX.GX_InvalidDataException"></exception>
            <exception cref="T:GraphX.GX_ObjectNotFoundException"></exception>
            <exception cref="T:GraphX.GX_SerializationException"></exception>
        </member>
        <member name="M:GraphX.GraphArea`3.ExportAsPng">
            <summary>
            Export current graph layout into the PNG image file. layout will be saved in full size.
            </summary>
        </member>
        <member name="M:GraphX.GraphArea`3.ExportAsJpeg(System.Int32)">
            <summary>
            Export current graph layout into the JPEG image file. layout will be saved in full size.
            </summary>
            <param name="quality">Optional image quality parameter</param>   
        </member>
        <member name="M:GraphX.GraphArea`3.ExportAsImage(GraphX.ImageType,System.Boolean,System.Double,System.Int32)">
            <summary>
            Export current graph layout into the chosen image file and format. layout will be saved in full size.
            </summary>
            <param name="itype">Image format</param>
            <param name="dpi">Optional image DPI parameter</param>
            <param name="useZoomControlSurface">Use zoom control parent surface to render bitmap (only visible zoom content will be exported)</param>
            <param name="quality">Optional image quality parameter (for JPEG)</param>   
        </member>
        <member name="M:GraphX.GraphArea`3.PrintDialog(System.String)">
            <summary>
            Print current visual graph layout
            </summary>
            <param name="description">Optional header description</param>
        </member>
        <member name="M:GraphX.GraphArea`3.ClearLayout(System.Boolean)">
            <summary>
            Clear graph visual layout (all edges and vertices)
            </summary>
            <param name="removeCustomObjects">Also remove any possible custom objects</param>
        </member>
        <member name="P:GraphX.GraphArea`3.LogicCore">
            <summary>
            Gets or sets GraphX logic core object that will drive this visual
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.ControlFactory">
            <summary>
            Gets or sets control factory class that allows you to define what vertex and edge controls will be generated by GraphX
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.EnableVisualPropsRecovery">
            <summary>
            Gets or sets if visual properties such as edge dash style or vertex shape should be automaticaly reapplied to visuals when graph is regenerated.
            True by default.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.EnableVisualPropsApply">
            <summary>
            Gets or sets if visual properties such as edge dash style or vertex shape should be automaticaly applied to newly added visuals which are added using AddVertex() or AddEdge() or similar methods.
            True by default.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.IsEdgeRoutingEnabled">
            <summary>
            Link to LogicCore. Gets if edge routing is used.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.EdgeSelfLoopCircleRadius">
            <summary>
            Link to LogicCore. Gets self looped edge radius.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.EdgeShowSelfLooped">
            <summary>
            Link to LogicCore. Gets if self looped edges are enabled.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.EnableParallelEdges">
            <summary>
            Link to LogicCore. Gets if parallel edges are enabled.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.EdgeSelfLoopCircleOffset">
            <summary>
            Link to LogicCore. Gets looped edge offset.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.EdgeCurvingEnabled">
            <summary>
            Link to LogicCore. Gets if edge curving is used.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.EdgeCurvingTolerance">
            <summary>
            Link to LogicCore. Gets if edge curving tolerance.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.Children">
            <summary>
            Dummy property. Use EdgesList and VertexList instead.
            Also use corresponding methods to modify item collections.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.StateStorage">
            <summary>
            Provides methods for saving and loading graph layout states
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.EdgesList">
            <summary>
            Gets edge controls read only collection. To modify collection use AddEdge() RemoveEdge() methods.
            </summary>
        </member>
        <member name="P:GraphX.GraphArea`3.VertexList">
            <summary>
            Gets vertex controls read only collection. To modify collection use AddVertex() RemoveVertex() methods.
            </summary>
        </member>
        <member name="M:GraphX.GeometryHelper.Intersects(System.Windows.Vector,System.Windows.Vector,System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Get Intersection point on a rectangular surface
            </summary>
            <param name="a1">a1 is line1 start</param>
            <param name="a2">a2 is line1 end</param>
            <param name="b1">b1 is line2 start</param>
            <param name="b2">b2 is line2 end</param>
            <returns></returns>
        </member>
        <member name="M:GraphX.GeometryHelper.GetCurveThroughPoints(System.Windows.Point[],System.Double,System.Double)">
            <summary>
            Generate PathGeometry object with curved Path using supplied route points
            </summary>
            <param name="points">Route points</param>
            <param name="tension"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GraphX.GeometryHelper.TryFreeze(System.Windows.Freezable)">
            <summary>
            Try to freeze object 
            </summary>
            <param name="freezable">Freezable object</param>
            <returns></returns>
        </member>
        <member name="M:GraphX.Models.AnimationFactory.CreateMoveAnimation(GraphX.MoveAnimation,System.TimeSpan)">
            <summary>
            Create move animation by supplied type
            </summary>
            <param name="type">Animation type</param>
            <param name="duration">Animation duration</param>
        </member>
        <member name="P:GraphX.EdgeEventOptions.MouseMoveEnabled">
            <summary>
            Gets or sets if MouseMove event should be enabled
            </summary>
        </member>
        <member name="P:GraphX.EdgeEventOptions.MouseEnterEnabled">
            <summary>
            Gets or sets if MouseEnter event should be enabled
            </summary>
        </member>
        <member name="P:GraphX.EdgeEventOptions.MouseLeaveEnabled">
            <summary>
            Gets or sets if MouseLeave event should be enabled
            </summary>
        </member>
        <member name="P:GraphX.EdgeEventOptions.MouseClickEnabled">
            <summary>
            Gets or sets if MouseDown event should be enabled
            </summary>
        </member>
        <member name="P:GraphX.EdgeEventOptions.MouseDoubleClickEnabled">
            <summary>
            Gets or sets if MouseDoubleClick event should be enabled
            </summary>
        </member>
        <member name="T:GraphX.Controls.Models.GraphControlFactory">
            <summary>
            Factory class responsible for VertexControl and EdgeControl objects creation
            </summary>
        </member>
        <member name="P:GraphX.Controls.Models.IGraphControlFactory.FactoryRootArea">
            <summary>
            Root graph area for the factory
            </summary>
        </member>
        <member name="F:GraphX.Controls.Models.PropertyChangeNotifier.ValueProperty">
            <summary>
            Identifies the <see cref="P:GraphX.Controls.Models.PropertyChangeNotifier.Value"/> dependency property
            </summary>
        </member>
        <member name="P:GraphX.Controls.Models.PropertyChangeNotifier.Value">
            <summary>
            Returns/sets the value of the property
            </summary>
            <seealso cref="F:GraphX.Controls.Models.PropertyChangeNotifier.ValueProperty"/>
        </member>
        <member name="M:GraphX.StateStorage`3.ContainsState(System.String)">
            <summary>
            Returns true if state with supplied ID exists in the current states collection
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:GraphX.StateStorage`3.SaveState(System.String,System.String)">
            <summary>
            Save current graph state into memory, including visual and data controls
            </summary>
            <param name="id">New unique state id</param>
            <param name="description">Optional state description</param>
        </member>
        <member name="M:GraphX.StateStorage`3.LoadState(System.String)">
            <summary>
            Load previously saved state into layout
            </summary>
            <param name="id">Unique state id</param>
        </member>
        <member name="M:GraphX.StateStorage`3.RemoveState(System.String)">
            <summary>
            Remove state by id
            </summary>
            <param name="id">Unique state id</param>
        </member>
        <member name="M:GraphX.StateStorage`3.GetStates">
            <summary>
            Get all states from the storage
            </summary>
        </member>
        <member name="M:GraphX.StateStorage`3.GetState(System.String)">
            <summary>
            Get all states from the storage
            </summary>
            <param name="id">Unique state id</param>
        </member>
        <member name="P:GraphX.VertexEventOptions.MouseMoveEnabled">
            <summary>
            Gets or sets if MouseMove event should be enabled
            </summary>
        </member>
        <member name="P:GraphX.VertexEventOptions.MouseEnterEnabled">
            <summary>
            Gets or sets if MouseEnter event should be enabled
            </summary>
        </member>
        <member name="P:GraphX.VertexEventOptions.MouseLeaveEnabled">
            <summary>
            Gets or sets if MouseLeave event should be enabled
            </summary>
        </member>
        <member name="P:GraphX.VertexEventOptions.MouseClickEnabled">
            <summary>
            Gets or sets if MouseDown event should be enabled
            </summary>
        </member>
        <member name="P:GraphX.VertexEventOptions.MouseDoubleClickEnabled">
            <summary>
            Gets or sets if MouseDoubleClick event should be enabled
            </summary>
        </member>
        <member name="P:GraphX.VertexEventOptions.PositionChangeNotification">
            <summary>
            Gets or sets if position trace enabled. If enabled then PositionChanged event will be rised on each X or Y property change.
            True by default. 
            </summary>
        </member>
        <member name="P:GraphX.Models.VertexPositionEventArgs.VertexControl">
            <summary>
            Vertex control
            </summary>
        </member>
        <member name="P:GraphX.Models.VertexPositionEventArgs.Position">
            <summary>
            Attached coordinates X and Y 
            </summary>
        </member>
        <member name="P:GraphX.Models.VertexPositionEventArgs.OffsetPosition">
            <summary>
            Offset of the vertex control within the GraphArea
            </summary>
        </member>
        <member name="F:GraphX.PrintHelper.DefaultDPI">
            <summary>
            Default image resolution
            </summary>
        </member>
        <member name="M:GraphX.PrintHelper.ExportToImage(GraphX.GraphAreaBase,System.Uri,GraphX.ImageType,System.Boolean,System.Double,System.Int32)">
            <summary>
            Method exports the GraphArea to an png image.
            </summary>
            <param name="surface">GraphArea control</param>
            <param name="path">Image destination path</param>
            <param name="imgdpi">Optional image DPI parameter</param>
            <param name="imgQuality">Optional image quality parameter (for some formats like JPEG)</param>
        </member>
        <member name="T:GraphX.VertexControl">
            <summary>
            Visual vertex control
            </summary>
        </member>
        <member name="M:GraphX.VertexControl.SetPosition(System.Windows.Point,System.Boolean)">
            <summary>
            Set attached coordinates X and Y
            </summary>
            <param name="pt"></param>
            <param name="alsoFinal"></param>
        </member>
        <member name="M:GraphX.VertexControl.GetPosition(System.Boolean,System.Boolean)">
            <summary>
            Get control position on the GraphArea panel in attached coords X and Y
            </summary>
            <param name="final"></param>
            <param name="round"></param>
        </member>
        <member name="M:GraphX.VertexControl.GetPositionGraphX(System.Boolean,System.Boolean)">
            <summary>
            Get control position on the GraphArea panel in attached coords X and Y (GraphX type version)
            </summary>
            <param name="final"></param>
            <param name="round"></param>
        </member>
        <member name="M:GraphX.VertexControl.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Create vertex visual control
            </summary>
            <param name="vertexData">Vertex data object</param>
            <param name="tracePositionChange">Listen for the vertex position changed events and fire corresponding event</param>
            <param name="bindToDataObject">Bind DataContext to the Vertex data. True by default. </param>
        </member>
        <member name="M:GraphX.VertexControl.Clean">
            <summary>
            Cleans all potential memory-holding code
            </summary>
        </member>
        <member name="P:GraphX.VertexControl.EventOptions">
            <summary>
            Provides settings for event calls within single vertex control
            </summary>
        </member>
        <member name="P:GraphX.VertexControl.LabelAngle">
            <summary>
            Gets or sets vertex label angle
            </summary>
        </member>
        <member name="P:GraphX.VertexControl.VertexShape">
            <summary>
            Gets or sets actual shape form of vertex control (affects mostly math calculations such edges connectors)
            </summary>
        </member>
        <member name="P:GraphX.VertexControl.Vertex">
            <summary>
            Gets or sets vertex data object
            </summary>
        </member>
        <member name="P:GraphX.VertexControl.RootArea">
            <summary>
            Gets or sets vertex control parent GraphArea object (don't need to be set manualy)
            </summary>
        </member>
        <member name="E:GraphX.VertexControl.PositionChanged">
            <summary>
            Fires when IsPositionTraceEnabled property set and object changes its coordinates.
            </summary>
        </member>
        <member name="F:GraphX.Controls.ZoomControl._scaleTransform">
            <summary>
            Applied to the presenter.
            </summary>
        </member>
        <member name="F:GraphX.Controls.ZoomControl._translateTransform">
            <summary>
            Applied to the scrollviewer.
            </summary>
        </member>
        <member name="M:GraphX.Controls.ZoomControl.ToContentRectangle(System.Windows.Rect)">
            <summary>
            Converts screen rectangle area to rectangle in content coordinate space according to scale and translation
            </summary>
            <param name="screenRectangle">Screen rectangle data</param>
        </member>
        <member name="M:GraphX.Controls.ZoomControl.ZoomTo(System.Windows.Rect,System.Boolean)">
            <summary>
            Zoom to rectangle area (MAY BE DEPRECATED). Use ZoomToContent method instead.
            </summary>
            <param name="rect"></param>
            <param name="setDelta"></param>
        </member>
        <member name="M:GraphX.Controls.ZoomControl.ZoomToContent(System.Windows.Rect,System.Boolean)">
            <summary>
            Zoom to rectangle area of the content
            </summary>
            <param name="rectangle">Rectangle area</param>
            <param name="usingContentCoordinates">Sets if content coordinates or screen coordinates was specified</param>
        </member>
        <member name="M:GraphX.Controls.ZoomControl.ZoomToOriginal">
            <summary>
            Zoom to original size
            </summary>
        </member>
        <member name="M:GraphX.Controls.ZoomControl.CenterContent">
            <summary>
            Centers content on the screen
            </summary>
        </member>
        <member name="M:GraphX.Controls.ZoomControl.ZoomToFill">
            <summary>
            Zoom to fill screen area with the content
            </summary>
        </member>
        <member name="M:GraphX.Controls.ZoomControl.GetTrackableTranslate">
            <summary>
            Returns initial translate depending on container graph settings (to deal with optinal new coord system)
            </summary>
        </member>
        <member name="P:GraphX.Controls.ZoomControl.IsAnimationDisabled">
            <summary>
            Gets or sets if animation should be disabled
            </summary>
        </member>
        <member name="P:GraphX.Controls.ZoomControl.UseCtrlForMouseWheel">
            <summary>
            Use Ctrl key to zoom with mouse wheel or without it
            </summary>
        </member>
        <member name="P:GraphX.Controls.ZoomControl.UseAbsoluteZoomOnMouseWheel">
            <summary>
            Gets or sets absolute zooming on mouse wheel which doesn't depend on mouse position
            </summary>
        </member>
        <member name="E:GraphX.Controls.ZoomControl.AreaSelected">
            <summary>
            Fires when area has been selected using SelectionModifiers 
            </summary>
        </member>
        <member name="P:GraphX.Controls.ZoomControl.ContentVisual">
            <summary>
            Gets content object as UIElement
            </summary>
        </member>
        <member name="P:GraphX.Controls.ZoomControl.TrackableContent">
            <summary>
            Gets content as ITrackableContent like GraphArea
            </summary>
        </member>
        <member name="P:GraphX.Controls.ZoomControl.IsContentTrackable">
            <summary>
            Is loaded content represents ITrackableContent object
            </summary>
        </member>
        <member name="P:GraphX.Controls.ZoomControl.ModifierMode">
            <summary>
            Gets or sets the active modifier mode.
            </summary>
        </member>
        <member name="P:GraphX.Controls.ZoomControl.Mode">
            <summary>
            Gets or sets the mode of the zoom control.
            </summary>
        </member>
        <member name="F:GraphX.Controls.ZoomControlModes.Fill">
            <summary>
            The content should fill the given space.
            </summary>
        </member>
        <member name="F:GraphX.Controls.ZoomControlModes.Original">
            <summary>
            The content will be represented in its original size.
            </summary>
        </member>
        <member name="F:GraphX.Controls.ZoomControlModes.Custom">
            <summary>
            The content will be zoomed with a custom percent.
            </summary>
        </member>
        <member name="F:GraphX.Controls.ZoomViewModifierMode.None">
            <summary>
            It does nothing at all.
            </summary>
        </member>
        <member name="F:GraphX.Controls.ZoomViewModifierMode.Pan">
            <summary>
            You can pan the view with the mouse in this mode.
            </summary>
        </member>
        <member name="F:GraphX.Controls.ZoomViewModifierMode.ZoomIn">
            <summary>
            You can zoom in with the mouse in this mode.
            </summary>
        </member>
        <member name="F:GraphX.Controls.ZoomViewModifierMode.ZoomOut">
            <summary>
            You can zoom out with the mouse in this mode.
            </summary>
        </member>
        <member name="F:GraphX.Controls.ZoomViewModifierMode.ZoomBox">
            <summary>
            Zooming after the user has been selected the zooming box.
            </summary>
        </member>
    </members>
</doc>
